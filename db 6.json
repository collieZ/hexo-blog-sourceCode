{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/uploads/wechat-qcode.png","path":"uploads/wechat-qcode.png","modified":1,"renderable":0},{"_id":"themes/next/source/404.html","path":"404.html","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"f655c6b9404f088e1817876eda3ceaede3b8e459","modified":1644483763492},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1548499158105},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1548499158105},{"_id":"themes/next/.DS_Store","hash":"e4667e55e4bda820860ad2650ac4f3f9cb4c3ab3","modified":1620267515769},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1548499158105},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1548499158106},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1548499158106},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1548499158106},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1548499158106},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1548499158106},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1548499158106},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1548499158107},{"_id":"themes/next/README.cn.md","hash":"2c766b3369ed477bce134a5450dab45bef161504","modified":1548499158107},{"_id":"themes/next/README.md","hash":"8ce60ce578963eb4e1eb5e33e1efc2fc4779af9c","modified":1548499158107},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1548499158107},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1548499158108},{"_id":"themes/next/_config.yml","hash":"5d7b4d9bf767d1f3576eba1e38aebf8624ae2fba","modified":1617085918044},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1548499158121},{"_id":"source/_posts/JS new 运算符的使用和原理剖析.md","hash":"7c58fab33bfab3af0fbcdeeba007519c22477c81","modified":1617087415000},{"_id":"source/_posts/.DS_Store","hash":"0fcd804367a5670e318de051ed6840ca34eec61a","modified":1617084625926},{"_id":"source/_posts/Js 如何实现函数只执行一次.md","hash":"1c9c1c73293bdd12f1bf7ed18972bbc23e66096c","modified":1604503192077},{"_id":"source/_posts/blob2pic.md","hash":"c2d763b3236c9611d370a7f10ab8488dc460b46e","modified":1586274822285},{"_id":"source/_posts/eslint-prettier-stylelint-commitlint配置.md","hash":"f06287710c6d9319297bbee7855430e05d5a4455","modified":1644489459240},{"_id":"source/_posts/js   Call、Apply的使用和剖析.md","hash":"1ef9e4ec2d19894a2e81e441ba121db8cc67e935","modified":1604503790935},{"_id":"source/_posts/Nuxt.js  i18n国际化.md","hash":"62c23b6b1dcf5cbc505a812e9575945612fd4c04","modified":1554044905793},{"_id":"source/_posts/ThreeJs基础概念.md","hash":"ff3f31e8258a0ad3706e113e0dc302d72d09e3de","modified":1617087447000},{"_id":"source/_posts/JS bind的使用和实现原理剖析.md","hash":"70285bf5474f3d67fe8aba7c7d34b23920a5c70b","modified":1617087405000},{"_id":"source/_posts/js 的浅拷贝和深拷贝.md","hash":"a6f752a1308f6e5a6013b52966d5268e7e973b25","modified":1604503619893},{"_id":"source/_posts/vue-router配置踩坑.md","hash":"0b2ae1d07763e0b169b22ba9c9a7020c11a547e8","modified":1619773691091},{"_id":"source/_posts/react  知识点.md","hash":"986e0480e52b00411d8ed64bc15ddd93bc344976","modified":1595257088881},{"_id":"source/_posts/从零开始学习Vue源码(二) ——响应式基本原理.md","hash":"77c9dba25c4f9f4a33c9b069cd5e70e96ef16974","modified":1595257113870},{"_id":"source/_posts/css多行文本省略号.md","hash":"b7db4ce14f77257d9d665703761e562636ef593d","modified":1553145582250},{"_id":"source/_posts/less笔记.md","hash":"f89ccee9693cbc62976496a731fee30f373f4025","modified":1617087429000},{"_id":"source/_posts/前端知识点梳理   --part one.md","hash":"aea76b6f40d7b41bae672cc15893f2615fdea3f1","modified":1595258063307},{"_id":"source/_posts/同步、异步、任务队列.md","hash":"2e68c6be293d25a0d3c3bc638ecc017f1a0ebff2","modified":1617087439000},{"_id":"source/_posts/水波纹动效.md","hash":"a7ff127a4c1be38dea06c2886bbadf1fa65a8247","modified":1595257126000},{"_id":"source/categories/.DS_Store","hash":"45673a8ec47535550c1655fb6f129816c4bf94f9","modified":1550284244751},{"_id":"source/_posts/不使用 + 、-求两个数的和 （含符号）.md","hash":"39f2427cfcc86ab1e75b6331609dca1c2ca7d006","modified":1592496745534},{"_id":"source/tags/.DS_Store","hash":"45673a8ec47535550c1655fb6f129816c4bf94f9","modified":1550286841972},{"_id":"source/_posts/从零开始学习Vue源码(一) —— 概览.md","hash":"45f7a247d4d02da054f4be47152081195bee6824","modified":1595257103800},{"_id":"source/_posts/使用rollup打包并发布一个js库.md","hash":"03ee06d2e00ea6f2a89374b3b023ac16af3549d2","modified":1619773679483},{"_id":"source/categories/index.md","hash":"4558549e2f1f099e01abcf46a78f3bf81024fe1e","modified":1550287655297},{"_id":"source/tags/index.md","hash":"aebd40e6c1cbe832a607e8db7a365bc97ec07398","modified":1550287663853},{"_id":"source/uploads/.DS_Store","hash":"08f86af987013492ab1a74371f3fc8ecbedc2bc9","modified":1550298292999},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1548499158097},{"_id":"themes/next/.git/index","hash":"a6190437d74523c2337a5a6539b540652c4dac9d","modified":1585836253699},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1548499158095},{"_id":"source/uploads/wechat-qcode.png","hash":"c46829642e2877ed7914a6134aec8dca51e93185","modified":1550288889153},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1548499158105},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1548499130849},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1548499158105},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1548499158105},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1548499158106},{"_id":"themes/next/.git/packed-refs","hash":"69237944e31c16fe545d1f47b0b1e5b1d99660da","modified":1548499158091},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1548499158108},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1548499158108},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1548499158108},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1548499158108},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1548499158108},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1548499158109},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1548499158109},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1548499158109},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1548499158109},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1548499158109},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1548499158109},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1548499158110},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1548499158110},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1548499158110},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1548499158110},{"_id":"themes/next/layout/.DS_Store","hash":"287b3cacef994f9be94a7d7f64b6102f732f287c","modified":1550317316003},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1548499158109},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1548499158111},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1548499158121},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1548499158121},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1548499158121},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1548499158121},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1548499158122},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1548499158121},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1548499158121},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1548499158121},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1548499158122},{"_id":"themes/next/source/404.html","hash":"d6cd47ba4ab178269d9e7be773e521a3f74a738b","modified":1550288483259},{"_id":"themes/next/source/.DS_Store","hash":"bc3bec3b6e61098b8760856ce50237b8d2db565b","modified":1550288985750},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1548499158202},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1548499158203},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1548499158203},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1548499158146},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1548499130851},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1548499130849},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1548499130853},{"_id":"themes/next/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1548499130852},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1548499130854},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1548499130850},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1548499130850},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1548499130854},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1548499130852},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1548499130855},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1548499130853},{"_id":"themes/next/.git/logs/HEAD","hash":"040e459ccb4e301c71646a45339918e6908b26b8","modified":1548499158096},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1548499130848},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1548499158110},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1548499158110},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1548499158111},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1548499158111},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1548499158111},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1548499158112},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1548499158112},{"_id":"themes/next/layout/_macro/post.swig","hash":"00ca04166bf1d867c0df9e87f47a29faf916eac8","modified":1550298539162},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1548499158114},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1548499158115},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1548499158114},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1548499158119},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1548499158119},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1548499158119},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1548499158118},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1548499158119},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1548499158119},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1548499158112},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1548499158119},{"_id":"themes/next/layout/_partials/footer.swig","hash":"eca9d5bae1776aab95f46b4d60c39a1a7f5e108e","modified":1550318896009},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1548499158113},{"_id":"themes/next/layout/_partials/head.swig","hash":"bdbb4ba7c4f4934ec34972d180f1063f6674e43e","modified":1550318898527},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1548499158113},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1548499158113},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1548499158113},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1548499158122},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1548499158122},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1548499158122},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1548499158122},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1548499158123},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1548499158123},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1548499158123},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1548499158123},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1548499158145},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1548499158147},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1548499158147},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1548499158148},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1548499158148},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1548499158148},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1548499158148},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1548499158148},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1548499158149},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1548499158149},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1548499158147},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1548499158149},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1548499158150},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1548499158150},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1548499158150},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1548499158151},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1548499158151},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1548499158151},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1548499158151},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1548499158115},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1548499158115},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1548499158123},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1548499158137},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1548499158137},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1548499158137},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1548499158145},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1548499158145},{"_id":"themes/next/.git/refs/heads/master","hash":"7999da428ebb87e5a2b27315d8d5123c1ccdfaa5","modified":1548499158096},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1548499158115},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1548499158114},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1548499158115},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1548499158115},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1548499158115},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1548499158115},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1548499158116},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1548499158116},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1548499158116},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1548499158116},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1548499158116},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1548499158116},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1548499158116},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1548499158117},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1548499158117},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1548499158117},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1548499158117},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1548499158117},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1548499158117},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1548499158118},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1548499158118},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1548499158118},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1548499158118},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1548499158118},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1548499158118},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1548499158120},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1548499158120},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1548499158120},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1548499158120},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1548499158112},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1548499158112},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1548499158113},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1548499158113},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1548499158113},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1548499158113},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1548499158114},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1548499158114},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1548499158114},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1548499158137},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1548499158136},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1548499158137},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1548499158137},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1548499158145},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1548499158144},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1548499158145},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1548499158145},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1548499158152},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1548499158152},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1548499158152},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1548499158153},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1548499158154},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1548499158153},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1548499158154},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1548499158154},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1548499158155},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1548499158155},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1548499158155},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1548499158164},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1548499158163},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1548499158164},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1548499158164},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1548499158168},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1548499158169},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1548499158172},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1548499158169},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1548499158169},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1548499158171},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1548499158172},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1548499158173},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1548499158174},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1548499158186},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1548499158188},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1548499158188},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1548499158188},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1548499158160},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1548499158189},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1548499158188},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1548499158189},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1548499158189},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1548499158191},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1548499158189},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1548499158190},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1548499158191},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1548499158192},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1548499158192},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1548499158192},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1548499158193},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1548499158193},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1548499158193},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1548499158194},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1548499158194},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1548499158195},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1548499158199},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1548499158199},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1548499158202},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1548499158202},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1548499158202},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1548499158186},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1548499158187},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1548499158187},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1548499158187},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1548499158187},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1548499158187},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1548499158186},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"040e459ccb4e301c71646a45339918e6908b26b8","modified":1548499158096},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1548499158094},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1548499158120},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1548499158120},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1548499158124},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1548499158124},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1548499158123},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1548499158123},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1548499158124},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1548499158127},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1548499158130},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1548499158133},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1548499158134},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1548499158135},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1548499158135},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1548499158135},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1548499158136},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1548499158135},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1548499158138},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1548499158138},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1548499158138},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1548499158138},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1548499158139},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1548499158139},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1548499158139},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1548499158139},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1548499158141},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1548499158142},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1548499158142},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1548499158142},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1548499158142},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1548499158143},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1548499158143},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1548499158143},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1548499158144},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1548499158144},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1548499158144},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1548499158154},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1548499158158},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1548499158164},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1548499158159},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1548499158159},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1548499158164},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1548499158165},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1548499158165},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1548499158165},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1548499158167},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1548499158167},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1548499158165},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1548499158170},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1548499158168},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1548499158170},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1548499158176},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1548499158198},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1548499158199},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1548499158175},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1548499158177},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1548499158159},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1548499158185},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1548499158185},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"040e459ccb4e301c71646a45339918e6908b26b8","modified":1548499158094},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1548499158124},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1548499158125},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1548499158125},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1548499158125},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1548499158125},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1548499158125},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1548499158125},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1548499158126},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1548499158125},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1548499158126},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1548499158126},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1548499158126},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1548499158127},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1548499158126},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1548499158127},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1548499158127},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1548499158127},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1548499158127},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1548499158128},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1548499158127},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1548499158127},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1548499158128},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1548499158128},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1548499158128},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1548499158128},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1548499158129},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1548499158128},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1548499158128},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1548499158129},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1548499158128},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1548499158129},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1548499158129},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1548499158129},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1548499158129},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1548499158129},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1548499158130},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1548499158130},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1548499158130},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1548499158130},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1548499158130},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1548499158130},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1548499158130},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1548499158130},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1548499158131},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1548499158131},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1548499158131},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1548499158131},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1548499158131},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1548499158131},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1548499158131},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1548499158132},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1548499158132},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1548499158132},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1548499158132},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1548499158132},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1548499158133},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1548499158133},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1548499158133},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1548499158141},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1548499158141},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1548499158142},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1548499158158},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1548499158000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1548499158156},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1548499158156},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1548499158157},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1548499158166},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1548499158166},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1548499158166},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1548499158166},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1548499158166},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1548499158167},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1548499158178},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1548499158180},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1548499158201},{"_id":"themes/next/.git/objects/pack/pack-2e8bfe0bbc40ee78847e36e8d3edd701735c6f4e.idx","hash":"50fb014b44992cfb2c56176f1defd1be870f96b9","modified":1548499158068},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1548499158184},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1548499158163},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1548499158198},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1548499158183},{"_id":"themes/next/.git/objects/pack/pack-2e8bfe0bbc40ee78847e36e8d3edd701735c6f4e.pack","hash":"85a7403d5a07a998880356d55082d480ab60cff4","modified":1548499158064},{"_id":"public/search.xml","hash":"05af17ce832c0b51f0fbc9dc79fcc46797178872","modified":1644489495507},{"_id":"public/categories/index.html","hash":"592665ff307b8fffef0def2aee8db6f3d4b02dce","modified":1644489495534},{"_id":"public/tags/index.html","hash":"df1ca17427a3296d0e39238310fcc729515a0f2d","modified":1644489495534},{"_id":"public/2022/02/10/eslint-prettier-stylelint-commitlint配置/index.html","hash":"4230915cf41f0ea8451203edf3c03dc70a37bfe0","modified":1644489495534},{"_id":"public/2021/04/30/使用rollup打包并发布一个js库/index.html","hash":"e59ea09bdb4b3d32bbab1be935ccfddb3002bf10","modified":1644489495534},{"_id":"public/2021/03/30/vue-router配置踩坑/index.html","hash":"89be254dec33508e2441ea7f6129a517b1ef7a5f","modified":1644489495534},{"_id":"public/2021/03/30/ThreeJs基础概念/index.html","hash":"34cfd408610cf9478543cb49e7f28bbb5b37bb80","modified":1644489495535},{"_id":"public/2021/03/30/同步、异步、任务队列/index.html","hash":"905d9af1074cc095b0771241818a50b6455604fa","modified":1644489495535},{"_id":"public/2020/11/04/JS new 运算符的使用和原理剖析/index.html","hash":"908ce56ed6358b0f0a12372e8feb631b0196c993","modified":1644489495535},{"_id":"public/2020/11/04/JS bind的使用和实现原理剖析/index.html","hash":"2e36c38f06b8d72c80f4aa000abbe13d149770c2","modified":1644489495535},{"_id":"public/2020/11/04/js   Call、Apply的使用和剖析/index.html","hash":"5ea100b7339d04543b4df7ff22c349fe328a1b84","modified":1644489495535},{"_id":"public/2020/11/04/js 的浅拷贝和深拷贝/index.html","hash":"6580c1a0be1704fa42e8044cdb0f6680565eeef9","modified":1644489495535},{"_id":"public/2020/11/04/Js 如何实现函数只执行一次/index.html","hash":"79ef493ccd81399f9ebdeb4ec239366f9aef8fc3","modified":1644489495535},{"_id":"public/2020/11/04/less笔记/index.html","hash":"9d6c6e0d69372edb286bff593ad13a5add33631e","modified":1644489495535},{"_id":"public/2020/07/20/水波纹动效/index.html","hash":"f7acbfb2e3fe3418218dc6a9509c496ec74d04f0","modified":1644489495535},{"_id":"public/2020/07/01/从零开始学习Vue源码(二) ——响应式基本原理/index.html","hash":"f686d0212f69cf738e6bebb04797861773c7280d","modified":1644489495535},{"_id":"public/2020/07/01/从零开始学习Vue源码(一) —— 概览/index.html","hash":"c17b7603c99f2dae47378a820f9c7b5503adeaf7","modified":1644489495535},{"_id":"public/2020/07/01/react  知识点/index.html","hash":"22f950ff29af4f991f2aa4ea53ffb5b405eb40fc","modified":1644489495535},{"_id":"public/2020/06/19/不使用 + 、-求两个数的和 （含符号）/index.html","hash":"55efba2fbe94225dbd40035f1f7b7341e93be353","modified":1644489495535},{"_id":"public/2020/06/10/前端知识点梳理   --part one/index.html","hash":"e6f969c6c49d11aedbb77758b5b00abcea2653a7","modified":1644489495536},{"_id":"public/2020/04/07/blob2pic/index.html","hash":"49005207671c0b323df495fed0dfde6640ead7cd","modified":1644489495536},{"_id":"public/2019/03/31/Nuxt.js  i18n国际化/index.html","hash":"8dee4371e710b352533c94b1d7c406b3a95d9e98","modified":1644489495536},{"_id":"public/2019/03/21/css多行文本省略号/index.html","hash":"16822066838d4e3f5d798c59488ba0a51e796fcf","modified":1644489495536},{"_id":"public/archives/index.html","hash":"b262d8a41429d57e6d4a26e03abddbf56f69b0d7","modified":1644489495536},{"_id":"public/archives/page/2/index.html","hash":"7045f2beebfd94fd3e081ddc4851d353d5b7ea58","modified":1644489495536},{"_id":"public/archives/2019/index.html","hash":"2ea3792ec989669b89f7dd03f92ef457e4159609","modified":1644489495536},{"_id":"public/archives/2019/03/index.html","hash":"b0a9a53e92b54381e839e03cac1d25edc9fe90e3","modified":1644489495536},{"_id":"public/archives/2020/index.html","hash":"8f54e21964d8f72fb5bee767653aacac976aa614","modified":1644489495536},{"_id":"public/archives/2020/page/2/index.html","hash":"2c7b26334f534ea3fba9f5b72c24bb0317714e2d","modified":1644489495536},{"_id":"public/archives/2020/04/index.html","hash":"41370be765ed8c98cdf839ba61b47a83a7944618","modified":1644489495536},{"_id":"public/archives/2020/06/index.html","hash":"7e1b5fad708b0fd45f21567544d38b590c83b3ef","modified":1644489495536},{"_id":"public/archives/2020/07/index.html","hash":"90df1c62082f64f9bc889fdc63ba594bb569d36a","modified":1644489495536},{"_id":"public/archives/2020/11/index.html","hash":"25f186f9da943192b6a74975b3f46f229b960dba","modified":1644489495536},{"_id":"public/archives/2021/index.html","hash":"d7310600516c49482a16b9e2584a91e6d2cc9ac6","modified":1644489495536},{"_id":"public/archives/2021/03/index.html","hash":"597b762e70ace99c6c38b6f4153c5984d4eef4f4","modified":1644489495536},{"_id":"public/archives/2021/04/index.html","hash":"bb541dd16bfabde5ee3722f77ff693702bd97915","modified":1644489495537},{"_id":"public/archives/2022/index.html","hash":"e79adf144b35d4e0b59646c7eaeaa175224deae0","modified":1644489495537},{"_id":"public/archives/2022/02/index.html","hash":"d532c051b2fb5864f00fd8a3fde110a452ae45dd","modified":1644489495537},{"_id":"public/categories/javascript/index.html","hash":"66b691276ba6194b27a97ca538d72db32e879183","modified":1644489495537},{"_id":"public/categories/javascript/page/2/index.html","hash":"ba6ab02f06146a738c5c884c916bbd737e8f3c29","modified":1644489495537},{"_id":"public/categories/ThreeJs/index.html","hash":"f07d8463afc8f4446aa05176564c7cc16a81aef2","modified":1644489495537},{"_id":"public/categories/javascript/react/index.html","hash":"d4ba7718571b1eb61fc601a0c72a1e2616ef3234","modified":1644489495537},{"_id":"public/categories/javascript/vue/index.html","hash":"f9d1dd9480338702f648e7be341f7d48c340c301","modified":1644489495537},{"_id":"public/categories/css/index.html","hash":"f8e897af5b9ce10a53246d22cb1dde0b78c59197","modified":1644489495537},{"_id":"public/categories/less/index.html","hash":"5eb35f04c0b92b1c95a6e5d3fbeefa76f6db7f2e","modified":1644489495537},{"_id":"public/index.html","hash":"394c4f7827e0f76eb2ca386ae12ef0d8a3bf6d57","modified":1644489495537},{"_id":"public/page/2/index.html","hash":"833fb51ad8eaed52b67cdc597be177e5adcad043","modified":1644489495537},{"_id":"public/tags/javascript/index.html","hash":"a5655933545467f1ce69e4d1a089fa64f32465fc","modified":1644489495537},{"_id":"public/tags/blob/index.html","hash":"78e86c71a6b916785f9fbdd08828c568f2e1224b","modified":1644489495537},{"_id":"public/tags/Vue/index.html","hash":"cc6cfc776957b467fa41350c6cbfd089e19d8e60","modified":1644489495537},{"_id":"public/tags/i18n/index.html","hash":"01b0693c48675f006f6a0486cbd6a64291921c95","modified":1644489495537},{"_id":"public/tags/nuxt/index.html","hash":"7091c7623da1fc9e16fe01f9bea55fa7e82d00fc","modified":1644489495537},{"_id":"public/tags/ThreeJs/index.html","hash":"88bb2da718b91f1e87fae3d1e19f00225d650f0b","modified":1644489495537},{"_id":"public/tags/JavaScript/index.html","hash":"525ad12968cd301c067b944059b3482b69331712","modified":1644489495538},{"_id":"public/tags/Vue-Router/index.html","hash":"12539a594eb126446d75cc066d397d135e69b56d","modified":1644489495538},{"_id":"public/tags/react/index.html","hash":"265c792dbce395a5736811972e19b4cf9a7f3cc7","modified":1644489495538},{"_id":"public/tags/vue/index.html","hash":"80000b7816ecf2f0459f3ce48619e0a60f756ed7","modified":1644489495538},{"_id":"public/tags/前端/index.html","hash":"5e14713d8ea369a28cd2a8dd50ce1b06819926c1","modified":1644489495538},{"_id":"public/tags/css技巧/index.html","hash":"da6e515d20e6500f0300c2419e54516e3cbdc4c6","modified":1644489495538},{"_id":"public/tags/css/index.html","hash":"b94fb1128717fbe6d3184f39990af6bddc804e18","modified":1644489495538},{"_id":"public/tags/summary/index.html","hash":"57686419dd5b407d7fb63c40df31d8a760d6e65e","modified":1644489495538},{"_id":"public/tags/algorithm/index.html","hash":"05687c32109825a416961c3a2a5bb0e13fa346e2","modified":1644489495538},{"_id":"public/tags/rollup/index.html","hash":"9b5aa044d3c4eec080f654aae064a345ce457d7a","modified":1644489495538},{"_id":"public/tags/npm/index.html","hash":"53087520ccd82c3c5b299cac76f385e12b5803fd","modified":1644489495538},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1644489495547},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1644489495547},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1644489495547},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1644489495547},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1644489495547},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1644489495547},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1644489495547},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1644489495547},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1644489495547},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1644489495547},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1644489495547},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1644489495547},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1644489495547},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1644489495547},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1644489495547},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1644489495547},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1644489495547},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1644489495548},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1644489495548},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1644489495548},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1644489495548},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1644489495548},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1644489495548},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1644489495548},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1644489495548},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1644489495548},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1644489495548},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1644489495548},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1644489495548},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1644489495548},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1644489495548},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1644489495548},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1644489495548},{"_id":"public/uploads/wechat-qcode.png","hash":"c46829642e2877ed7914a6134aec8dca51e93185","modified":1644489496112},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1644489496117},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1644489496130},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1644489496156},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1644489496156},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1644489496156},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1644489496156},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1644489496156},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1644489496156},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1644489496156},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1644489496156},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1644489496156},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1644489496156},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1644489496156},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1644489496156},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1644489496156},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1644489496156},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1644489496156},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1644489496156},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1644489496156},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1644489496156},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1644489496157},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1644489496157},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1644489496157},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1644489496157},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1644489496157},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1644489496157},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1644489496157},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1644489496157},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1644489496157},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1644489496157},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1644489496157},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1644489496157},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1644489496157},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1644489496157},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1644489496157},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1644489496157},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1644489496157},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1644489496157},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1644489496157},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1644489496157},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1644489496157},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1644489496157},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1644489496158},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1644489496158},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1644489496158},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1644489496158},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1644489496158},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1644489496159},{"_id":"public/404.html","hash":"b131af476632738a943170d5949063f8278ac5c1","modified":1644489496159},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1644489496159},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1644489496160},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1644489496160},{"_id":"public/css/main.css","hash":"e02dd974b2df23895a167f5f5a0a7f261831b8ec","modified":1644489496160},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1644489496160},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1644489496160},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1644489496160},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1644489496160},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1644489496160},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1644489496160},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1644489496160},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1644489496160},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1644489496160},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1644489496160},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1644489496160},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1644489496160},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1644489496160},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1644489496160},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1644489496160},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1644489496160},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1644489496160},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1644489496161},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1644489496161},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1644489496161},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1644489496161},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1644489496162},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1644489496162},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1644489496322}],"Category":[{"name":"javascript","_id":"ckzgul15n0002mmsf9ck5hkb2"},{"name":"ThreeJs","_id":"ckzgul1al000ummsf1nll1dkm"},{"name":"react","parent":"ckzgul15n0002mmsf9ck5hkb2","_id":"ckzgul1ap0014mmsfphhld2lv"},{"name":"vue","parent":"ckzgul15n0002mmsf9ck5hkb2","_id":"ckzgul1ar001cmmsfds6i1ko6"},{"name":"css","_id":"ckzgul1au001immsfih00kuk7"},{"name":"less","_id":"ckzgul1aw001qmmsf22qsn7br"}],"Data":[],"Page":[{"title":"","date":"2019-02-16T02:28:11.000Z","type":"categories","comments":0,"_content":"\n","source":"categories/index.md","raw":"---\ntitle: \ndate: 2019-02-16 10:28:11\ntype: \"categories\"\ncomments: false\n---\n\n","updated":"2019-02-16T03:27:35.297Z","path":"categories/index.html","layout":"page","_id":"ckzgul1a7000mmmsfk3hbhwp0","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"","date":"2019-02-16T02:27:21.000Z","type":"tags","comments":0,"_content":"\n","source":"tags/index.md","raw":"---\ntitle:  \ndate: 2019-02-16 10:27:21\ntype: \"tags\"\ncomments: false\n---\n\n","updated":"2019-02-16T03:27:43.853Z","path":"tags/index.html","layout":"page","_id":"ckzgul1a9000ommsfaahyl5r6","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"JS new 运算符的使用和原理剖析","date":"2020-11-04T15:48:23.000Z","_content":"\n# JS new 运算符的使用和原理剖析\n\n\n\n> new 运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象类型之一\n\n\n\n<!-- more -->\n\n### new的基本使用\n\n\n\n```javascript\nlet fn = function(hobby) {\n\t this.name = 'lili'\n   this.age = 22\n   console.log('hobby is:', hobby)\n}\n\nfn.prototype.say = function() {\n  console.log('hello')\n}\n\nlet person = new fn('guitar')\t// hobby is: guitar\n\nconsole.log(person.name);\t// lili\nconsole.log(person.age);\t// 22\n\nperson.say()\t// hello\n```\n\n\n\n\n\n#### 当构造函数 `fn` 有返回值时\n\n\n\n```javascript\nlet fn = function() {\n\t this.name = 'lili'\n   this.age = 22\n   return {\n     sex: 'man',\n     city: 'cq'\n   }\n}\n\nlet person = new fn()\t\n\nconsole.log(person.name);\t// undefined\nconsole.log(person.age);\t// undefined\nconsole.log(person.sex);\t// man\nconsole.log(person.city);\t// cq\n```\n\n\n\n\n\n#### 当构造函数 `fn` 返回值**不是对象**或是null时\n\n\n\n```javascript\nlet fn = function() {\n\t this.name = 'lili'\n   this.age = 22\n   return 'test'\n}\n\nlet person = new fn()\n\nconsole.log(person.name);\t// lili\nconsole.log(person.age);\t// 22\n\n// 返回null\nlet fn = function() {\n\t this.name = 'lili'\n   this.age = 22\n   return null\n}\n\nlet person = new fn()\n\nconsole.log(person.name);\t// lili\nconsole.log(person.age);\t// 22\n```\n\n\n\n> 从以上 new 的使用中我们可以总结如下几点：\n>\n> 1. new出的实例将会继承构造函数的属性和构造函数原型上的属性\n> 2. 将会返回一个新对象\n> 3. 如果构造函数返回新的对象，那么在实例中只能访问返回的新对象\n> 4. 如果构造函数返回基本类型或者null，那么实例可以访问构造函数中的属性\n\n\n\n针对如上几点，我们开始实现 new\n\n\n\n### new 的实现\n\n\n\n```javascript\nlet fn = function(hobby) {\n\t this.name = 'lili'\n   this.age = 22\n   console.log('hobby is:', hobby)\n}\n\nfn.prototype.say = function() {\n  console.log('hello')\n}\n\nlet objFactory = function() {\n  let obj = new Object()\n  Constructor = [].shift.call(arguments);\t// 取出第一个参数(构造函数)\n  obj.__proto__ = Constructor.prototype;\t// 将构造函数原型指向实例对象原型\n  let res = Constructor.apply(obj, arguments)\t// 将构造函数 this 指向实例对象，以便实例对象可以访问构造函数自身的属性\n  return typeof res === 'object' ? res || obj : obj // 如果构造函数返回的是对象(非null), 则返回该对象，否则返回obj\n}\n\n\nlet newFn = objFactory(fn, 'guitar') // hobby is: guitar\nconsole.log(newFn.name); // lili\nconsole.log(newFn.age); // 22\nnewFn.say(); // hello\n\n```\n\n\n\n","source":"_posts/JS new 运算符的使用和原理剖析.md","raw":"---\ntitle: JS new 运算符的使用和原理剖析\ndate: 2020-11-04 23:48:23\ncategories:\n - javascript\ntags:\n - javascript\n---\n\n# JS new 运算符的使用和原理剖析\n\n\n\n> new 运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象类型之一\n\n\n\n<!-- more -->\n\n### new的基本使用\n\n\n\n```javascript\nlet fn = function(hobby) {\n\t this.name = 'lili'\n   this.age = 22\n   console.log('hobby is:', hobby)\n}\n\nfn.prototype.say = function() {\n  console.log('hello')\n}\n\nlet person = new fn('guitar')\t// hobby is: guitar\n\nconsole.log(person.name);\t// lili\nconsole.log(person.age);\t// 22\n\nperson.say()\t// hello\n```\n\n\n\n\n\n#### 当构造函数 `fn` 有返回值时\n\n\n\n```javascript\nlet fn = function() {\n\t this.name = 'lili'\n   this.age = 22\n   return {\n     sex: 'man',\n     city: 'cq'\n   }\n}\n\nlet person = new fn()\t\n\nconsole.log(person.name);\t// undefined\nconsole.log(person.age);\t// undefined\nconsole.log(person.sex);\t// man\nconsole.log(person.city);\t// cq\n```\n\n\n\n\n\n#### 当构造函数 `fn` 返回值**不是对象**或是null时\n\n\n\n```javascript\nlet fn = function() {\n\t this.name = 'lili'\n   this.age = 22\n   return 'test'\n}\n\nlet person = new fn()\n\nconsole.log(person.name);\t// lili\nconsole.log(person.age);\t// 22\n\n// 返回null\nlet fn = function() {\n\t this.name = 'lili'\n   this.age = 22\n   return null\n}\n\nlet person = new fn()\n\nconsole.log(person.name);\t// lili\nconsole.log(person.age);\t// 22\n```\n\n\n\n> 从以上 new 的使用中我们可以总结如下几点：\n>\n> 1. new出的实例将会继承构造函数的属性和构造函数原型上的属性\n> 2. 将会返回一个新对象\n> 3. 如果构造函数返回新的对象，那么在实例中只能访问返回的新对象\n> 4. 如果构造函数返回基本类型或者null，那么实例可以访问构造函数中的属性\n\n\n\n针对如上几点，我们开始实现 new\n\n\n\n### new 的实现\n\n\n\n```javascript\nlet fn = function(hobby) {\n\t this.name = 'lili'\n   this.age = 22\n   console.log('hobby is:', hobby)\n}\n\nfn.prototype.say = function() {\n  console.log('hello')\n}\n\nlet objFactory = function() {\n  let obj = new Object()\n  Constructor = [].shift.call(arguments);\t// 取出第一个参数(构造函数)\n  obj.__proto__ = Constructor.prototype;\t// 将构造函数原型指向实例对象原型\n  let res = Constructor.apply(obj, arguments)\t// 将构造函数 this 指向实例对象，以便实例对象可以访问构造函数自身的属性\n  return typeof res === 'object' ? res || obj : obj // 如果构造函数返回的是对象(非null), 则返回该对象，否则返回obj\n}\n\n\nlet newFn = objFactory(fn, 'guitar') // hobby is: guitar\nconsole.log(newFn.name); // lili\nconsole.log(newFn.age); // 22\nnewFn.say(); // hello\n\n```\n\n\n\n","slug":"JS new 运算符的使用和原理剖析","published":1,"updated":"2021-03-30T06:56:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzgul15c0000mmsfq7quaqhh","content":"<h1 id=\"JS-new-运算符的使用和原理剖析\"><a href=\"#JS-new-运算符的使用和原理剖析\" class=\"headerlink\" title=\"JS new 运算符的使用和原理剖析\"></a>JS new 运算符的使用和原理剖析</h1><blockquote>\n<p>new 运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象类型之一</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"new的基本使用\"><a href=\"#new的基本使用\" class=\"headerlink\" title=\"new的基本使用\"></a>new的基本使用</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">hobby</span>) </span>&#123;</span><br><span class=\"line\">\t <span class=\"keyword\">this</span>.name = <span class=\"string\">'lili'</span></span><br><span class=\"line\">   <span class=\"keyword\">this</span>.age = <span class=\"number\">22</span></span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">'hobby is:'</span>, hobby)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn.prototype.say = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> person = <span class=\"keyword\">new</span> fn(<span class=\"string\">'guitar'</span>)\t<span class=\"comment\">// hobby is: guitar</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.name);\t<span class=\"comment\">// lili</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.age);\t<span class=\"comment\">// 22</span></span><br><span class=\"line\"></span><br><span class=\"line\">person.say()\t<span class=\"comment\">// hello</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"当构造函数-fn-有返回值时\"><a href=\"#当构造函数-fn-有返回值时\" class=\"headerlink\" title=\"当构造函数 fn 有返回值时\"></a>当构造函数 <code>fn</code> 有返回值时</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t <span class=\"keyword\">this</span>.name = <span class=\"string\">'lili'</span></span><br><span class=\"line\">   <span class=\"keyword\">this</span>.age = <span class=\"number\">22</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">     sex: <span class=\"string\">'man'</span>,</span><br><span class=\"line\">     city: <span class=\"string\">'cq'</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> person = <span class=\"keyword\">new</span> fn()\t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.name);\t<span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.age);\t<span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.sex);\t<span class=\"comment\">// man</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.city);\t<span class=\"comment\">// cq</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"当构造函数-fn-返回值不是对象或是null时\"><a href=\"#当构造函数-fn-返回值不是对象或是null时\" class=\"headerlink\" title=\"当构造函数 fn 返回值不是对象或是null时\"></a>当构造函数 <code>fn</code> 返回值<strong>不是对象</strong>或是null时</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t <span class=\"keyword\">this</span>.name = <span class=\"string\">'lili'</span></span><br><span class=\"line\">   <span class=\"keyword\">this</span>.age = <span class=\"number\">22</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"string\">'test'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> person = <span class=\"keyword\">new</span> fn()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.name);\t<span class=\"comment\">// lili</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.age);\t<span class=\"comment\">// 22</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回null</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t <span class=\"keyword\">this</span>.name = <span class=\"string\">'lili'</span></span><br><span class=\"line\">   <span class=\"keyword\">this</span>.age = <span class=\"number\">22</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> person = <span class=\"keyword\">new</span> fn()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.name);\t<span class=\"comment\">// lili</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.age);\t<span class=\"comment\">// 22</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>从以上 new 的使用中我们可以总结如下几点：</p>\n<ol>\n<li>new出的实例将会继承构造函数的属性和构造函数原型上的属性</li>\n<li>将会返回一个新对象</li>\n<li>如果构造函数返回新的对象，那么在实例中只能访问返回的新对象</li>\n<li>如果构造函数返回基本类型或者null，那么实例可以访问构造函数中的属性</li>\n</ol>\n</blockquote>\n<p>针对如上几点，我们开始实现 new</p>\n<h3 id=\"new-的实现\"><a href=\"#new-的实现\" class=\"headerlink\" title=\"new 的实现\"></a>new 的实现</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">hobby</span>) </span>&#123;</span><br><span class=\"line\">\t <span class=\"keyword\">this</span>.name = <span class=\"string\">'lili'</span></span><br><span class=\"line\">   <span class=\"keyword\">this</span>.age = <span class=\"number\">22</span></span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">'hobby is:'</span>, hobby)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn.prototype.say = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> objFactory = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>()</span><br><span class=\"line\">  Constructor = [].shift.call(<span class=\"built_in\">arguments</span>);\t<span class=\"comment\">// 取出第一个参数(构造函数)</span></span><br><span class=\"line\">  obj.__proto__ = Constructor.prototype;\t<span class=\"comment\">// 将构造函数原型指向实例对象原型</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = Constructor.apply(obj, <span class=\"built_in\">arguments</span>)\t<span class=\"comment\">// 将构造函数 this 指向实例对象，以便实例对象可以访问构造函数自身的属性</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> res === <span class=\"string\">'object'</span> ? res || obj : obj <span class=\"comment\">// 如果构造函数返回的是对象(非null), 则返回该对象，否则返回obj</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> newFn = objFactory(fn, <span class=\"string\">'guitar'</span>) <span class=\"comment\">// hobby is: guitar</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newFn.name); <span class=\"comment\">// lili</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newFn.age); <span class=\"comment\">// 22</span></span><br><span class=\"line\">newFn.say(); <span class=\"comment\">// hello</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"JS-new-运算符的使用和原理剖析\"><a href=\"#JS-new-运算符的使用和原理剖析\" class=\"headerlink\" title=\"JS new 运算符的使用和原理剖析\"></a>JS new 运算符的使用和原理剖析</h1><blockquote>\n<p>new 运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象类型之一</p>\n</blockquote>","more":"<h3 id=\"new的基本使用\"><a href=\"#new的基本使用\" class=\"headerlink\" title=\"new的基本使用\"></a>new的基本使用</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">hobby</span>) </span>&#123;</span><br><span class=\"line\">\t <span class=\"keyword\">this</span>.name = <span class=\"string\">'lili'</span></span><br><span class=\"line\">   <span class=\"keyword\">this</span>.age = <span class=\"number\">22</span></span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">'hobby is:'</span>, hobby)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn.prototype.say = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> person = <span class=\"keyword\">new</span> fn(<span class=\"string\">'guitar'</span>)\t<span class=\"comment\">// hobby is: guitar</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.name);\t<span class=\"comment\">// lili</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.age);\t<span class=\"comment\">// 22</span></span><br><span class=\"line\"></span><br><span class=\"line\">person.say()\t<span class=\"comment\">// hello</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"当构造函数-fn-有返回值时\"><a href=\"#当构造函数-fn-有返回值时\" class=\"headerlink\" title=\"当构造函数 fn 有返回值时\"></a>当构造函数 <code>fn</code> 有返回值时</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t <span class=\"keyword\">this</span>.name = <span class=\"string\">'lili'</span></span><br><span class=\"line\">   <span class=\"keyword\">this</span>.age = <span class=\"number\">22</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">     sex: <span class=\"string\">'man'</span>,</span><br><span class=\"line\">     city: <span class=\"string\">'cq'</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> person = <span class=\"keyword\">new</span> fn()\t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.name);\t<span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.age);\t<span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.sex);\t<span class=\"comment\">// man</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.city);\t<span class=\"comment\">// cq</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"当构造函数-fn-返回值不是对象或是null时\"><a href=\"#当构造函数-fn-返回值不是对象或是null时\" class=\"headerlink\" title=\"当构造函数 fn 返回值不是对象或是null时\"></a>当构造函数 <code>fn</code> 返回值<strong>不是对象</strong>或是null时</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t <span class=\"keyword\">this</span>.name = <span class=\"string\">'lili'</span></span><br><span class=\"line\">   <span class=\"keyword\">this</span>.age = <span class=\"number\">22</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"string\">'test'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> person = <span class=\"keyword\">new</span> fn()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.name);\t<span class=\"comment\">// lili</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.age);\t<span class=\"comment\">// 22</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回null</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t <span class=\"keyword\">this</span>.name = <span class=\"string\">'lili'</span></span><br><span class=\"line\">   <span class=\"keyword\">this</span>.age = <span class=\"number\">22</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> person = <span class=\"keyword\">new</span> fn()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.name);\t<span class=\"comment\">// lili</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.age);\t<span class=\"comment\">// 22</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>从以上 new 的使用中我们可以总结如下几点：</p>\n<ol>\n<li>new出的实例将会继承构造函数的属性和构造函数原型上的属性</li>\n<li>将会返回一个新对象</li>\n<li>如果构造函数返回新的对象，那么在实例中只能访问返回的新对象</li>\n<li>如果构造函数返回基本类型或者null，那么实例可以访问构造函数中的属性</li>\n</ol>\n</blockquote>\n<p>针对如上几点，我们开始实现 new</p>\n<h3 id=\"new-的实现\"><a href=\"#new-的实现\" class=\"headerlink\" title=\"new 的实现\"></a>new 的实现</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">hobby</span>) </span>&#123;</span><br><span class=\"line\">\t <span class=\"keyword\">this</span>.name = <span class=\"string\">'lili'</span></span><br><span class=\"line\">   <span class=\"keyword\">this</span>.age = <span class=\"number\">22</span></span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">'hobby is:'</span>, hobby)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn.prototype.say = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> objFactory = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>()</span><br><span class=\"line\">  Constructor = [].shift.call(<span class=\"built_in\">arguments</span>);\t<span class=\"comment\">// 取出第一个参数(构造函数)</span></span><br><span class=\"line\">  obj.__proto__ = Constructor.prototype;\t<span class=\"comment\">// 将构造函数原型指向实例对象原型</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = Constructor.apply(obj, <span class=\"built_in\">arguments</span>)\t<span class=\"comment\">// 将构造函数 this 指向实例对象，以便实例对象可以访问构造函数自身的属性</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> res === <span class=\"string\">'object'</span> ? res || obj : obj <span class=\"comment\">// 如果构造函数返回的是对象(非null), 则返回该对象，否则返回obj</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> newFn = objFactory(fn, <span class=\"string\">'guitar'</span>) <span class=\"comment\">// hobby is: guitar</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newFn.name); <span class=\"comment\">// lili</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newFn.age); <span class=\"comment\">// 22</span></span><br><span class=\"line\">newFn.say(); <span class=\"comment\">// hello</span></span><br></pre></td></tr></table></figure>"},{"title":"Js 如何实现函数只执行一次","date":"2020-11-04T15:28:23.000Z","_content":"\n# Js 如何实现函数只执行一次\n\n\n\n有时候我们会遇到某个函数在多次执行中只运行一次的情况，那么如何实现呢？ 下面直接上代码\n\n\n\n```javascript\nlet once = function(fn) {\n    let caller = true;\n    return function() {\n        if(caller) {\n            caller = false\n            fn.apply(this, arguments)\n        }\n    }\n    \n}\n```\n\n\n\n通过调用上面的函数\n\n\n\n```javascript\nlet onlyOneFn = once(function() {\n\tconsole.log('once')\n})\n\nfunction runLoopFn() {\n  let i = 100\n  while(i--) {\n    console.log('loop run')\n    onlyOneFn()\n  }\n}\n\nrunLoopFn() // once * 1     loop run * 100\n```\n\n\n\n\n\n上面的执行结果可以看出， 循环执行100次， 打印了100次 loop run， 但是只执行了一次打印 once\n\n通过封装的`once` 函数， 利用闭包我们可以实现函数只执行一次.","source":"_posts/Js 如何实现函数只执行一次.md","raw":"---\ntitle: Js 如何实现函数只执行一次\ndate: 2020-11-04 23:28:23\ncategories:\n - javascript\ntags:\n - javascript\n---\n\n# Js 如何实现函数只执行一次\n\n\n\n有时候我们会遇到某个函数在多次执行中只运行一次的情况，那么如何实现呢？ 下面直接上代码\n\n\n\n```javascript\nlet once = function(fn) {\n    let caller = true;\n    return function() {\n        if(caller) {\n            caller = false\n            fn.apply(this, arguments)\n        }\n    }\n    \n}\n```\n\n\n\n通过调用上面的函数\n\n\n\n```javascript\nlet onlyOneFn = once(function() {\n\tconsole.log('once')\n})\n\nfunction runLoopFn() {\n  let i = 100\n  while(i--) {\n    console.log('loop run')\n    onlyOneFn()\n  }\n}\n\nrunLoopFn() // once * 1     loop run * 100\n```\n\n\n\n\n\n上面的执行结果可以看出， 循环执行100次， 打印了100次 loop run， 但是只执行了一次打印 once\n\n通过封装的`once` 函数， 利用闭包我们可以实现函数只执行一次.","slug":"Js 如何实现函数只执行一次","published":1,"updated":"2020-11-04T15:19:52.077Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzgul15h0001mmsfx78895lz","content":"<h1 id=\"Js-如何实现函数只执行一次\"><a href=\"#Js-如何实现函数只执行一次\" class=\"headerlink\" title=\"Js 如何实现函数只执行一次\"></a>Js 如何实现函数只执行一次</h1><p>有时候我们会遇到某个函数在多次执行中只运行一次的情况，那么如何实现呢？ 下面直接上代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> once = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> caller = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(caller) &#123;</span><br><span class=\"line\">            caller = <span class=\"literal\">false</span></span><br><span class=\"line\">            fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过调用上面的函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> onlyOneFn = once(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'once'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runLoopFn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">100</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(i--) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'loop run'</span>)</span><br><span class=\"line\">    onlyOneFn()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">runLoopFn() <span class=\"comment\">// once * 1     loop run * 100</span></span><br></pre></td></tr></table></figure>\n<p>上面的执行结果可以看出， 循环执行100次， 打印了100次 loop run， 但是只执行了一次打印 once</p>\n<p>通过封装的<code>once</code> 函数， 利用闭包我们可以实现函数只执行一次.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Js-如何实现函数只执行一次\"><a href=\"#Js-如何实现函数只执行一次\" class=\"headerlink\" title=\"Js 如何实现函数只执行一次\"></a>Js 如何实现函数只执行一次</h1><p>有时候我们会遇到某个函数在多次执行中只运行一次的情况，那么如何实现呢？ 下面直接上代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> once = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> caller = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(caller) &#123;</span><br><span class=\"line\">            caller = <span class=\"literal\">false</span></span><br><span class=\"line\">            fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过调用上面的函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> onlyOneFn = once(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'once'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runLoopFn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">100</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(i--) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'loop run'</span>)</span><br><span class=\"line\">    onlyOneFn()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">runLoopFn() <span class=\"comment\">// once * 1     loop run * 100</span></span><br></pre></td></tr></table></figure>\n<p>上面的执行结果可以看出， 循环执行100次， 打印了100次 loop run， 但是只执行了一次打印 once</p>\n<p>通过封装的<code>once</code> 函数， 利用闭包我们可以实现函数只执行一次.</p>\n"},{"title":"二进制流转图片","date":"2020-04-07T15:36:23.000Z","_content":"\n**二进制流(ArrayBuffer)转为图片**\n\n1. 首先通过ajax或者ws获取到传来的二进制流数据\n\n\n2. responseType 需要设置为arraybuffer。\n\n3. 然后我们拿到所需的二进制数据， 通过console打印发现是一个ArrayBuffer，接着我们对其进行如下处理，转为base64:\n\n   <!-- more -->\n\n```javascript\n  function arrayBufferToBase64(buffer) {\n\n      var binary = '';\n\n      var bytes = new Uint8Array(buffer);\n\n      var len = bytes.byteLength;\n\n      for (var i = 0; i < len; i++) {\n\n          binary += String.fromCharCode(bytes[i]);\n\n      }\n\n      return window.btoa(binary);\n\n  }\n```\n\n\n\n4. 显示图片。   接着我们把收到的二进制数据通过上面的函数转为url:\n\n``` javascript\nlet url= arrayBufferToBase64(response);\n```\n\n​\t\t\t然后将生成的url放到img标签的src属性中：\n\n```html\ndocument.getElementById('img').src='data:image/jpeg;base64,'+url;\n```\n\n​\t\t\t大功告成～","source":"_posts/blob2pic.md","raw":"---\ntitle: 二进制流转图片\ndate: 2020-04-07 23:36:23\ncategories:\n - javascript\ntags:\n - blob\n---\n\n**二进制流(ArrayBuffer)转为图片**\n\n1. 首先通过ajax或者ws获取到传来的二进制流数据\n\n\n2. responseType 需要设置为arraybuffer。\n\n3. 然后我们拿到所需的二进制数据， 通过console打印发现是一个ArrayBuffer，接着我们对其进行如下处理，转为base64:\n\n   <!-- more -->\n\n```javascript\n  function arrayBufferToBase64(buffer) {\n\n      var binary = '';\n\n      var bytes = new Uint8Array(buffer);\n\n      var len = bytes.byteLength;\n\n      for (var i = 0; i < len; i++) {\n\n          binary += String.fromCharCode(bytes[i]);\n\n      }\n\n      return window.btoa(binary);\n\n  }\n```\n\n\n\n4. 显示图片。   接着我们把收到的二进制数据通过上面的函数转为url:\n\n``` javascript\nlet url= arrayBufferToBase64(response);\n```\n\n​\t\t\t然后将生成的url放到img标签的src属性中：\n\n```html\ndocument.getElementById('img').src='data:image/jpeg;base64,'+url;\n```\n\n​\t\t\t大功告成～","slug":"blob2pic","published":1,"updated":"2020-04-07T15:53:42.285Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzgul15p0004mmsf0dm0ewzb","content":"<p><strong>二进制流(ArrayBuffer)转为图片</strong></p>\n<ol>\n<li>首先通过ajax或者ws获取到传来的二进制流数据</li>\n</ol>\n<ol start=\"2\">\n<li><p>responseType 需要设置为arraybuffer。</p>\n</li>\n<li><p>然后我们拿到所需的二进制数据， 通过console打印发现是一个ArrayBuffer，接着我们对其进行如下处理，转为base64:</p>\n<a id=\"more\"></a>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">arrayBufferToBase64</span>(<span class=\"params\">buffer</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> binary = <span class=\"string\">''</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> bytes = <span class=\"keyword\">new</span> <span class=\"built_in\">Uint8Array</span>(buffer);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = bytes.byteLength;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        binary += <span class=\"built_in\">String</span>.fromCharCode(bytes[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">window</span>.btoa(binary);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>显示图片。   接着我们把收到的二进制数据通过上面的函数转为url:</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> url= arrayBufferToBase64(response);</span><br></pre></td></tr></table></figure>\n<p>​            然后将生成的url放到img标签的src属性中：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.getElementById('img').src='data:image/jpeg;base64,'+url;</span><br></pre></td></tr></table></figure>\n<p>​            大功告成～</p>\n","site":{"data":{}},"excerpt":"<p><strong>二进制流(ArrayBuffer)转为图片</strong></p>\n<ol>\n<li>首先通过ajax或者ws获取到传来的二进制流数据</li>\n</ol>\n<ol start=\"2\">\n<li><p>responseType 需要设置为arraybuffer。</p>\n</li>\n<li><p>然后我们拿到所需的二进制数据， 通过console打印发现是一个ArrayBuffer，接着我们对其进行如下处理，转为base64:</p>","more":"</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">arrayBufferToBase64</span>(<span class=\"params\">buffer</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> binary = <span class=\"string\">''</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> bytes = <span class=\"keyword\">new</span> <span class=\"built_in\">Uint8Array</span>(buffer);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = bytes.byteLength;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        binary += <span class=\"built_in\">String</span>.fromCharCode(bytes[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">window</span>.btoa(binary);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>显示图片。   接着我们把收到的二进制数据通过上面的函数转为url:</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> url= arrayBufferToBase64(response);</span><br></pre></td></tr></table></figure>\n<p>​            然后将生成的url放到img标签的src属性中：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.getElementById('img').src='data:image/jpeg;base64,'+url;</span><br></pre></td></tr></table></figure>\n<p>​            大功告成～</p>"},{"title":"eslint,prettier,stylelint,commitlint配置","date":"2022-02-10T09:03:22.000Z","_content":"\n\n\n# 代码、项目规范，配置 eslint、prettier、stylelint、commitlint\n\n\n\n> 为了规范项目代码，统一代码风格，同时提升代码的提交规范，使用 **eslint** 进行代码规范化的检测和自动修改；使用  **prettier** 统一代码风格和自动格式化；使用  **stylelint** 统一 css 风格和自动格式化；使用 **commitlint**、**lint-staged**、**husky** 进行提交检查和提交自动格式化。 同时为了消除不同使用者 vscode 的差异，提供了 .vscode -- setting.json 的配置.\n\n\n\n## Eslint\\prettier\\vscode 配置\n\n1. .vscode 配置:\n\n```json\n{\n  \"files.associations\": {\n    \"*.vue\": \"vue\"\n  },\n  \"editor.formatOnSave\": false, // prettier保存格式化\n  \"[javascript]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n  },\n  \"[json]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n  },\n  \"[html]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n  },\n  \"[jsonc]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n  },\n  \"[vue]\": {\n    \"editor.defaultFormatter\": \"octref.vetur\"\n  },\n  // vetur 配置\n  \"vetur.validation.template\": false,\n  \"vetur.format.defaultFormatter.html\": \"prettyhtml\",\n  \"vetur.format.defaultFormatter.css\": \"prettier\",\n  \"vetur.format.defaultFormatter.postcss\": \"prettier\",\n  \"vetur.format.defaultFormatter.scss\": \"prettier\",\n  \"vetur.format.defaultFormatter.less\": \"prettier\",\n  \"vetur.format.defaultFormatter.stylus\": \"stylus-supremacy\",\n  \"vetur.format.defaultFormatter.sass\": \"sass-formatter\",\n  \"vetur.format.defaultFormatter.js\": \"prettier-eslint\",\n  \"vetur.format.defaultFormatter.ts\": \"vscode-typescript\",\n  \"vetur.format.options.tabSize\": 2,\n  \"vetur.format.defaultFormatterOptions\": {\n   // \"js-beautify-html\": {\n   //   \"wrap_attributes\": \"force-expand-multiline\"\n   // },\n    \"prettyhtml\": {\n      \"printWidth\": 150,\n      \"singleQuote\": false,\n      \"wrapAttributes\": true,\n      \"sortAttributes\": false\n    },\n    \"prettier\": {\n      \"semi\": true,\n      \"singleQuote\": true\n    }\n  },\n  \"prettier.vueIndentScriptAndStyle\": true,\n  // eslint扩展设置\n  \"editor.codeActionsOnSave\": {\n    \"source.fixAll.eslint\": true\n  },\n  \"eslint.options\": {\n    \"extensions\": [\".js\", \".vue\"]\n  },\n  \"eslint.validate\": [\"javascript\", \"javascriptreact\", \"html\", \"typescript\", \"typescriptreact\", \"vue\"]\n}\n\n\n```\n\n2. 安装以下npm包\n\n```shell\nnpm install --save-dev eslint@7.28.x prettier eslint-config-prettier eslint-plugin-prettier eslint-formatter-pretty\n```\n\n> Tips: \n>\n> eslant 要求版本7.28以上，eslint-config-prettier eslint-plugin-prettier用于解决prettier和eslint规则的冲突.\n>\n> eslint-formatter-pretty （用于命令行美化）\n\n\n\n3. .eslintrc 配置如下\n\n```json\n{\n  root: true,\n  parserOptions: {\n    parser: 'babel-eslint',\n    sourceType: 'module',\n    ecmaVersion: 2020,\n  },\n  env: {\n    browser: true,\n    node: true,\n    es6: true,\n  },\n  extends: [\n    'plugin:vue/recommended',\n    'eslint:recommended',\n    'plugin:prettier/recommended', // 解决prettier和eslint的冲突\n  ]\n} \n```\n\n> prettier和eslint存在部分冲突的规则， 通过 eslint-config-prettier eslint-plugin-prettier 已经 能解决大部分冲突，剩下的比如  \"singleQuote\"、\"semi\" 手动配置 eslint 就能解决\n>\n> 配置的原则就是 eslint 负责代码检查和自动修复，prettier 负责自动格式化 \n\n\n\n## stylelint\n\n1. Npm 安装如下包\n\n```json\n{\n\t\t\"stylelint\": \"^14.3.0\",\n    \"stylelint-config-prettier\": \"^9.0.3\",\n    \"stylelint-config-recess-order\": \"^3.0.0\",\n    \"stylelint-config-recommended-vue\": \"^1.1.0\",\n    \"stylelint-config-standard\": \"^24.0.0\",\n    \"stylelint-config-standard-scss\": \"^3.0.0\",\n    \"stylelint-scss\": \"^4.1.0\",\n    \"stylelint-webpack-plugin\": \"^2.3.2\",\n}\n```\n\n2. 新建stylelint.config.js 文件并配置如下:\n\n```js\nmodule.exports = {\n  defaultSeverity: 'warning',\n  extends: ['stylelint-config-standard-scss', 'stylelint-config-recommended-vue/scss', 'stylelint-config-prettier', 'stylelint-config-recess-order'],\n  rules: {\n    'selector-class-pattern': [\n      // 命名规范 - kebab-case\n      '^([a-z][a-z0-9]*)(-+[a-z0-9]+)*$',\n      {\n        message: 'Expected class selector to be kebab-case',\n      },\n    ],\n    'rule-empty-line-before': null,\n    'declaration-block-no-duplicate-properties': true, // 禁止声明重复属性\n    'no-descending-specificity': true, // 禁止在具有较高优先级的选择器后出现被其覆盖的较低优先级的选择器。\n    // 最多允许嵌套20层，去掉默认的最多2层\n    'max-nesting-depth': 20,\n    // 颜色值要小写\n    'color-hex-case': 'lower',\n    // 颜色值能短则短\n    'color-hex-length': 'short',\n  },\n  ignoreFiles: ['**/*.js', '**/*.jsx', '**/*.tsx', '**/*.ts'],\n};\n\n```\n\n3. webpack StyleLintPlugin 配置如下：\n\n​\t\t\n\n```js\nnew StyleLintPlugin({\n        files: ['src/*.(s(c|a)ss|css|less|vue)'],\n        extensions: ['ccs', 'scss', 'sass', 'less', 'vue', 'html'],\n        fix: true,\n        cache: false,\n        emitErrors: true,\n        failOnError: false,\n      }),\n```\n\n\n\n\n\n4. vscode 配置如下\n\n```json\n{\n\"stylelint.validate\": [\"vue\", \"less\", \"css\", \"html\", \"scss\", \"sass\"],\n  \"editor.codeActionsOnSave\": {\n    \"source.fixAll.stylelint\": true\n  },\n}\n\n```\n\n## commitlint husky lint-staged\n\n1. > npm install --save-dev @commitlint/config-conventional @commitlint/cli  husky lint-staged\n\n   \n\n2. commitlint.config.js 配置如下:\n\n```js\n/**\n * init: 项目初始化\n * feat：新功能\n * fix：修补某功能的bug\n * refactor：重构某个功能\n * perf: 优化构建工具或运行时性能\n * style：仅样式改动\n * docs：仅文档新增/改动\n * chore：构建过程或辅助工具的变动\n * ci: ci配置相关，docker等配置文件修改\n */\nmodule.exports = {\n  extends: ['@commitlint/config-conventional'],\n  rules: {\n    'type-enum': [2, 'always', ['init', 'feat', 'fix', 'refactor', 'perf', 'style', 'docs', 'chore', 'ci']],\n    'type-case': [0],\n    'type-empty': [0],\n    'scope-empty': [0],\n    'scope-case': [0],\n    'subject-full-stop': [0, 'never'],\n    'subject-case': [0, 'never'],\n    'header-max-length': [0, 'always', 72],\n  },\n};\n\n```\n\n3. husky lint-staged\n\n> npm install husky lint-staged prettier --save-dev\n>\n> npx husky install  (启用)\n>\n> \"prepare\": \"husky install\" 【install后自动启用，这个配置在package.json中，否则下次新拉代码还需要手动启用】\n>\n> npx husky add .husky/pre-commit \"npm run lint-staged\" 【创建一个hook，执行完根目录回生成一个.husky目录】\n\n​\t\n\n4. husky 和 lint-staged 配置如下\n\n```json\n\"husky\": {\n    \"hooks\": {\n      \"pre-commit\": \"npm run lint-staged\"\n    }\n  },\n  \"lint-staged\": {\n    \"**/*.vue\": [\n      \"npm run lint:fix\",\n      \"npm run lint:style:fix\"\n    ],\n    \"**/*.{js,jsx,ts,tsx}\": [\n      \"npm run lint:fix\"\n    ],\n    \"**/*.{htm,html,css,sss,less,scss,sass}\": [\n      \"npm run lint:style:fix\",\n      \"git add\"\n    ]\n  }\n```\n\n## npm 脚本部分配置如下:\n\n```json\n{\n   \"lint\": \"eslint --ext .js,.vue src --ignore-path .gitignore .\",\n    \"lint:fix\": \"eslint --fix --ext .js,.vue --format=pretty ./src\",\n    \"lint:prettier\": \"prettier --check \\\"**/*\\\" --end-of-line auto\",\n    \"lint:style\": \"stylelint src/**/*.{vue,css,sass,scss,less} --allow-empty-input\",\n    \"lint:style:fix\": \"stylelint src/**/*.{vue,css,sass,scss,less} --fix\",\n    \"lint-staged\": \"lint-staged\",\n    \"prepare\": \"husky install\",\n}\n```\n\n## 用到的部分依赖及版本如下： \n\n```\n{\n\t\"devDependencies\": {\n\t\t\"@commitlint/cli\": \"^16.1.0\",\n    \"@commitlint/config-conventional\": \"^16.0.0\",\n     \"eslint\": \"^7.29.0\",\n    \"eslint-config-prettier\": \"^8.3.0\",\n    \"eslint-formatter-pretty\": \"^4.1.0\",\n    \"eslint-plugin-prettier\": \"^4.0.0\",\n    \"eslint-plugin-vue\": \"6.2.2\",\n    \"husky\": \"^7.0.4\",\n    \"lint-staged\": \"^12.3.2\",\n    \"postcss\": \"^8.4.5\",\n    \"postcss-html\": \"^1.3.0\",\n    \"postcss-scss\": \"^4.0.3\",\n    \"prettier\": \"2.5.1\",\n    \"stylelint\": \"^14.3.0\",\n    \"stylelint-config-prettier\": \"^9.0.3\",\n    \"stylelint-config-recess-order\": \"^3.0.0\",\n    \"stylelint-config-recommended-vue\": \"^1.1.0\",\n    \"stylelint-config-standard\": \"^24.0.0\",\n    \"stylelint-config-standard-scss\": \"^3.0.0\",\n    \"stylelint-scss\": \"^4.1.0\",\n    \"stylelint-webpack-plugin\": \"^2.3.2\",\n\t}\n}\n```\n\n","source":"_posts/eslint-prettier-stylelint-commitlint配置.md","raw":"---\ntitle: 'eslint,prettier,stylelint,commitlint配置'\ndate: 2022-02-10 17:03:22\ntags:\n  - Vue\n---\n\n\n\n# 代码、项目规范，配置 eslint、prettier、stylelint、commitlint\n\n\n\n> 为了规范项目代码，统一代码风格，同时提升代码的提交规范，使用 **eslint** 进行代码规范化的检测和自动修改；使用  **prettier** 统一代码风格和自动格式化；使用  **stylelint** 统一 css 风格和自动格式化；使用 **commitlint**、**lint-staged**、**husky** 进行提交检查和提交自动格式化。 同时为了消除不同使用者 vscode 的差异，提供了 .vscode -- setting.json 的配置.\n\n\n\n## Eslint\\prettier\\vscode 配置\n\n1. .vscode 配置:\n\n```json\n{\n  \"files.associations\": {\n    \"*.vue\": \"vue\"\n  },\n  \"editor.formatOnSave\": false, // prettier保存格式化\n  \"[javascript]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n  },\n  \"[json]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n  },\n  \"[html]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n  },\n  \"[jsonc]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n  },\n  \"[vue]\": {\n    \"editor.defaultFormatter\": \"octref.vetur\"\n  },\n  // vetur 配置\n  \"vetur.validation.template\": false,\n  \"vetur.format.defaultFormatter.html\": \"prettyhtml\",\n  \"vetur.format.defaultFormatter.css\": \"prettier\",\n  \"vetur.format.defaultFormatter.postcss\": \"prettier\",\n  \"vetur.format.defaultFormatter.scss\": \"prettier\",\n  \"vetur.format.defaultFormatter.less\": \"prettier\",\n  \"vetur.format.defaultFormatter.stylus\": \"stylus-supremacy\",\n  \"vetur.format.defaultFormatter.sass\": \"sass-formatter\",\n  \"vetur.format.defaultFormatter.js\": \"prettier-eslint\",\n  \"vetur.format.defaultFormatter.ts\": \"vscode-typescript\",\n  \"vetur.format.options.tabSize\": 2,\n  \"vetur.format.defaultFormatterOptions\": {\n   // \"js-beautify-html\": {\n   //   \"wrap_attributes\": \"force-expand-multiline\"\n   // },\n    \"prettyhtml\": {\n      \"printWidth\": 150,\n      \"singleQuote\": false,\n      \"wrapAttributes\": true,\n      \"sortAttributes\": false\n    },\n    \"prettier\": {\n      \"semi\": true,\n      \"singleQuote\": true\n    }\n  },\n  \"prettier.vueIndentScriptAndStyle\": true,\n  // eslint扩展设置\n  \"editor.codeActionsOnSave\": {\n    \"source.fixAll.eslint\": true\n  },\n  \"eslint.options\": {\n    \"extensions\": [\".js\", \".vue\"]\n  },\n  \"eslint.validate\": [\"javascript\", \"javascriptreact\", \"html\", \"typescript\", \"typescriptreact\", \"vue\"]\n}\n\n\n```\n\n2. 安装以下npm包\n\n```shell\nnpm install --save-dev eslint@7.28.x prettier eslint-config-prettier eslint-plugin-prettier eslint-formatter-pretty\n```\n\n> Tips: \n>\n> eslant 要求版本7.28以上，eslint-config-prettier eslint-plugin-prettier用于解决prettier和eslint规则的冲突.\n>\n> eslint-formatter-pretty （用于命令行美化）\n\n\n\n3. .eslintrc 配置如下\n\n```json\n{\n  root: true,\n  parserOptions: {\n    parser: 'babel-eslint',\n    sourceType: 'module',\n    ecmaVersion: 2020,\n  },\n  env: {\n    browser: true,\n    node: true,\n    es6: true,\n  },\n  extends: [\n    'plugin:vue/recommended',\n    'eslint:recommended',\n    'plugin:prettier/recommended', // 解决prettier和eslint的冲突\n  ]\n} \n```\n\n> prettier和eslint存在部分冲突的规则， 通过 eslint-config-prettier eslint-plugin-prettier 已经 能解决大部分冲突，剩下的比如  \"singleQuote\"、\"semi\" 手动配置 eslint 就能解决\n>\n> 配置的原则就是 eslint 负责代码检查和自动修复，prettier 负责自动格式化 \n\n\n\n## stylelint\n\n1. Npm 安装如下包\n\n```json\n{\n\t\t\"stylelint\": \"^14.3.0\",\n    \"stylelint-config-prettier\": \"^9.0.3\",\n    \"stylelint-config-recess-order\": \"^3.0.0\",\n    \"stylelint-config-recommended-vue\": \"^1.1.0\",\n    \"stylelint-config-standard\": \"^24.0.0\",\n    \"stylelint-config-standard-scss\": \"^3.0.0\",\n    \"stylelint-scss\": \"^4.1.0\",\n    \"stylelint-webpack-plugin\": \"^2.3.2\",\n}\n```\n\n2. 新建stylelint.config.js 文件并配置如下:\n\n```js\nmodule.exports = {\n  defaultSeverity: 'warning',\n  extends: ['stylelint-config-standard-scss', 'stylelint-config-recommended-vue/scss', 'stylelint-config-prettier', 'stylelint-config-recess-order'],\n  rules: {\n    'selector-class-pattern': [\n      // 命名规范 - kebab-case\n      '^([a-z][a-z0-9]*)(-+[a-z0-9]+)*$',\n      {\n        message: 'Expected class selector to be kebab-case',\n      },\n    ],\n    'rule-empty-line-before': null,\n    'declaration-block-no-duplicate-properties': true, // 禁止声明重复属性\n    'no-descending-specificity': true, // 禁止在具有较高优先级的选择器后出现被其覆盖的较低优先级的选择器。\n    // 最多允许嵌套20层，去掉默认的最多2层\n    'max-nesting-depth': 20,\n    // 颜色值要小写\n    'color-hex-case': 'lower',\n    // 颜色值能短则短\n    'color-hex-length': 'short',\n  },\n  ignoreFiles: ['**/*.js', '**/*.jsx', '**/*.tsx', '**/*.ts'],\n};\n\n```\n\n3. webpack StyleLintPlugin 配置如下：\n\n​\t\t\n\n```js\nnew StyleLintPlugin({\n        files: ['src/*.(s(c|a)ss|css|less|vue)'],\n        extensions: ['ccs', 'scss', 'sass', 'less', 'vue', 'html'],\n        fix: true,\n        cache: false,\n        emitErrors: true,\n        failOnError: false,\n      }),\n```\n\n\n\n\n\n4. vscode 配置如下\n\n```json\n{\n\"stylelint.validate\": [\"vue\", \"less\", \"css\", \"html\", \"scss\", \"sass\"],\n  \"editor.codeActionsOnSave\": {\n    \"source.fixAll.stylelint\": true\n  },\n}\n\n```\n\n## commitlint husky lint-staged\n\n1. > npm install --save-dev @commitlint/config-conventional @commitlint/cli  husky lint-staged\n\n   \n\n2. commitlint.config.js 配置如下:\n\n```js\n/**\n * init: 项目初始化\n * feat：新功能\n * fix：修补某功能的bug\n * refactor：重构某个功能\n * perf: 优化构建工具或运行时性能\n * style：仅样式改动\n * docs：仅文档新增/改动\n * chore：构建过程或辅助工具的变动\n * ci: ci配置相关，docker等配置文件修改\n */\nmodule.exports = {\n  extends: ['@commitlint/config-conventional'],\n  rules: {\n    'type-enum': [2, 'always', ['init', 'feat', 'fix', 'refactor', 'perf', 'style', 'docs', 'chore', 'ci']],\n    'type-case': [0],\n    'type-empty': [0],\n    'scope-empty': [0],\n    'scope-case': [0],\n    'subject-full-stop': [0, 'never'],\n    'subject-case': [0, 'never'],\n    'header-max-length': [0, 'always', 72],\n  },\n};\n\n```\n\n3. husky lint-staged\n\n> npm install husky lint-staged prettier --save-dev\n>\n> npx husky install  (启用)\n>\n> \"prepare\": \"husky install\" 【install后自动启用，这个配置在package.json中，否则下次新拉代码还需要手动启用】\n>\n> npx husky add .husky/pre-commit \"npm run lint-staged\" 【创建一个hook，执行完根目录回生成一个.husky目录】\n\n​\t\n\n4. husky 和 lint-staged 配置如下\n\n```json\n\"husky\": {\n    \"hooks\": {\n      \"pre-commit\": \"npm run lint-staged\"\n    }\n  },\n  \"lint-staged\": {\n    \"**/*.vue\": [\n      \"npm run lint:fix\",\n      \"npm run lint:style:fix\"\n    ],\n    \"**/*.{js,jsx,ts,tsx}\": [\n      \"npm run lint:fix\"\n    ],\n    \"**/*.{htm,html,css,sss,less,scss,sass}\": [\n      \"npm run lint:style:fix\",\n      \"git add\"\n    ]\n  }\n```\n\n## npm 脚本部分配置如下:\n\n```json\n{\n   \"lint\": \"eslint --ext .js,.vue src --ignore-path .gitignore .\",\n    \"lint:fix\": \"eslint --fix --ext .js,.vue --format=pretty ./src\",\n    \"lint:prettier\": \"prettier --check \\\"**/*\\\" --end-of-line auto\",\n    \"lint:style\": \"stylelint src/**/*.{vue,css,sass,scss,less} --allow-empty-input\",\n    \"lint:style:fix\": \"stylelint src/**/*.{vue,css,sass,scss,less} --fix\",\n    \"lint-staged\": \"lint-staged\",\n    \"prepare\": \"husky install\",\n}\n```\n\n## 用到的部分依赖及版本如下： \n\n```\n{\n\t\"devDependencies\": {\n\t\t\"@commitlint/cli\": \"^16.1.0\",\n    \"@commitlint/config-conventional\": \"^16.0.0\",\n     \"eslint\": \"^7.29.0\",\n    \"eslint-config-prettier\": \"^8.3.0\",\n    \"eslint-formatter-pretty\": \"^4.1.0\",\n    \"eslint-plugin-prettier\": \"^4.0.0\",\n    \"eslint-plugin-vue\": \"6.2.2\",\n    \"husky\": \"^7.0.4\",\n    \"lint-staged\": \"^12.3.2\",\n    \"postcss\": \"^8.4.5\",\n    \"postcss-html\": \"^1.3.0\",\n    \"postcss-scss\": \"^4.0.3\",\n    \"prettier\": \"2.5.1\",\n    \"stylelint\": \"^14.3.0\",\n    \"stylelint-config-prettier\": \"^9.0.3\",\n    \"stylelint-config-recess-order\": \"^3.0.0\",\n    \"stylelint-config-recommended-vue\": \"^1.1.0\",\n    \"stylelint-config-standard\": \"^24.0.0\",\n    \"stylelint-config-standard-scss\": \"^3.0.0\",\n    \"stylelint-scss\": \"^4.1.0\",\n    \"stylelint-webpack-plugin\": \"^2.3.2\",\n\t}\n}\n```\n\n","slug":"eslint-prettier-stylelint-commitlint配置","published":1,"updated":"2022-02-10T10:37:39.240Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzgul15r0005mmsfmiszsced","content":"<h1 id=\"代码、项目规范，配置-eslint、prettier、stylelint、commitlint\"><a href=\"#代码、项目规范，配置-eslint、prettier、stylelint、commitlint\" class=\"headerlink\" title=\"代码、项目规范，配置 eslint、prettier、stylelint、commitlint\"></a>代码、项目规范，配置 eslint、prettier、stylelint、commitlint</h1><blockquote>\n<p>为了规范项目代码，统一代码风格，同时提升代码的提交规范，使用 <strong>eslint</strong> 进行代码规范化的检测和自动修改；使用  <strong>prettier</strong> 统一代码风格和自动格式化；使用  <strong>stylelint</strong> 统一 css 风格和自动格式化；使用 <strong>commitlint</strong>、<strong>lint-staged</strong>、<strong>husky</strong> 进行提交检查和提交自动格式化。 同时为了消除不同使用者 vscode 的差异，提供了 .vscode – setting.json 的配置.</p>\n</blockquote>\n<h2 id=\"Eslint-prettier-vscode-配置\"><a href=\"#Eslint-prettier-vscode-配置\" class=\"headerlink\" title=\"Eslint\\prettier\\vscode 配置\"></a>Eslint\\prettier\\vscode 配置</h2><ol>\n<li>.vscode 配置:</li>\n</ol>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"files.associations\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"*.vue\"</span>: <span class=\"string\">\"vue\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"editor.formatOnSave\": false, // prettier保存格式化</span><br><span class=\"line\">  \"[javascript]\": &#123;</span><br><span class=\"line\">    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"[json]\": &#123;</span><br><span class=\"line\">    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"[html]\": &#123;</span><br><span class=\"line\">    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"[jsonc]\": &#123;</span><br><span class=\"line\">    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"[vue]\": &#123;</span><br><span class=\"line\">    \"editor.defaultFormatter\": \"octref.vetur\"</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  // vetur 配置</span><br><span class=\"line\">  \"vetur.validation.template\": false,</span><br><span class=\"line\">  \"vetur.format.defaultFormatter.html\": \"prettyhtml\",</span><br><span class=\"line\">  \"vetur.format.defaultFormatter.css\": \"prettier\",</span><br><span class=\"line\">  \"vetur.format.defaultFormatter.postcss\": \"prettier\",</span><br><span class=\"line\">  \"vetur.format.defaultFormatter.scss\": \"prettier\",</span><br><span class=\"line\">  \"vetur.format.defaultFormatter.less\": \"prettier\",</span><br><span class=\"line\">  \"vetur.format.defaultFormatter.stylus\": \"stylus-supremacy\",</span><br><span class=\"line\">  \"vetur.format.defaultFormatter.sass\": \"sass-formatter\",</span><br><span class=\"line\">  \"vetur.format.defaultFormatter.js\": \"prettier-eslint\",</span><br><span class=\"line\">  \"vetur.format.defaultFormatter.ts\": \"vscode-typescript\",</span><br><span class=\"line\">  \"vetur.format.options.tabSize\": 2,</span><br><span class=\"line\">  \"vetur.format.defaultFormatterOptions\": &#123;</span><br><span class=\"line\">   // \"js-beautify-html\": &#123;</span><br><span class=\"line\">   //   \"wrap_attributes\": \"force-expand-multiline\"</span><br><span class=\"line\">   // &#125;,</span><br><span class=\"line\">    \"prettyhtml\": &#123;</span><br><span class=\"line\">      \"printWidth\": 150,</span><br><span class=\"line\">      \"singleQuote\": false,</span><br><span class=\"line\">      \"wrapAttributes\": true,</span><br><span class=\"line\">      \"sortAttributes\": false</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    \"prettier\": &#123;</span><br><span class=\"line\">      \"semi\": true,</span><br><span class=\"line\">      \"singleQuote\": true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"prettier.vueIndentScriptAndStyle\": true,</span><br><span class=\"line\">  // eslint扩展设置</span><br><span class=\"line\">  \"editor.codeActionsOnSave\": &#123;</span><br><span class=\"line\">    \"source.fixAll.eslint\": true</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"eslint.options\": &#123;</span><br><span class=\"line\">    \"extensions\": [\".js\", \".vue\"]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"eslint.validate\": [\"javascript\", \"javascriptreact\", \"html\", \"typescript\", \"typescriptreact\", \"vue\"]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>安装以下npm包</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev eslint@7.28.x prettier eslint-config-prettier eslint-plugin-prettier eslint-formatter-pretty</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Tips: </p>\n<p>eslant 要求版本7.28以上，eslint-config-prettier eslint-plugin-prettier用于解决prettier和eslint规则的冲突.</p>\n<p>eslint-formatter-pretty （用于命令行美化）</p>\n</blockquote>\n<ol start=\"3\">\n<li>.eslintrc 配置如下</li>\n</ol>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  root: true,</span><br><span class=\"line\">  parserOptions: &#123;</span><br><span class=\"line\">    parser: 'babel-eslint',</span><br><span class=\"line\">    sourceType: 'module',</span><br><span class=\"line\">    ecmaVersion: 2020,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  env: &#123;</span><br><span class=\"line\">    browser: true,</span><br><span class=\"line\">    node: true,</span><br><span class=\"line\">    es6: true,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  extends: [</span><br><span class=\"line\">    'plugin:vue/recommended',</span><br><span class=\"line\">    'eslint:recommended',</span><br><span class=\"line\">    'plugin:prettier/recommended', // 解决prettier和eslint的冲突</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>prettier和eslint存在部分冲突的规则， 通过 eslint-config-prettier eslint-plugin-prettier 已经 能解决大部分冲突，剩下的比如  “singleQuote”、”semi” 手动配置 eslint 就能解决</p>\n<p>配置的原则就是 eslint 负责代码检查和自动修复，prettier 负责自动格式化 </p>\n</blockquote>\n<h2 id=\"stylelint\"><a href=\"#stylelint\" class=\"headerlink\" title=\"stylelint\"></a>stylelint</h2><ol>\n<li>Npm 安装如下包</li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">\"stylelint\"</span>: <span class=\"string\">\"^14.3.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"stylelint-config-prettier\"</span>: <span class=\"string\">\"^9.0.3\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"stylelint-config-recess-order\"</span>: <span class=\"string\">\"^3.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"stylelint-config-recommended-vue\"</span>: <span class=\"string\">\"^1.1.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"stylelint-config-standard\"</span>: <span class=\"string\">\"^24.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"stylelint-config-standard-scss\"</span>: <span class=\"string\">\"^3.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"stylelint-scss\"</span>: <span class=\"string\">\"^4.1.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"stylelint-webpack-plugin\"</span>: <span class=\"string\">\"^2.3.2\"</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>新建stylelint.config.js 文件并配置如下:</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  defaultSeverity: <span class=\"string\">'warning'</span>,</span><br><span class=\"line\">  extends: [<span class=\"string\">'stylelint-config-standard-scss'</span>, <span class=\"string\">'stylelint-config-recommended-vue/scss'</span>, <span class=\"string\">'stylelint-config-prettier'</span>, <span class=\"string\">'stylelint-config-recess-order'</span>],</span><br><span class=\"line\">  rules: &#123;</span><br><span class=\"line\">    <span class=\"string\">'selector-class-pattern'</span>: [</span><br><span class=\"line\">      <span class=\"comment\">// 命名规范 - kebab-case</span></span><br><span class=\"line\">      <span class=\"string\">'^([a-z][a-z0-9]*)(-+[a-z0-9]+)*$'</span>,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        message: <span class=\"string\">'Expected class selector to be kebab-case'</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">'rule-empty-line-before'</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"string\">'declaration-block-no-duplicate-properties'</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 禁止声明重复属性</span></span><br><span class=\"line\">    <span class=\"string\">'no-descending-specificity'</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 禁止在具有较高优先级的选择器后出现被其覆盖的较低优先级的选择器。</span></span><br><span class=\"line\">    <span class=\"comment\">// 最多允许嵌套20层，去掉默认的最多2层</span></span><br><span class=\"line\">    <span class=\"string\">'max-nesting-depth'</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 颜色值要小写</span></span><br><span class=\"line\">    <span class=\"string\">'color-hex-case'</span>: <span class=\"string\">'lower'</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 颜色值能短则短</span></span><br><span class=\"line\">    <span class=\"string\">'color-hex-length'</span>: <span class=\"string\">'short'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ignoreFiles: [<span class=\"string\">'**/*.js'</span>, <span class=\"string\">'**/*.jsx'</span>, <span class=\"string\">'**/*.tsx'</span>, <span class=\"string\">'**/*.ts'</span>],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>webpack StyleLintPlugin 配置如下：</li>\n</ol>\n<p>​        </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> StyleLintPlugin(&#123;</span><br><span class=\"line\">        files: [<span class=\"string\">'src/*.(s(c|a)ss|css|less|vue)'</span>],</span><br><span class=\"line\">        extensions: [<span class=\"string\">'ccs'</span>, <span class=\"string\">'scss'</span>, <span class=\"string\">'sass'</span>, <span class=\"string\">'less'</span>, <span class=\"string\">'vue'</span>, <span class=\"string\">'html'</span>],</span><br><span class=\"line\">        fix: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        cache: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        emitErrors: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        failOnError: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      &#125;),</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>vscode 配置如下</li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"attr\">\"stylelint.validate\"</span>: [<span class=\"string\">\"vue\"</span>, <span class=\"string\">\"less\"</span>, <span class=\"string\">\"css\"</span>, <span class=\"string\">\"html\"</span>, <span class=\"string\">\"scss\"</span>, <span class=\"string\">\"sass\"</span>],</span><br><span class=\"line\">  <span class=\"attr\">\"editor.codeActionsOnSave\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"source.fixAll.stylelint\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"commitlint-husky-lint-staged\"><a href=\"#commitlint-husky-lint-staged\" class=\"headerlink\" title=\"commitlint husky lint-staged\"></a>commitlint husky lint-staged</h2><ol>\n<li><blockquote>\n<p>npm install –save-dev @commitlint/config-conventional @commitlint/cli  husky lint-staged</p>\n</blockquote>\n</li>\n</ol>\n<ol start=\"2\">\n<li>commitlint.config.js 配置如下:</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * init: 项目初始化</span></span><br><span class=\"line\"><span class=\"comment\"> * feat：新功能</span></span><br><span class=\"line\"><span class=\"comment\"> * fix：修补某功能的bug</span></span><br><span class=\"line\"><span class=\"comment\"> * refactor：重构某个功能</span></span><br><span class=\"line\"><span class=\"comment\"> * perf: 优化构建工具或运行时性能</span></span><br><span class=\"line\"><span class=\"comment\"> * style：仅样式改动</span></span><br><span class=\"line\"><span class=\"comment\"> * docs：仅文档新增/改动</span></span><br><span class=\"line\"><span class=\"comment\"> * chore：构建过程或辅助工具的变动</span></span><br><span class=\"line\"><span class=\"comment\"> * ci: ci配置相关，docker等配置文件修改</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  extends: [<span class=\"string\">'@commitlint/config-conventional'</span>],</span><br><span class=\"line\">  rules: &#123;</span><br><span class=\"line\">    <span class=\"string\">'type-enum'</span>: [<span class=\"number\">2</span>, <span class=\"string\">'always'</span>, [<span class=\"string\">'init'</span>, <span class=\"string\">'feat'</span>, <span class=\"string\">'fix'</span>, <span class=\"string\">'refactor'</span>, <span class=\"string\">'perf'</span>, <span class=\"string\">'style'</span>, <span class=\"string\">'docs'</span>, <span class=\"string\">'chore'</span>, <span class=\"string\">'ci'</span>]],</span><br><span class=\"line\">    <span class=\"string\">'type-case'</span>: [<span class=\"number\">0</span>],</span><br><span class=\"line\">    <span class=\"string\">'type-empty'</span>: [<span class=\"number\">0</span>],</span><br><span class=\"line\">    <span class=\"string\">'scope-empty'</span>: [<span class=\"number\">0</span>],</span><br><span class=\"line\">    <span class=\"string\">'scope-case'</span>: [<span class=\"number\">0</span>],</span><br><span class=\"line\">    <span class=\"string\">'subject-full-stop'</span>: [<span class=\"number\">0</span>, <span class=\"string\">'never'</span>],</span><br><span class=\"line\">    <span class=\"string\">'subject-case'</span>: [<span class=\"number\">0</span>, <span class=\"string\">'never'</span>],</span><br><span class=\"line\">    <span class=\"string\">'header-max-length'</span>: [<span class=\"number\">0</span>, <span class=\"string\">'always'</span>, <span class=\"number\">72</span>],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>husky lint-staged</li>\n</ol>\n<blockquote>\n<p>npm install husky lint-staged prettier –save-dev</p>\n<p>npx husky install  (启用)</p>\n<p>“prepare”: “husky install” 【install后自动启用，这个配置在package.json中，否则下次新拉代码还需要手动启用】</p>\n<p>npx husky add .husky/pre-commit “npm run lint-staged” 【创建一个hook，执行完根目录回生成一个.husky目录】</p>\n</blockquote>\n<p>​    </p>\n<ol start=\"4\">\n<li>husky 和 lint-staged 配置如下</li>\n</ol>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"husky\": &#123;</span><br><span class=\"line\">    \"hooks\": &#123;</span><br><span class=\"line\">      \"pre-commit\": \"npm run lint-staged\"</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"lint-staged\": &#123;</span><br><span class=\"line\">    \"**/*.vue\": [</span><br><span class=\"line\">      \"npm run lint:fix\",</span><br><span class=\"line\">      <span class=\"string\">\"npm run lint:style:fix\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    \"**/*.&#123;js,jsx,ts,tsx&#125;\": [</span><br><span class=\"line\">      <span class=\"string\">\"npm run lint:fix\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    \"**/*.&#123;htm,html,css,sss,less,scss,sass&#125;\": [</span><br><span class=\"line\">      \"npm run lint:style:fix\",</span><br><span class=\"line\">      <span class=\"string\">\"git add\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"npm-脚本部分配置如下\"><a href=\"#npm-脚本部分配置如下\" class=\"headerlink\" title=\"npm 脚本部分配置如下:\"></a>npm 脚本部分配置如下:</h2><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"attr\">\"lint\"</span>: <span class=\"string\">\"eslint --ext .js,.vue src --ignore-path .gitignore .\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"lint:fix\"</span>: <span class=\"string\">\"eslint --fix --ext .js,.vue --format=pretty ./src\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"lint:prettier\"</span>: <span class=\"string\">\"prettier --check \\\"**/*\\\" --end-of-line auto\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"lint:style\"</span>: <span class=\"string\">\"stylelint src/**/*.&#123;vue,css,sass,scss,less&#125; --allow-empty-input\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"lint:style:fix\"</span>: <span class=\"string\">\"stylelint src/**/*.&#123;vue,css,sass,scss,less&#125; --fix\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"lint-staged\"</span>: <span class=\"string\">\"lint-staged\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"prepare\"</span>: <span class=\"string\">\"husky install\"</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"用到的部分依赖及版本如下：\"><a href=\"#用到的部分依赖及版本如下：\" class=\"headerlink\" title=\"用到的部分依赖及版本如下：\"></a>用到的部分依赖及版本如下：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;devDependencies&quot;: &#123;</span><br><span class=\"line\">\t\t&quot;@commitlint/cli&quot;: &quot;^16.1.0&quot;,</span><br><span class=\"line\">    &quot;@commitlint/config-conventional&quot;: &quot;^16.0.0&quot;,</span><br><span class=\"line\">     &quot;eslint&quot;: &quot;^7.29.0&quot;,</span><br><span class=\"line\">    &quot;eslint-config-prettier&quot;: &quot;^8.3.0&quot;,</span><br><span class=\"line\">    &quot;eslint-formatter-pretty&quot;: &quot;^4.1.0&quot;,</span><br><span class=\"line\">    &quot;eslint-plugin-prettier&quot;: &quot;^4.0.0&quot;,</span><br><span class=\"line\">    &quot;eslint-plugin-vue&quot;: &quot;6.2.2&quot;,</span><br><span class=\"line\">    &quot;husky&quot;: &quot;^7.0.4&quot;,</span><br><span class=\"line\">    &quot;lint-staged&quot;: &quot;^12.3.2&quot;,</span><br><span class=\"line\">    &quot;postcss&quot;: &quot;^8.4.5&quot;,</span><br><span class=\"line\">    &quot;postcss-html&quot;: &quot;^1.3.0&quot;,</span><br><span class=\"line\">    &quot;postcss-scss&quot;: &quot;^4.0.3&quot;,</span><br><span class=\"line\">    &quot;prettier&quot;: &quot;2.5.1&quot;,</span><br><span class=\"line\">    &quot;stylelint&quot;: &quot;^14.3.0&quot;,</span><br><span class=\"line\">    &quot;stylelint-config-prettier&quot;: &quot;^9.0.3&quot;,</span><br><span class=\"line\">    &quot;stylelint-config-recess-order&quot;: &quot;^3.0.0&quot;,</span><br><span class=\"line\">    &quot;stylelint-config-recommended-vue&quot;: &quot;^1.1.0&quot;,</span><br><span class=\"line\">    &quot;stylelint-config-standard&quot;: &quot;^24.0.0&quot;,</span><br><span class=\"line\">    &quot;stylelint-config-standard-scss&quot;: &quot;^3.0.0&quot;,</span><br><span class=\"line\">    &quot;stylelint-scss&quot;: &quot;^4.1.0&quot;,</span><br><span class=\"line\">    &quot;stylelint-webpack-plugin&quot;: &quot;^2.3.2&quot;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"代码、项目规范，配置-eslint、prettier、stylelint、commitlint\"><a href=\"#代码、项目规范，配置-eslint、prettier、stylelint、commitlint\" class=\"headerlink\" title=\"代码、项目规范，配置 eslint、prettier、stylelint、commitlint\"></a>代码、项目规范，配置 eslint、prettier、stylelint、commitlint</h1><blockquote>\n<p>为了规范项目代码，统一代码风格，同时提升代码的提交规范，使用 <strong>eslint</strong> 进行代码规范化的检测和自动修改；使用  <strong>prettier</strong> 统一代码风格和自动格式化；使用  <strong>stylelint</strong> 统一 css 风格和自动格式化；使用 <strong>commitlint</strong>、<strong>lint-staged</strong>、<strong>husky</strong> 进行提交检查和提交自动格式化。 同时为了消除不同使用者 vscode 的差异，提供了 .vscode – setting.json 的配置.</p>\n</blockquote>\n<h2 id=\"Eslint-prettier-vscode-配置\"><a href=\"#Eslint-prettier-vscode-配置\" class=\"headerlink\" title=\"Eslint\\prettier\\vscode 配置\"></a>Eslint\\prettier\\vscode 配置</h2><ol>\n<li>.vscode 配置:</li>\n</ol>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"files.associations\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"*.vue\"</span>: <span class=\"string\">\"vue\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"editor.formatOnSave\": false, // prettier保存格式化</span><br><span class=\"line\">  \"[javascript]\": &#123;</span><br><span class=\"line\">    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"[json]\": &#123;</span><br><span class=\"line\">    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"[html]\": &#123;</span><br><span class=\"line\">    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"[jsonc]\": &#123;</span><br><span class=\"line\">    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"[vue]\": &#123;</span><br><span class=\"line\">    \"editor.defaultFormatter\": \"octref.vetur\"</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  // vetur 配置</span><br><span class=\"line\">  \"vetur.validation.template\": false,</span><br><span class=\"line\">  \"vetur.format.defaultFormatter.html\": \"prettyhtml\",</span><br><span class=\"line\">  \"vetur.format.defaultFormatter.css\": \"prettier\",</span><br><span class=\"line\">  \"vetur.format.defaultFormatter.postcss\": \"prettier\",</span><br><span class=\"line\">  \"vetur.format.defaultFormatter.scss\": \"prettier\",</span><br><span class=\"line\">  \"vetur.format.defaultFormatter.less\": \"prettier\",</span><br><span class=\"line\">  \"vetur.format.defaultFormatter.stylus\": \"stylus-supremacy\",</span><br><span class=\"line\">  \"vetur.format.defaultFormatter.sass\": \"sass-formatter\",</span><br><span class=\"line\">  \"vetur.format.defaultFormatter.js\": \"prettier-eslint\",</span><br><span class=\"line\">  \"vetur.format.defaultFormatter.ts\": \"vscode-typescript\",</span><br><span class=\"line\">  \"vetur.format.options.tabSize\": 2,</span><br><span class=\"line\">  \"vetur.format.defaultFormatterOptions\": &#123;</span><br><span class=\"line\">   // \"js-beautify-html\": &#123;</span><br><span class=\"line\">   //   \"wrap_attributes\": \"force-expand-multiline\"</span><br><span class=\"line\">   // &#125;,</span><br><span class=\"line\">    \"prettyhtml\": &#123;</span><br><span class=\"line\">      \"printWidth\": 150,</span><br><span class=\"line\">      \"singleQuote\": false,</span><br><span class=\"line\">      \"wrapAttributes\": true,</span><br><span class=\"line\">      \"sortAttributes\": false</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    \"prettier\": &#123;</span><br><span class=\"line\">      \"semi\": true,</span><br><span class=\"line\">      \"singleQuote\": true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"prettier.vueIndentScriptAndStyle\": true,</span><br><span class=\"line\">  // eslint扩展设置</span><br><span class=\"line\">  \"editor.codeActionsOnSave\": &#123;</span><br><span class=\"line\">    \"source.fixAll.eslint\": true</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"eslint.options\": &#123;</span><br><span class=\"line\">    \"extensions\": [\".js\", \".vue\"]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"eslint.validate\": [\"javascript\", \"javascriptreact\", \"html\", \"typescript\", \"typescriptreact\", \"vue\"]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>安装以下npm包</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev eslint@7.28.x prettier eslint-config-prettier eslint-plugin-prettier eslint-formatter-pretty</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Tips: </p>\n<p>eslant 要求版本7.28以上，eslint-config-prettier eslint-plugin-prettier用于解决prettier和eslint规则的冲突.</p>\n<p>eslint-formatter-pretty （用于命令行美化）</p>\n</blockquote>\n<ol start=\"3\">\n<li>.eslintrc 配置如下</li>\n</ol>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  root: true,</span><br><span class=\"line\">  parserOptions: &#123;</span><br><span class=\"line\">    parser: 'babel-eslint',</span><br><span class=\"line\">    sourceType: 'module',</span><br><span class=\"line\">    ecmaVersion: 2020,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  env: &#123;</span><br><span class=\"line\">    browser: true,</span><br><span class=\"line\">    node: true,</span><br><span class=\"line\">    es6: true,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  extends: [</span><br><span class=\"line\">    'plugin:vue/recommended',</span><br><span class=\"line\">    'eslint:recommended',</span><br><span class=\"line\">    'plugin:prettier/recommended', // 解决prettier和eslint的冲突</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>prettier和eslint存在部分冲突的规则， 通过 eslint-config-prettier eslint-plugin-prettier 已经 能解决大部分冲突，剩下的比如  “singleQuote”、”semi” 手动配置 eslint 就能解决</p>\n<p>配置的原则就是 eslint 负责代码检查和自动修复，prettier 负责自动格式化 </p>\n</blockquote>\n<h2 id=\"stylelint\"><a href=\"#stylelint\" class=\"headerlink\" title=\"stylelint\"></a>stylelint</h2><ol>\n<li>Npm 安装如下包</li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">\"stylelint\"</span>: <span class=\"string\">\"^14.3.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"stylelint-config-prettier\"</span>: <span class=\"string\">\"^9.0.3\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"stylelint-config-recess-order\"</span>: <span class=\"string\">\"^3.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"stylelint-config-recommended-vue\"</span>: <span class=\"string\">\"^1.1.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"stylelint-config-standard\"</span>: <span class=\"string\">\"^24.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"stylelint-config-standard-scss\"</span>: <span class=\"string\">\"^3.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"stylelint-scss\"</span>: <span class=\"string\">\"^4.1.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"stylelint-webpack-plugin\"</span>: <span class=\"string\">\"^2.3.2\"</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>新建stylelint.config.js 文件并配置如下:</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  defaultSeverity: <span class=\"string\">'warning'</span>,</span><br><span class=\"line\">  extends: [<span class=\"string\">'stylelint-config-standard-scss'</span>, <span class=\"string\">'stylelint-config-recommended-vue/scss'</span>, <span class=\"string\">'stylelint-config-prettier'</span>, <span class=\"string\">'stylelint-config-recess-order'</span>],</span><br><span class=\"line\">  rules: &#123;</span><br><span class=\"line\">    <span class=\"string\">'selector-class-pattern'</span>: [</span><br><span class=\"line\">      <span class=\"comment\">// 命名规范 - kebab-case</span></span><br><span class=\"line\">      <span class=\"string\">'^([a-z][a-z0-9]*)(-+[a-z0-9]+)*$'</span>,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        message: <span class=\"string\">'Expected class selector to be kebab-case'</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">'rule-empty-line-before'</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"string\">'declaration-block-no-duplicate-properties'</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 禁止声明重复属性</span></span><br><span class=\"line\">    <span class=\"string\">'no-descending-specificity'</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 禁止在具有较高优先级的选择器后出现被其覆盖的较低优先级的选择器。</span></span><br><span class=\"line\">    <span class=\"comment\">// 最多允许嵌套20层，去掉默认的最多2层</span></span><br><span class=\"line\">    <span class=\"string\">'max-nesting-depth'</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 颜色值要小写</span></span><br><span class=\"line\">    <span class=\"string\">'color-hex-case'</span>: <span class=\"string\">'lower'</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 颜色值能短则短</span></span><br><span class=\"line\">    <span class=\"string\">'color-hex-length'</span>: <span class=\"string\">'short'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ignoreFiles: [<span class=\"string\">'**/*.js'</span>, <span class=\"string\">'**/*.jsx'</span>, <span class=\"string\">'**/*.tsx'</span>, <span class=\"string\">'**/*.ts'</span>],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>webpack StyleLintPlugin 配置如下：</li>\n</ol>\n<p>​        </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> StyleLintPlugin(&#123;</span><br><span class=\"line\">        files: [<span class=\"string\">'src/*.(s(c|a)ss|css|less|vue)'</span>],</span><br><span class=\"line\">        extensions: [<span class=\"string\">'ccs'</span>, <span class=\"string\">'scss'</span>, <span class=\"string\">'sass'</span>, <span class=\"string\">'less'</span>, <span class=\"string\">'vue'</span>, <span class=\"string\">'html'</span>],</span><br><span class=\"line\">        fix: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        cache: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        emitErrors: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        failOnError: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      &#125;),</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>vscode 配置如下</li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"attr\">\"stylelint.validate\"</span>: [<span class=\"string\">\"vue\"</span>, <span class=\"string\">\"less\"</span>, <span class=\"string\">\"css\"</span>, <span class=\"string\">\"html\"</span>, <span class=\"string\">\"scss\"</span>, <span class=\"string\">\"sass\"</span>],</span><br><span class=\"line\">  <span class=\"attr\">\"editor.codeActionsOnSave\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"source.fixAll.stylelint\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"commitlint-husky-lint-staged\"><a href=\"#commitlint-husky-lint-staged\" class=\"headerlink\" title=\"commitlint husky lint-staged\"></a>commitlint husky lint-staged</h2><ol>\n<li><blockquote>\n<p>npm install –save-dev @commitlint/config-conventional @commitlint/cli  husky lint-staged</p>\n</blockquote>\n</li>\n</ol>\n<ol start=\"2\">\n<li>commitlint.config.js 配置如下:</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * init: 项目初始化</span></span><br><span class=\"line\"><span class=\"comment\"> * feat：新功能</span></span><br><span class=\"line\"><span class=\"comment\"> * fix：修补某功能的bug</span></span><br><span class=\"line\"><span class=\"comment\"> * refactor：重构某个功能</span></span><br><span class=\"line\"><span class=\"comment\"> * perf: 优化构建工具或运行时性能</span></span><br><span class=\"line\"><span class=\"comment\"> * style：仅样式改动</span></span><br><span class=\"line\"><span class=\"comment\"> * docs：仅文档新增/改动</span></span><br><span class=\"line\"><span class=\"comment\"> * chore：构建过程或辅助工具的变动</span></span><br><span class=\"line\"><span class=\"comment\"> * ci: ci配置相关，docker等配置文件修改</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  extends: [<span class=\"string\">'@commitlint/config-conventional'</span>],</span><br><span class=\"line\">  rules: &#123;</span><br><span class=\"line\">    <span class=\"string\">'type-enum'</span>: [<span class=\"number\">2</span>, <span class=\"string\">'always'</span>, [<span class=\"string\">'init'</span>, <span class=\"string\">'feat'</span>, <span class=\"string\">'fix'</span>, <span class=\"string\">'refactor'</span>, <span class=\"string\">'perf'</span>, <span class=\"string\">'style'</span>, <span class=\"string\">'docs'</span>, <span class=\"string\">'chore'</span>, <span class=\"string\">'ci'</span>]],</span><br><span class=\"line\">    <span class=\"string\">'type-case'</span>: [<span class=\"number\">0</span>],</span><br><span class=\"line\">    <span class=\"string\">'type-empty'</span>: [<span class=\"number\">0</span>],</span><br><span class=\"line\">    <span class=\"string\">'scope-empty'</span>: [<span class=\"number\">0</span>],</span><br><span class=\"line\">    <span class=\"string\">'scope-case'</span>: [<span class=\"number\">0</span>],</span><br><span class=\"line\">    <span class=\"string\">'subject-full-stop'</span>: [<span class=\"number\">0</span>, <span class=\"string\">'never'</span>],</span><br><span class=\"line\">    <span class=\"string\">'subject-case'</span>: [<span class=\"number\">0</span>, <span class=\"string\">'never'</span>],</span><br><span class=\"line\">    <span class=\"string\">'header-max-length'</span>: [<span class=\"number\">0</span>, <span class=\"string\">'always'</span>, <span class=\"number\">72</span>],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>husky lint-staged</li>\n</ol>\n<blockquote>\n<p>npm install husky lint-staged prettier –save-dev</p>\n<p>npx husky install  (启用)</p>\n<p>“prepare”: “husky install” 【install后自动启用，这个配置在package.json中，否则下次新拉代码还需要手动启用】</p>\n<p>npx husky add .husky/pre-commit “npm run lint-staged” 【创建一个hook，执行完根目录回生成一个.husky目录】</p>\n</blockquote>\n<p>​    </p>\n<ol start=\"4\">\n<li>husky 和 lint-staged 配置如下</li>\n</ol>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"husky\": &#123;</span><br><span class=\"line\">    \"hooks\": &#123;</span><br><span class=\"line\">      \"pre-commit\": \"npm run lint-staged\"</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"lint-staged\": &#123;</span><br><span class=\"line\">    \"**/*.vue\": [</span><br><span class=\"line\">      \"npm run lint:fix\",</span><br><span class=\"line\">      <span class=\"string\">\"npm run lint:style:fix\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    \"**/*.&#123;js,jsx,ts,tsx&#125;\": [</span><br><span class=\"line\">      <span class=\"string\">\"npm run lint:fix\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    \"**/*.&#123;htm,html,css,sss,less,scss,sass&#125;\": [</span><br><span class=\"line\">      \"npm run lint:style:fix\",</span><br><span class=\"line\">      <span class=\"string\">\"git add\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"npm-脚本部分配置如下\"><a href=\"#npm-脚本部分配置如下\" class=\"headerlink\" title=\"npm 脚本部分配置如下:\"></a>npm 脚本部分配置如下:</h2><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"attr\">\"lint\"</span>: <span class=\"string\">\"eslint --ext .js,.vue src --ignore-path .gitignore .\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"lint:fix\"</span>: <span class=\"string\">\"eslint --fix --ext .js,.vue --format=pretty ./src\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"lint:prettier\"</span>: <span class=\"string\">\"prettier --check \\\"**/*\\\" --end-of-line auto\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"lint:style\"</span>: <span class=\"string\">\"stylelint src/**/*.&#123;vue,css,sass,scss,less&#125; --allow-empty-input\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"lint:style:fix\"</span>: <span class=\"string\">\"stylelint src/**/*.&#123;vue,css,sass,scss,less&#125; --fix\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"lint-staged\"</span>: <span class=\"string\">\"lint-staged\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"prepare\"</span>: <span class=\"string\">\"husky install\"</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"用到的部分依赖及版本如下：\"><a href=\"#用到的部分依赖及版本如下：\" class=\"headerlink\" title=\"用到的部分依赖及版本如下：\"></a>用到的部分依赖及版本如下：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;devDependencies&quot;: &#123;</span><br><span class=\"line\">\t\t&quot;@commitlint/cli&quot;: &quot;^16.1.0&quot;,</span><br><span class=\"line\">    &quot;@commitlint/config-conventional&quot;: &quot;^16.0.0&quot;,</span><br><span class=\"line\">     &quot;eslint&quot;: &quot;^7.29.0&quot;,</span><br><span class=\"line\">    &quot;eslint-config-prettier&quot;: &quot;^8.3.0&quot;,</span><br><span class=\"line\">    &quot;eslint-formatter-pretty&quot;: &quot;^4.1.0&quot;,</span><br><span class=\"line\">    &quot;eslint-plugin-prettier&quot;: &quot;^4.0.0&quot;,</span><br><span class=\"line\">    &quot;eslint-plugin-vue&quot;: &quot;6.2.2&quot;,</span><br><span class=\"line\">    &quot;husky&quot;: &quot;^7.0.4&quot;,</span><br><span class=\"line\">    &quot;lint-staged&quot;: &quot;^12.3.2&quot;,</span><br><span class=\"line\">    &quot;postcss&quot;: &quot;^8.4.5&quot;,</span><br><span class=\"line\">    &quot;postcss-html&quot;: &quot;^1.3.0&quot;,</span><br><span class=\"line\">    &quot;postcss-scss&quot;: &quot;^4.0.3&quot;,</span><br><span class=\"line\">    &quot;prettier&quot;: &quot;2.5.1&quot;,</span><br><span class=\"line\">    &quot;stylelint&quot;: &quot;^14.3.0&quot;,</span><br><span class=\"line\">    &quot;stylelint-config-prettier&quot;: &quot;^9.0.3&quot;,</span><br><span class=\"line\">    &quot;stylelint-config-recess-order&quot;: &quot;^3.0.0&quot;,</span><br><span class=\"line\">    &quot;stylelint-config-recommended-vue&quot;: &quot;^1.1.0&quot;,</span><br><span class=\"line\">    &quot;stylelint-config-standard&quot;: &quot;^24.0.0&quot;,</span><br><span class=\"line\">    &quot;stylelint-config-standard-scss&quot;: &quot;^3.0.0&quot;,</span><br><span class=\"line\">    &quot;stylelint-scss&quot;: &quot;^4.1.0&quot;,</span><br><span class=\"line\">    &quot;stylelint-webpack-plugin&quot;: &quot;^2.3.2&quot;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"JS   call、apply的使用和剖析","date":"2020-11-04T15:35:23.000Z","_content":"\n# JS   call、apply的使用和剖析\n\n\n\n\n\n## call\n\n\n\n### 用法\n\n```javascript\nlet obj = {name: 'chou'}\n\nlet fn = function(first, last) {\n  console.log(this.name + first + last)\n}\n\nfn.call(obj, 'first', 'last')\t\t// choufirstlast\n\n```\n\n\n\n通过调用call方法，将函数`fn`的this指向传给call的第一个参数`obj`，同时将`call`方法的第二、第三……个参数作为`fn`函数的参数进行传递。 `fn`函数的this会指向obj，这样`this.name`就是obj中的name属性，`fn`的参数也就是call传入的参数。\n\n> 需要注意⚠️：1. 调用call方法后，fn函数会立即执行。\n>\n> ​\t\t\t\t\t\t 2. call方法传入函数参数的方式是通过参数列表传入，与后面apply通过数组方式这点不同。\n\n\n\n### 用途\n\n1. 最常见的用途就是改变调用函数`this`的指向\n2. 立即调用函数 (什么参数都不传)\n3. 借用别的对象的属性或方法\n\n\n\n### 实现\n\n\n\n思路： \n\ncall的原理是改变函数`this`指向，并传入参数，然后立即执行这个函数，我们可以顺着这个思路将要改变`this`指向的函数挂载到要指向的对象上，然后传入参数并执行(因为调用call后会立即执行)。\n\n\n\n```javascript\nFunction.prototype.mycall = function(context) {\n  if (typeof this !== 'function') {\n    throw new TypeError('not funciton')\n  }\n  context = context || window\n  context.fn = this // 要执行的函数 eg: fn.call(this)\n  let arg = [...arguments].slice(1) // call传入的参数 [this,1,2,3,4] ===> [1,2,3,4]\n  let result = context.fn(...arg) // 传入参数给fn，执行函数\n  delete context.fn\n  return result\n}\n\nlet obj = {name: 'chou'}\n\nlet fn = function(first, last) {\n  console.log(this.name + first + last)\n}\n\nfn.mycall(obj, 'first', 'last')\t\t// choufirstlast\n```\n\n\n\n\n\n## apply\n\n\n\n### 用法\n\n*apply的用法和call几乎一摸一样，只是传入参数的方式不一样*\n\n\n\n```javascript\nlet obj = {name: 'chou'}\n\nlet fn = function(first, last) {\n  console.log(this.name + first + last)\n}\n\nfn.apply(obj, ['first', 'last'])\t\t// choufirstlast\n```\n\n\n\n> apply传给函数`fn`参数是通过传入一个数组的方式，其他方面和call一摸一样。  具体解释参考call\n\n\n\n### 用途\n\n1. 最常见的用途就是改变调用函数`this`的指向\n2. 立即调用函数 (什么参数都不传)\n3. 借用别的对象的属性或方法\n\n\n\n### 实现\n\n思路： \n\napply的实现和call处理几乎一样，唯一需要注意的就是参数的处理方式不同，我们只需要针对apply(this, params) 着重`params`的处理就行了。\n\n\n\n```javascript\nFunction.prototype.myapply = function(context) {\n  if (typeof this !== 'function') {\n    throw new TypeError('not funciton')\n  }\n  context = context || window\n  context.fn = this // 要执行的函数 eg: fn.call(this)\n  let arg = [...arguments][1] // call传入的参数 [this, [1,2,3,4]] =====> [1,2,3,4]\n  let result = context.fn(...arg) // 传入参数给fn，执行函数\n  delete context.fn\n  return result\n}\n\nlet obj = {name: 'chou'}\n\nlet fn = function(first, last) {\n  console.log(this.name + first + last)\n}\n\nfn.myapply(obj, ['first', 'last'])\t\t// choufirstlast\n```\n\n\n\n\n\n## 总结\n\n\n\n相同点\n\n* 都是改变函数`this`指向\n* 都是立即执行函数\n\n\n\n不同点\n\n* call 传入参数是通过参数列表方式传入 (`fn.call(this,a1,a2,a3)`) ， apply传入参数是通过数组方式传入 (`fn.apply(this,[a1,a2,a3])`)","source":"_posts/js   Call、Apply的使用和剖析.md","raw":"---\ntitle: JS   call、apply的使用和剖析\ndate: 2020-11-04 23:35:23\ncategories:\n - javascript\ntags:\n - javascript\n---\n\n# JS   call、apply的使用和剖析\n\n\n\n\n\n## call\n\n\n\n### 用法\n\n```javascript\nlet obj = {name: 'chou'}\n\nlet fn = function(first, last) {\n  console.log(this.name + first + last)\n}\n\nfn.call(obj, 'first', 'last')\t\t// choufirstlast\n\n```\n\n\n\n通过调用call方法，将函数`fn`的this指向传给call的第一个参数`obj`，同时将`call`方法的第二、第三……个参数作为`fn`函数的参数进行传递。 `fn`函数的this会指向obj，这样`this.name`就是obj中的name属性，`fn`的参数也就是call传入的参数。\n\n> 需要注意⚠️：1. 调用call方法后，fn函数会立即执行。\n>\n> ​\t\t\t\t\t\t 2. call方法传入函数参数的方式是通过参数列表传入，与后面apply通过数组方式这点不同。\n\n\n\n### 用途\n\n1. 最常见的用途就是改变调用函数`this`的指向\n2. 立即调用函数 (什么参数都不传)\n3. 借用别的对象的属性或方法\n\n\n\n### 实现\n\n\n\n思路： \n\ncall的原理是改变函数`this`指向，并传入参数，然后立即执行这个函数，我们可以顺着这个思路将要改变`this`指向的函数挂载到要指向的对象上，然后传入参数并执行(因为调用call后会立即执行)。\n\n\n\n```javascript\nFunction.prototype.mycall = function(context) {\n  if (typeof this !== 'function') {\n    throw new TypeError('not funciton')\n  }\n  context = context || window\n  context.fn = this // 要执行的函数 eg: fn.call(this)\n  let arg = [...arguments].slice(1) // call传入的参数 [this,1,2,3,4] ===> [1,2,3,4]\n  let result = context.fn(...arg) // 传入参数给fn，执行函数\n  delete context.fn\n  return result\n}\n\nlet obj = {name: 'chou'}\n\nlet fn = function(first, last) {\n  console.log(this.name + first + last)\n}\n\nfn.mycall(obj, 'first', 'last')\t\t// choufirstlast\n```\n\n\n\n\n\n## apply\n\n\n\n### 用法\n\n*apply的用法和call几乎一摸一样，只是传入参数的方式不一样*\n\n\n\n```javascript\nlet obj = {name: 'chou'}\n\nlet fn = function(first, last) {\n  console.log(this.name + first + last)\n}\n\nfn.apply(obj, ['first', 'last'])\t\t// choufirstlast\n```\n\n\n\n> apply传给函数`fn`参数是通过传入一个数组的方式，其他方面和call一摸一样。  具体解释参考call\n\n\n\n### 用途\n\n1. 最常见的用途就是改变调用函数`this`的指向\n2. 立即调用函数 (什么参数都不传)\n3. 借用别的对象的属性或方法\n\n\n\n### 实现\n\n思路： \n\napply的实现和call处理几乎一样，唯一需要注意的就是参数的处理方式不同，我们只需要针对apply(this, params) 着重`params`的处理就行了。\n\n\n\n```javascript\nFunction.prototype.myapply = function(context) {\n  if (typeof this !== 'function') {\n    throw new TypeError('not funciton')\n  }\n  context = context || window\n  context.fn = this // 要执行的函数 eg: fn.call(this)\n  let arg = [...arguments][1] // call传入的参数 [this, [1,2,3,4]] =====> [1,2,3,4]\n  let result = context.fn(...arg) // 传入参数给fn，执行函数\n  delete context.fn\n  return result\n}\n\nlet obj = {name: 'chou'}\n\nlet fn = function(first, last) {\n  console.log(this.name + first + last)\n}\n\nfn.myapply(obj, ['first', 'last'])\t\t// choufirstlast\n```\n\n\n\n\n\n## 总结\n\n\n\n相同点\n\n* 都是改变函数`this`指向\n* 都是立即执行函数\n\n\n\n不同点\n\n* call 传入参数是通过参数列表方式传入 (`fn.call(this,a1,a2,a3)`) ， apply传入参数是通过数组方式传入 (`fn.apply(this,[a1,a2,a3])`)","slug":"js   Call、Apply的使用和剖析","published":1,"updated":"2020-11-04T15:29:50.935Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzgul15s0006mmsfsaykdfu6","content":"<h1 id=\"JS-call、apply的使用和剖析\"><a href=\"#JS-call、apply的使用和剖析\" class=\"headerlink\" title=\"JS   call、apply的使用和剖析\"></a>JS   call、apply的使用和剖析</h1><h2 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call\"></a>call</h2><h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">name</span>: <span class=\"string\">'chou'</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">first, last</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + first + last)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn.call(obj, <span class=\"string\">'first'</span>, <span class=\"string\">'last'</span>)\t\t<span class=\"comment\">// choufirstlast</span></span><br></pre></td></tr></table></figure>\n<p>通过调用call方法，将函数<code>fn</code>的this指向传给call的第一个参数<code>obj</code>，同时将<code>call</code>方法的第二、第三……个参数作为<code>fn</code>函数的参数进行传递。 <code>fn</code>函数的this会指向obj，这样<code>this.name</code>就是obj中的name属性，<code>fn</code>的参数也就是call传入的参数。</p>\n<blockquote>\n<p>需要注意⚠️：1. 调用call方法后，fn函数会立即执行。</p>\n<p>​                         2. call方法传入函数参数的方式是通过参数列表传入，与后面apply通过数组方式这点不同。</p>\n</blockquote>\n<h3 id=\"用途\"><a href=\"#用途\" class=\"headerlink\" title=\"用途\"></a>用途</h3><ol>\n<li>最常见的用途就是改变调用函数<code>this</code>的指向</li>\n<li>立即调用函数 (什么参数都不传)</li>\n<li>借用别的对象的属性或方法</li>\n</ol>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>思路： </p>\n<p>call的原理是改变函数<code>this</code>指向，并传入参数，然后立即执行这个函数，我们可以顺着这个思路将要改变<code>this</code>指向的函数挂载到要指向的对象上，然后传入参数并执行(因为调用call后会立即执行)。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.mycall = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span> !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'not funciton'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  context = context || <span class=\"built_in\">window</span></span><br><span class=\"line\">  context.fn = <span class=\"keyword\">this</span> <span class=\"comment\">// 要执行的函数 eg: fn.call(this)</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> arg = [...arguments].slice(<span class=\"number\">1</span>) <span class=\"comment\">// call传入的参数 [this,1,2,3,4] ===&gt; [1,2,3,4]</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = context.fn(...arg) <span class=\"comment\">// 传入参数给fn，执行函数</span></span><br><span class=\"line\">  <span class=\"keyword\">delete</span> context.fn</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">name</span>: <span class=\"string\">'chou'</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">first, last</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + first + last)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn.mycall(obj, <span class=\"string\">'first'</span>, <span class=\"string\">'last'</span>)\t\t<span class=\"comment\">// choufirstlast</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply\"></a>apply</h2><h3 id=\"用法-1\"><a href=\"#用法-1\" class=\"headerlink\" title=\"用法\"></a>用法</h3><p><em>apply的用法和call几乎一摸一样，只是传入参数的方式不一样</em></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">name</span>: <span class=\"string\">'chou'</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">first, last</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + first + last)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn.apply(obj, [<span class=\"string\">'first'</span>, <span class=\"string\">'last'</span>])\t\t<span class=\"comment\">// choufirstlast</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>apply传给函数<code>fn</code>参数是通过传入一个数组的方式，其他方面和call一摸一样。  具体解释参考call</p>\n</blockquote>\n<h3 id=\"用途-1\"><a href=\"#用途-1\" class=\"headerlink\" title=\"用途\"></a>用途</h3><ol>\n<li>最常见的用途就是改变调用函数<code>this</code>的指向</li>\n<li>立即调用函数 (什么参数都不传)</li>\n<li>借用别的对象的属性或方法</li>\n</ol>\n<h3 id=\"实现-1\"><a href=\"#实现-1\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>思路： </p>\n<p>apply的实现和call处理几乎一样，唯一需要注意的就是参数的处理方式不同，我们只需要针对apply(this, params) 着重<code>params</code>的处理就行了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.myapply = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span> !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'not funciton'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  context = context || <span class=\"built_in\">window</span></span><br><span class=\"line\">  context.fn = <span class=\"keyword\">this</span> <span class=\"comment\">// 要执行的函数 eg: fn.call(this)</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> arg = [...arguments][<span class=\"number\">1</span>] <span class=\"comment\">// call传入的参数 [this, [1,2,3,4]] =====&gt; [1,2,3,4]</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = context.fn(...arg) <span class=\"comment\">// 传入参数给fn，执行函数</span></span><br><span class=\"line\">  <span class=\"keyword\">delete</span> context.fn</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">name</span>: <span class=\"string\">'chou'</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">first, last</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + first + last)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn.myapply(obj, [<span class=\"string\">'first'</span>, <span class=\"string\">'last'</span>])\t\t<span class=\"comment\">// choufirstlast</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>相同点</p>\n<ul>\n<li>都是改变函数<code>this</code>指向</li>\n<li>都是立即执行函数</li>\n</ul>\n<p>不同点</p>\n<ul>\n<li>call 传入参数是通过参数列表方式传入 (<code>fn.call(this,a1,a2,a3)</code>) ， apply传入参数是通过数组方式传入 (<code>fn.apply(this,[a1,a2,a3])</code>)</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JS-call、apply的使用和剖析\"><a href=\"#JS-call、apply的使用和剖析\" class=\"headerlink\" title=\"JS   call、apply的使用和剖析\"></a>JS   call、apply的使用和剖析</h1><h2 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call\"></a>call</h2><h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">name</span>: <span class=\"string\">'chou'</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">first, last</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + first + last)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn.call(obj, <span class=\"string\">'first'</span>, <span class=\"string\">'last'</span>)\t\t<span class=\"comment\">// choufirstlast</span></span><br></pre></td></tr></table></figure>\n<p>通过调用call方法，将函数<code>fn</code>的this指向传给call的第一个参数<code>obj</code>，同时将<code>call</code>方法的第二、第三……个参数作为<code>fn</code>函数的参数进行传递。 <code>fn</code>函数的this会指向obj，这样<code>this.name</code>就是obj中的name属性，<code>fn</code>的参数也就是call传入的参数。</p>\n<blockquote>\n<p>需要注意⚠️：1. 调用call方法后，fn函数会立即执行。</p>\n<p>​                         2. call方法传入函数参数的方式是通过参数列表传入，与后面apply通过数组方式这点不同。</p>\n</blockquote>\n<h3 id=\"用途\"><a href=\"#用途\" class=\"headerlink\" title=\"用途\"></a>用途</h3><ol>\n<li>最常见的用途就是改变调用函数<code>this</code>的指向</li>\n<li>立即调用函数 (什么参数都不传)</li>\n<li>借用别的对象的属性或方法</li>\n</ol>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>思路： </p>\n<p>call的原理是改变函数<code>this</code>指向，并传入参数，然后立即执行这个函数，我们可以顺着这个思路将要改变<code>this</code>指向的函数挂载到要指向的对象上，然后传入参数并执行(因为调用call后会立即执行)。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.mycall = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span> !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'not funciton'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  context = context || <span class=\"built_in\">window</span></span><br><span class=\"line\">  context.fn = <span class=\"keyword\">this</span> <span class=\"comment\">// 要执行的函数 eg: fn.call(this)</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> arg = [...arguments].slice(<span class=\"number\">1</span>) <span class=\"comment\">// call传入的参数 [this,1,2,3,4] ===&gt; [1,2,3,4]</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = context.fn(...arg) <span class=\"comment\">// 传入参数给fn，执行函数</span></span><br><span class=\"line\">  <span class=\"keyword\">delete</span> context.fn</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">name</span>: <span class=\"string\">'chou'</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">first, last</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + first + last)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn.mycall(obj, <span class=\"string\">'first'</span>, <span class=\"string\">'last'</span>)\t\t<span class=\"comment\">// choufirstlast</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply\"></a>apply</h2><h3 id=\"用法-1\"><a href=\"#用法-1\" class=\"headerlink\" title=\"用法\"></a>用法</h3><p><em>apply的用法和call几乎一摸一样，只是传入参数的方式不一样</em></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">name</span>: <span class=\"string\">'chou'</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">first, last</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + first + last)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn.apply(obj, [<span class=\"string\">'first'</span>, <span class=\"string\">'last'</span>])\t\t<span class=\"comment\">// choufirstlast</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>apply传给函数<code>fn</code>参数是通过传入一个数组的方式，其他方面和call一摸一样。  具体解释参考call</p>\n</blockquote>\n<h3 id=\"用途-1\"><a href=\"#用途-1\" class=\"headerlink\" title=\"用途\"></a>用途</h3><ol>\n<li>最常见的用途就是改变调用函数<code>this</code>的指向</li>\n<li>立即调用函数 (什么参数都不传)</li>\n<li>借用别的对象的属性或方法</li>\n</ol>\n<h3 id=\"实现-1\"><a href=\"#实现-1\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>思路： </p>\n<p>apply的实现和call处理几乎一样，唯一需要注意的就是参数的处理方式不同，我们只需要针对apply(this, params) 着重<code>params</code>的处理就行了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.myapply = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span> !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'not funciton'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  context = context || <span class=\"built_in\">window</span></span><br><span class=\"line\">  context.fn = <span class=\"keyword\">this</span> <span class=\"comment\">// 要执行的函数 eg: fn.call(this)</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> arg = [...arguments][<span class=\"number\">1</span>] <span class=\"comment\">// call传入的参数 [this, [1,2,3,4]] =====&gt; [1,2,3,4]</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = context.fn(...arg) <span class=\"comment\">// 传入参数给fn，执行函数</span></span><br><span class=\"line\">  <span class=\"keyword\">delete</span> context.fn</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">name</span>: <span class=\"string\">'chou'</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">first, last</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + first + last)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn.myapply(obj, [<span class=\"string\">'first'</span>, <span class=\"string\">'last'</span>])\t\t<span class=\"comment\">// choufirstlast</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>相同点</p>\n<ul>\n<li>都是改变函数<code>this</code>指向</li>\n<li>都是立即执行函数</li>\n</ul>\n<p>不同点</p>\n<ul>\n<li>call 传入参数是通过参数列表方式传入 (<code>fn.call(this,a1,a2,a3)</code>) ， apply传入参数是通过数组方式传入 (<code>fn.apply(this,[a1,a2,a3])</code>)</li>\n</ul>\n"},{"title":"Nuxt i18n国际化","date":"2019-03-31T14:17:15.000Z","_content":"\n\n\n# Nuxt.js集成国际化\n\n\n\n##  前言\n\n​\t公司官网需求要加上国际化， 之前官网使用的是vue的 nuxt框架，然后generate生成的静态页面，看了一下，nuxt官方有集成i18n的示例就跟着弄了一下，期间也踩了一些坑。\n\n\n\n<!-- more -->\n\n## 准备工作\n\n### 安装\n\n​\t<code>npm install vue-i18n --save</code>\n\n\n\n### 在nuxt.config.js 中配置\n\n​\t\n\n```javascript\n  plugins: ['~/plugins/i18n.js'],\n\n  router: {\n    middleware: ['i18n']\n  }\n```\n\n### 在plugins文件夹下新建i18n.js\n\n​\t\n\n```javascript\nimport Vue from 'vue'\nimport VueI18n from 'vue-i18n'\n\nVue.use(VueI18n)\n\nexport default ({ app, store }) => {\n  // Set i18n instance on app\n  // This way we can use it in middleware and pages asyncData/fetch\n  app.i18n = new VueI18n({\n    locale: store.state.locale,\n    fallbackLocale: 'cn',\n    messages: {\n      en: require('~/locales/en.json'),\n      cn: require('~/locales/cn.json')\n    }\n  })\n\n  app.i18n.path = link => {\n    if (app.i18n.locale === app.i18n.fallbackLocale) {\n      return `/${link}`\n    }\n\n    return `/${app.i18n.locale}/${link}`\n  }\n}\n\n```\n\n### 在middleware文件夹下新建 i18n.js\n\n​\t \n\n```javascript\nexport default function ({ isHMR, app, store, route, params, error, redirect }) {\n  const defaultLocale = app.i18n.fallbackLocale\n  // If middleware is called from hot module replacement, ignore it\n  if (isHMR) return\n  // Get locale from params\n  // const locale = params.lang || defaultLocale\n  const locale = params.lang || defaultLocale\n  if (store.state.locales.indexOf(locale) === -1) {\n    return error({ message: 'This page could not be found.', statusCode: 404 })\n  }\n  // Set locale\n  store.commit('SET_LANG', locale)\n  app.i18n.locale = store.state.locale\n  // If route is /<defaultLocale>/... -> redirect to /...\n  if (locale === defaultLocale && route.fullPath.indexOf('/' + defaultLocale) === 0) {\n    const toReplace = '^/' + defaultLocale + (route.fullPath.indexOf('/' + defaultLocale + '/') === 0 ? '/' : '')\n    const re = new RegExp(toReplace)\n    return redirect(\n      route.fullPath.replace(re, '/')\n    )\n  }\n}\n\n```\n\n## 创建本地语言库\n\n​\t在根目录下新建文件夹locales， 然后在文件夹下添加你要翻译的语言的json文件 。\n\n### 在store文件夹下新建index.js\n\n​\t\n\n```javascript\nexport const state = () => ({\n  locales: ['en', 'cn'],\n  locale: 'cn'\n})\n\nexport const mutations = {\n  SET_LANG(state, locale) {\n    if (state.locales.indexOf(locale) !== -1) {\n      state.locale = locale\n    }\n  }\n}\n\n```\n\n### 踩坑……\n\n​\t好了，照着官方把该加的都加了，这下就能实现国际化的切换了吧。 然后参考了几篇文章， 通过 <code>**this**.$i18n.locale = Langname</code> 或是\n\n <code>this.$store.commit('SET_LANG', lang)</code> 切换语言。 结果要不就是404， 要不就是一个页面切换了，然后换个页面，也就是切换了路由又变回原来的语言了。。。   \n\n\n\n​\t结果找了好久发现是路由的问题，主要是middleware中的这一段代码:\n\n```javascript\nconst locale = params.lang || defaultLocale\n  if (store.state.locales.indexOf(locale) === -1) {\n    return error({ message: 'This page could not be found.', statusCode: 404 })\n  }\n  // Set locale\n  store.commit('SET_LANG', locale)\n  app.i18n.locale = store.state.locale\n```\n\n每次我们切换页面的时候都会调用这个中间件，然后会去判断路由中的params 如果lang参数有值就将语言设置为对应的值。\n\n​\t 比如我的地址是  \"http://localhost/zn/\" 那么中间件就会将当前的lang设置为zn  如果就是\"http://localhost/\" 就会设置为默认的值.\n\n​\t所以之前我们手动设置了store中的值，切换了路由就会变回原样是因为每次中间件都会把locale设置成默认值(因为我们路由中没有带参数)。\n\n​\t可是当我们路由带上参数后切出现找不到页面的情况，这是因为当前路径下，比如 \"http://localhost/zn/\" 找不到我们的页面。 这是我们就要用到nuxt提供给我们的一个 **动态路由**的功能。 \n\n​\t[动态路由](https://zh.nuxtjs.org/guide/routing#%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1)根据官方可如下配置，因为nuxt是根据page下目录生成路由，可如下组织目录:\n\n![A8CB811A-9DC9-4BB8-8C19-9EFB4ADDA033](https://ws4.sinaimg.cn/large/006tKfTcgy1g1mdn9yi7fj30e40n6jsd.jpg)\n\n_lang 就是动态路由下的参数项，这样不管是带不带参数都能找到页面了。","source":"_posts/Nuxt.js  i18n国际化.md","raw":"---\ntitle: Nuxt i18n国际化\ndate: 2019-03-31 22:17:15\ncategories:\n - javascript\ntags:\n - i18n\n - nuxt\n\n---\n\n\n\n# Nuxt.js集成国际化\n\n\n\n##  前言\n\n​\t公司官网需求要加上国际化， 之前官网使用的是vue的 nuxt框架，然后generate生成的静态页面，看了一下，nuxt官方有集成i18n的示例就跟着弄了一下，期间也踩了一些坑。\n\n\n\n<!-- more -->\n\n## 准备工作\n\n### 安装\n\n​\t<code>npm install vue-i18n --save</code>\n\n\n\n### 在nuxt.config.js 中配置\n\n​\t\n\n```javascript\n  plugins: ['~/plugins/i18n.js'],\n\n  router: {\n    middleware: ['i18n']\n  }\n```\n\n### 在plugins文件夹下新建i18n.js\n\n​\t\n\n```javascript\nimport Vue from 'vue'\nimport VueI18n from 'vue-i18n'\n\nVue.use(VueI18n)\n\nexport default ({ app, store }) => {\n  // Set i18n instance on app\n  // This way we can use it in middleware and pages asyncData/fetch\n  app.i18n = new VueI18n({\n    locale: store.state.locale,\n    fallbackLocale: 'cn',\n    messages: {\n      en: require('~/locales/en.json'),\n      cn: require('~/locales/cn.json')\n    }\n  })\n\n  app.i18n.path = link => {\n    if (app.i18n.locale === app.i18n.fallbackLocale) {\n      return `/${link}`\n    }\n\n    return `/${app.i18n.locale}/${link}`\n  }\n}\n\n```\n\n### 在middleware文件夹下新建 i18n.js\n\n​\t \n\n```javascript\nexport default function ({ isHMR, app, store, route, params, error, redirect }) {\n  const defaultLocale = app.i18n.fallbackLocale\n  // If middleware is called from hot module replacement, ignore it\n  if (isHMR) return\n  // Get locale from params\n  // const locale = params.lang || defaultLocale\n  const locale = params.lang || defaultLocale\n  if (store.state.locales.indexOf(locale) === -1) {\n    return error({ message: 'This page could not be found.', statusCode: 404 })\n  }\n  // Set locale\n  store.commit('SET_LANG', locale)\n  app.i18n.locale = store.state.locale\n  // If route is /<defaultLocale>/... -> redirect to /...\n  if (locale === defaultLocale && route.fullPath.indexOf('/' + defaultLocale) === 0) {\n    const toReplace = '^/' + defaultLocale + (route.fullPath.indexOf('/' + defaultLocale + '/') === 0 ? '/' : '')\n    const re = new RegExp(toReplace)\n    return redirect(\n      route.fullPath.replace(re, '/')\n    )\n  }\n}\n\n```\n\n## 创建本地语言库\n\n​\t在根目录下新建文件夹locales， 然后在文件夹下添加你要翻译的语言的json文件 。\n\n### 在store文件夹下新建index.js\n\n​\t\n\n```javascript\nexport const state = () => ({\n  locales: ['en', 'cn'],\n  locale: 'cn'\n})\n\nexport const mutations = {\n  SET_LANG(state, locale) {\n    if (state.locales.indexOf(locale) !== -1) {\n      state.locale = locale\n    }\n  }\n}\n\n```\n\n### 踩坑……\n\n​\t好了，照着官方把该加的都加了，这下就能实现国际化的切换了吧。 然后参考了几篇文章， 通过 <code>**this**.$i18n.locale = Langname</code> 或是\n\n <code>this.$store.commit('SET_LANG', lang)</code> 切换语言。 结果要不就是404， 要不就是一个页面切换了，然后换个页面，也就是切换了路由又变回原来的语言了。。。   \n\n\n\n​\t结果找了好久发现是路由的问题，主要是middleware中的这一段代码:\n\n```javascript\nconst locale = params.lang || defaultLocale\n  if (store.state.locales.indexOf(locale) === -1) {\n    return error({ message: 'This page could not be found.', statusCode: 404 })\n  }\n  // Set locale\n  store.commit('SET_LANG', locale)\n  app.i18n.locale = store.state.locale\n```\n\n每次我们切换页面的时候都会调用这个中间件，然后会去判断路由中的params 如果lang参数有值就将语言设置为对应的值。\n\n​\t 比如我的地址是  \"http://localhost/zn/\" 那么中间件就会将当前的lang设置为zn  如果就是\"http://localhost/\" 就会设置为默认的值.\n\n​\t所以之前我们手动设置了store中的值，切换了路由就会变回原样是因为每次中间件都会把locale设置成默认值(因为我们路由中没有带参数)。\n\n​\t可是当我们路由带上参数后切出现找不到页面的情况，这是因为当前路径下，比如 \"http://localhost/zn/\" 找不到我们的页面。 这是我们就要用到nuxt提供给我们的一个 **动态路由**的功能。 \n\n​\t[动态路由](https://zh.nuxtjs.org/guide/routing#%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1)根据官方可如下配置，因为nuxt是根据page下目录生成路由，可如下组织目录:\n\n![A8CB811A-9DC9-4BB8-8C19-9EFB4ADDA033](https://ws4.sinaimg.cn/large/006tKfTcgy1g1mdn9yi7fj30e40n6jsd.jpg)\n\n_lang 就是动态路由下的参数项，这样不管是带不带参数都能找到页面了。","slug":"Nuxt.js  i18n国际化","published":1,"updated":"2019-03-31T15:08:25.793Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzgul1a5000lmmsf7d03qbzf","content":"<h1 id=\"Nuxt-js集成国际化\"><a href=\"#Nuxt-js集成国际化\" class=\"headerlink\" title=\"Nuxt.js集成国际化\"></a>Nuxt.js集成国际化</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>​    公司官网需求要加上国际化， 之前官网使用的是vue的 nuxt框架，然后generate生成的静态页面，看了一下，nuxt官方有集成i18n的示例就跟着弄了一下，期间也踩了一些坑。</p>\n<a id=\"more\"></a>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>​    <code>npm install vue-i18n –save</code></p>\n<h3 id=\"在nuxt-config-js-中配置\"><a href=\"#在nuxt-config-js-中配置\" class=\"headerlink\" title=\"在nuxt.config.js 中配置\"></a>在nuxt.config.js 中配置</h3><p>​    </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [<span class=\"string\">'~/plugins/i18n.js'</span>],</span><br><span class=\"line\"></span><br><span class=\"line\">router: &#123;</span><br><span class=\"line\">  middleware: [<span class=\"string\">'i18n'</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"在plugins文件夹下新建i18n-js\"><a href=\"#在plugins文件夹下新建i18n-js\" class=\"headerlink\" title=\"在plugins文件夹下新建i18n.js\"></a>在plugins文件夹下新建i18n.js</h3><p>​    </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> VueI18n <span class=\"keyword\">from</span> <span class=\"string\">'vue-i18n'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(VueI18n)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> (&#123; app, store &#125;) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Set i18n instance on app</span></span><br><span class=\"line\">  <span class=\"comment\">// This way we can use it in middleware and pages asyncData/fetch</span></span><br><span class=\"line\">  app.i18n = <span class=\"keyword\">new</span> VueI18n(&#123;</span><br><span class=\"line\">    locale: store.state.locale,</span><br><span class=\"line\">    fallbackLocale: <span class=\"string\">'cn'</span>,</span><br><span class=\"line\">    messages: &#123;</span><br><span class=\"line\">      en: <span class=\"built_in\">require</span>(<span class=\"string\">'~/locales/en.json'</span>),</span><br><span class=\"line\">      cn: <span class=\"built_in\">require</span>(<span class=\"string\">'~/locales/cn.json'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  app.i18n.path = <span class=\"function\"><span class=\"params\">link</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (app.i18n.locale === app.i18n.fallbackLocale) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">`/<span class=\"subst\">$&#123;link&#125;</span>`</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`/<span class=\"subst\">$&#123;app.i18n.locale&#125;</span>/<span class=\"subst\">$&#123;link&#125;</span>`</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"在middleware文件夹下新建-i18n-js\"><a href=\"#在middleware文件夹下新建-i18n-js\" class=\"headerlink\" title=\"在middleware文件夹下新建 i18n.js\"></a>在middleware文件夹下新建 i18n.js</h3><p>​     </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">&#123; isHMR, app, store, route, params, error, redirect &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> defaultLocale = app.i18n.fallbackLocale</span><br><span class=\"line\">  <span class=\"comment\">// If middleware is called from hot module replacement, ignore it</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isHMR) <span class=\"keyword\">return</span></span><br><span class=\"line\">  <span class=\"comment\">// Get locale from params</span></span><br><span class=\"line\">  <span class=\"comment\">// const locale = params.lang || defaultLocale</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> locale = params.lang || defaultLocale</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (store.state.locales.indexOf(locale) === <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> error(&#123; <span class=\"attr\">message</span>: <span class=\"string\">'This page could not be found.'</span>, <span class=\"attr\">statusCode</span>: <span class=\"number\">404</span> &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// Set locale</span></span><br><span class=\"line\">  store.commit(<span class=\"string\">'SET_LANG'</span>, locale)</span><br><span class=\"line\">  app.i18n.locale = store.state.locale</span><br><span class=\"line\">  <span class=\"comment\">// If route is /&lt;defaultLocale&gt;/... -&gt; redirect to /...</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (locale === defaultLocale &amp;&amp; route.fullPath.indexOf(<span class=\"string\">'/'</span> + defaultLocale) === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> toReplace = <span class=\"string\">'^/'</span> + defaultLocale + (route.fullPath.indexOf(<span class=\"string\">'/'</span> + defaultLocale + <span class=\"string\">'/'</span>) === <span class=\"number\">0</span> ? <span class=\"string\">'/'</span> : <span class=\"string\">''</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> re = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(toReplace)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> redirect(</span><br><span class=\"line\">      route.fullPath.replace(re, <span class=\"string\">'/'</span>)</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建本地语言库\"><a href=\"#创建本地语言库\" class=\"headerlink\" title=\"创建本地语言库\"></a>创建本地语言库</h2><p>​    在根目录下新建文件夹locales， 然后在文件夹下添加你要翻译的语言的json文件 。</p>\n<h3 id=\"在store文件夹下新建index-js\"><a href=\"#在store文件夹下新建index-js\" class=\"headerlink\" title=\"在store文件夹下新建index.js\"></a>在store文件夹下新建index.js</h3><p>​    </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> state = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (&#123;</span><br><span class=\"line\">  locales: [<span class=\"string\">'en'</span>, <span class=\"string\">'cn'</span>],</span><br><span class=\"line\">  locale: <span class=\"string\">'cn'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> mutations = &#123;</span><br><span class=\"line\">  SET_LANG(state, locale) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (state.locales.indexOf(locale) !== <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      state.locale = locale</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"踩坑……\"><a href=\"#踩坑……\" class=\"headerlink\" title=\"踩坑……\"></a>踩坑……</h3><p>​    好了，照着官方把该加的都加了，这下就能实现国际化的切换了吧。 然后参考了几篇文章， 通过 <code><strong>this</strong>.$i18n.locale = Langname</code> 或是</p>\n<p> <code>this.$store.commit(‘SET_LANG’, lang)</code> 切换语言。 结果要不就是404， 要不就是一个页面切换了，然后换个页面，也就是切换了路由又变回原来的语言了。。。   </p>\n<p>​    结果找了好久发现是路由的问题，主要是middleware中的这一段代码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> locale = params.lang || defaultLocale</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (store.state.locales.indexOf(locale) === <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> error(&#123; <span class=\"attr\">message</span>: <span class=\"string\">'This page could not be found.'</span>, <span class=\"attr\">statusCode</span>: <span class=\"number\">404</span> &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// Set locale</span></span><br><span class=\"line\">  store.commit(<span class=\"string\">'SET_LANG'</span>, locale)</span><br><span class=\"line\">  app.i18n.locale = store.state.locale</span><br></pre></td></tr></table></figure>\n<p>每次我们切换页面的时候都会调用这个中间件，然后会去判断路由中的params 如果lang参数有值就将语言设置为对应的值。</p>\n<p>​     比如我的地址是  “<a href=\"http://localhost/zn/&quot;\" target=\"_blank\" rel=\"noopener\">http://localhost/zn/&quot;</a> 那么中间件就会将当前的lang设置为zn  如果就是”<a href=\"http://localhost/&quot;\" target=\"_blank\" rel=\"noopener\">http://localhost/&quot;</a> 就会设置为默认的值.</p>\n<p>​    所以之前我们手动设置了store中的值，切换了路由就会变回原样是因为每次中间件都会把locale设置成默认值(因为我们路由中没有带参数)。</p>\n<p>​    可是当我们路由带上参数后切出现找不到页面的情况，这是因为当前路径下，比如 “<a href=\"http://localhost/zn/&quot;\" target=\"_blank\" rel=\"noopener\">http://localhost/zn/&quot;</a> 找不到我们的页面。 这是我们就要用到nuxt提供给我们的一个 <strong>动态路由</strong>的功能。 </p>\n<p>​    <a href=\"https://zh.nuxtjs.org/guide/routing#%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1\" target=\"_blank\" rel=\"noopener\">动态路由</a>根据官方可如下配置，因为nuxt是根据page下目录生成路由，可如下组织目录:</p>\n<p><img src=\"https://ws4.sinaimg.cn/large/006tKfTcgy1g1mdn9yi7fj30e40n6jsd.jpg\" alt=\"A8CB811A-9DC9-4BB8-8C19-9EFB4ADDA033\"></p>\n<p>_lang 就是动态路由下的参数项，这样不管是带不带参数都能找到页面了。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Nuxt-js集成国际化\"><a href=\"#Nuxt-js集成国际化\" class=\"headerlink\" title=\"Nuxt.js集成国际化\"></a>Nuxt.js集成国际化</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>​    公司官网需求要加上国际化， 之前官网使用的是vue的 nuxt框架，然后generate生成的静态页面，看了一下，nuxt官方有集成i18n的示例就跟着弄了一下，期间也踩了一些坑。</p>","more":"<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>​    <code>npm install vue-i18n –save</code></p>\n<h3 id=\"在nuxt-config-js-中配置\"><a href=\"#在nuxt-config-js-中配置\" class=\"headerlink\" title=\"在nuxt.config.js 中配置\"></a>在nuxt.config.js 中配置</h3><p>​    </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [<span class=\"string\">'~/plugins/i18n.js'</span>],</span><br><span class=\"line\"></span><br><span class=\"line\">router: &#123;</span><br><span class=\"line\">  middleware: [<span class=\"string\">'i18n'</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"在plugins文件夹下新建i18n-js\"><a href=\"#在plugins文件夹下新建i18n-js\" class=\"headerlink\" title=\"在plugins文件夹下新建i18n.js\"></a>在plugins文件夹下新建i18n.js</h3><p>​    </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> VueI18n <span class=\"keyword\">from</span> <span class=\"string\">'vue-i18n'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(VueI18n)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> (&#123; app, store &#125;) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Set i18n instance on app</span></span><br><span class=\"line\">  <span class=\"comment\">// This way we can use it in middleware and pages asyncData/fetch</span></span><br><span class=\"line\">  app.i18n = <span class=\"keyword\">new</span> VueI18n(&#123;</span><br><span class=\"line\">    locale: store.state.locale,</span><br><span class=\"line\">    fallbackLocale: <span class=\"string\">'cn'</span>,</span><br><span class=\"line\">    messages: &#123;</span><br><span class=\"line\">      en: <span class=\"built_in\">require</span>(<span class=\"string\">'~/locales/en.json'</span>),</span><br><span class=\"line\">      cn: <span class=\"built_in\">require</span>(<span class=\"string\">'~/locales/cn.json'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  app.i18n.path = <span class=\"function\"><span class=\"params\">link</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (app.i18n.locale === app.i18n.fallbackLocale) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">`/<span class=\"subst\">$&#123;link&#125;</span>`</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`/<span class=\"subst\">$&#123;app.i18n.locale&#125;</span>/<span class=\"subst\">$&#123;link&#125;</span>`</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"在middleware文件夹下新建-i18n-js\"><a href=\"#在middleware文件夹下新建-i18n-js\" class=\"headerlink\" title=\"在middleware文件夹下新建 i18n.js\"></a>在middleware文件夹下新建 i18n.js</h3><p>​     </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">&#123; isHMR, app, store, route, params, error, redirect &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> defaultLocale = app.i18n.fallbackLocale</span><br><span class=\"line\">  <span class=\"comment\">// If middleware is called from hot module replacement, ignore it</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isHMR) <span class=\"keyword\">return</span></span><br><span class=\"line\">  <span class=\"comment\">// Get locale from params</span></span><br><span class=\"line\">  <span class=\"comment\">// const locale = params.lang || defaultLocale</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> locale = params.lang || defaultLocale</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (store.state.locales.indexOf(locale) === <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> error(&#123; <span class=\"attr\">message</span>: <span class=\"string\">'This page could not be found.'</span>, <span class=\"attr\">statusCode</span>: <span class=\"number\">404</span> &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// Set locale</span></span><br><span class=\"line\">  store.commit(<span class=\"string\">'SET_LANG'</span>, locale)</span><br><span class=\"line\">  app.i18n.locale = store.state.locale</span><br><span class=\"line\">  <span class=\"comment\">// If route is /&lt;defaultLocale&gt;/... -&gt; redirect to /...</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (locale === defaultLocale &amp;&amp; route.fullPath.indexOf(<span class=\"string\">'/'</span> + defaultLocale) === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> toReplace = <span class=\"string\">'^/'</span> + defaultLocale + (route.fullPath.indexOf(<span class=\"string\">'/'</span> + defaultLocale + <span class=\"string\">'/'</span>) === <span class=\"number\">0</span> ? <span class=\"string\">'/'</span> : <span class=\"string\">''</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> re = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(toReplace)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> redirect(</span><br><span class=\"line\">      route.fullPath.replace(re, <span class=\"string\">'/'</span>)</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建本地语言库\"><a href=\"#创建本地语言库\" class=\"headerlink\" title=\"创建本地语言库\"></a>创建本地语言库</h2><p>​    在根目录下新建文件夹locales， 然后在文件夹下添加你要翻译的语言的json文件 。</p>\n<h3 id=\"在store文件夹下新建index-js\"><a href=\"#在store文件夹下新建index-js\" class=\"headerlink\" title=\"在store文件夹下新建index.js\"></a>在store文件夹下新建index.js</h3><p>​    </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> state = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (&#123;</span><br><span class=\"line\">  locales: [<span class=\"string\">'en'</span>, <span class=\"string\">'cn'</span>],</span><br><span class=\"line\">  locale: <span class=\"string\">'cn'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> mutations = &#123;</span><br><span class=\"line\">  SET_LANG(state, locale) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (state.locales.indexOf(locale) !== <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      state.locale = locale</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"踩坑……\"><a href=\"#踩坑……\" class=\"headerlink\" title=\"踩坑……\"></a>踩坑……</h3><p>​    好了，照着官方把该加的都加了，这下就能实现国际化的切换了吧。 然后参考了几篇文章， 通过 <code><strong>this</strong>.$i18n.locale = Langname</code> 或是</p>\n<p> <code>this.$store.commit(‘SET_LANG’, lang)</code> 切换语言。 结果要不就是404， 要不就是一个页面切换了，然后换个页面，也就是切换了路由又变回原来的语言了。。。   </p>\n<p>​    结果找了好久发现是路由的问题，主要是middleware中的这一段代码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> locale = params.lang || defaultLocale</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (store.state.locales.indexOf(locale) === <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> error(&#123; <span class=\"attr\">message</span>: <span class=\"string\">'This page could not be found.'</span>, <span class=\"attr\">statusCode</span>: <span class=\"number\">404</span> &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// Set locale</span></span><br><span class=\"line\">  store.commit(<span class=\"string\">'SET_LANG'</span>, locale)</span><br><span class=\"line\">  app.i18n.locale = store.state.locale</span><br></pre></td></tr></table></figure>\n<p>每次我们切换页面的时候都会调用这个中间件，然后会去判断路由中的params 如果lang参数有值就将语言设置为对应的值。</p>\n<p>​     比如我的地址是  “<a href=\"http://localhost/zn/&quot;\" target=\"_blank\" rel=\"noopener\">http://localhost/zn/&quot;</a> 那么中间件就会将当前的lang设置为zn  如果就是”<a href=\"http://localhost/&quot;\" target=\"_blank\" rel=\"noopener\">http://localhost/&quot;</a> 就会设置为默认的值.</p>\n<p>​    所以之前我们手动设置了store中的值，切换了路由就会变回原样是因为每次中间件都会把locale设置成默认值(因为我们路由中没有带参数)。</p>\n<p>​    可是当我们路由带上参数后切出现找不到页面的情况，这是因为当前路径下，比如 “<a href=\"http://localhost/zn/&quot;\" target=\"_blank\" rel=\"noopener\">http://localhost/zn/&quot;</a> 找不到我们的页面。 这是我们就要用到nuxt提供给我们的一个 <strong>动态路由</strong>的功能。 </p>\n<p>​    <a href=\"https://zh.nuxtjs.org/guide/routing#%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1\" target=\"_blank\" rel=\"noopener\">动态路由</a>根据官方可如下配置，因为nuxt是根据page下目录生成路由，可如下组织目录:</p>\n<p><img src=\"https://ws4.sinaimg.cn/large/006tKfTcgy1g1mdn9yi7fj30e40n6jsd.jpg\" alt=\"A8CB811A-9DC9-4BB8-8C19-9EFB4ADDA033\"></p>\n<p>_lang 就是动态路由下的参数项，这样不管是带不带参数都能找到页面了。</p>"},{"title":"JS bind的使用和实现原理剖析","date":"2020-11-04T15:37:23.000Z","_content":"\n# JS bind的使用和实现原理剖析\n\n\n\n```javascript\nvar obj = {name: 'jeff'}\n\nvar fn = function(arg1, arg2) {\n  console.log('args==>', [arg1, arg2], 'name==>', this.name)\n}\n\nvar bindFn = fn.bind(obj, 'arg1')\t\n\nbindFn('arg2') // args==> (2) [\"arg1\", \"arg2\"] name==> jeff\n```\n\n\n\n以上是bind的一个使用场景, 从上面代码中可以发现bind主要有以下几个作用:\n\n1. 改变了函数`fn`的 `this` 指向；\n2. 通过bind将参数传递给函数`fn`\n3. 返回一个新函数\n\n<!-- more -->\n\n*通过 `fn.bind(obj, 'arg1')\t` 将函数`fn`的this指向obj， 同时将 ‘arg1’ 作为 bind 的第二个参数传递给函数 `fn`， 并返回新函数 `bindFn`   。 此时调用 `bindFn`  并传入参数作为 fn 的第二个参数，执行结果依次是打印 arg1 、 arg2、jeff*\n\n\n\n### 实现一个bind\n\n\n\n如果要实现bind， 我们根据其使用方式总结出如下几点：\n\n1. 改变函数 this 的指向\n2. 返回一个新的函数\n3. 将传给 bind 的参传递给函数\n\n\n\n#### 改变this指向并返回新函数\n\n```javascript\nFunction.prototype.mybind = function (context) {\n\n    var self = this;\n    // 获取函数从第二个参数到最后一个参数\n    var args = Array.prototype.slice.call(arguments, 1);\n\n    return function () {\n        // 这个时候的arguments是指bind返回的函数传入的参数\n        var bindArgs = Array.prototype.slice.call(arguments);\n        return self.apply(context, args.concat(bindArgs));\n    }\n}\n\nvar obj = {name: 'zzw'}\n\nvar fn = function(arg1, arg2) {\n  console.log(this.name, 'args==>', arg1, arg2)\n}\n\n// 使用 mybind绑定函数 fn 到 obj对象 并传入第一个参数 'firstarg' 给函数 \nvar bindFn = fn.mybind(obj, 'firstarg')\n\n// 调用返回的函数 bindFn， 并传入参数 'secondarg'\nbindFn();\t// zzwargs==>firstargsecondarg\n```\n\n\n\n\n\n> ! -->  bind 返回的函数不仅可以直接执行， 还可以用作构造函数，同时还能传递参数，例如\n\n\n\n```javascript\nlet obj = {name: 'zzz'}\n\nvar fn = function(arg1, arg2) {\n  console.log(this.name)\n  console.log(arg1)\n  console.log(arg2)\n} \n\nfn.prototype.age = 20\n\nvar bindFn = fn.bind(obj)\n\n// 调用 new时, bind 的 this会失效. 传入的参数\nvar newFn = new bindFn('argnew')\t// undefined argnew undefined\n\nconsole.log(newFn.age) // 20\n\n\n```\n\n\n\n\n\n我们针对这个问题对之前的 `mybind` 函数进行一下优化\n\n如果调用构造函数的话， this会指向构造出来的对象， 对应上面的就是 `newFn`\n\n\n\n```javascript\nFunction.prototype.mybind = function (context) {\n\n    var self = this;\n    // 获取函数从第二个参数到最后一个参数\n    var args = Array.prototype.slice.call(arguments, 1);\n\t\t\n  \tvar fBound = function () {\n        // 这个时候的arguments是指bind返回的函数传入的参数\n        var bindArgs = Array.prototype.slice.call(arguments);\n      \t// 如果this指向fBound，则作为构造函数指向本身， 如果不是则作为普通函数指向要绑定的对象\n        return self.apply(this instanceof fBound ? this : context, args.concat(bindArgs));\n    }\n    // 继承 绑定函数 的原型\n    fBound.prototype = this.prototype\n    return fBound\n}\n\n// !优化一下  ⬇️⬇️ 防止修改原型时将原函数原型影响了\nFunction.prototype.mybind = function (context) {\n\n    var self = this;\n    // 获取函数从第二个参数到最后一个参数\n    var args = Array.prototype.slice.call(arguments, 1);\n\t\tvar fNOP = function () {};\n  \tvar fBound = function () {\n        // 这个时候的arguments是指bind返回的函数传入的参数\n        var bindArgs = Array.prototype.slice.call(arguments);\n        return self.apply(this instanceof fBound ? this : context, args.concat(bindArgs));\n    }\n    // 继承绑定函数的原型\n    fNOP.prototype = this.prototype;\n    fBound.prototype = new fNOP();\n    return fBound\n}\n\n```\n\n\n\n\n\n","source":"_posts/JS bind的使用和实现原理剖析.md","raw":"---\ntitle: JS bind的使用和实现原理剖析\ndate: 2020-11-04 23:37:23\ncategories:\n - javascript\ntags:\n - javascript\n---\n\n# JS bind的使用和实现原理剖析\n\n\n\n```javascript\nvar obj = {name: 'jeff'}\n\nvar fn = function(arg1, arg2) {\n  console.log('args==>', [arg1, arg2], 'name==>', this.name)\n}\n\nvar bindFn = fn.bind(obj, 'arg1')\t\n\nbindFn('arg2') // args==> (2) [\"arg1\", \"arg2\"] name==> jeff\n```\n\n\n\n以上是bind的一个使用场景, 从上面代码中可以发现bind主要有以下几个作用:\n\n1. 改变了函数`fn`的 `this` 指向；\n2. 通过bind将参数传递给函数`fn`\n3. 返回一个新函数\n\n<!-- more -->\n\n*通过 `fn.bind(obj, 'arg1')\t` 将函数`fn`的this指向obj， 同时将 ‘arg1’ 作为 bind 的第二个参数传递给函数 `fn`， 并返回新函数 `bindFn`   。 此时调用 `bindFn`  并传入参数作为 fn 的第二个参数，执行结果依次是打印 arg1 、 arg2、jeff*\n\n\n\n### 实现一个bind\n\n\n\n如果要实现bind， 我们根据其使用方式总结出如下几点：\n\n1. 改变函数 this 的指向\n2. 返回一个新的函数\n3. 将传给 bind 的参传递给函数\n\n\n\n#### 改变this指向并返回新函数\n\n```javascript\nFunction.prototype.mybind = function (context) {\n\n    var self = this;\n    // 获取函数从第二个参数到最后一个参数\n    var args = Array.prototype.slice.call(arguments, 1);\n\n    return function () {\n        // 这个时候的arguments是指bind返回的函数传入的参数\n        var bindArgs = Array.prototype.slice.call(arguments);\n        return self.apply(context, args.concat(bindArgs));\n    }\n}\n\nvar obj = {name: 'zzw'}\n\nvar fn = function(arg1, arg2) {\n  console.log(this.name, 'args==>', arg1, arg2)\n}\n\n// 使用 mybind绑定函数 fn 到 obj对象 并传入第一个参数 'firstarg' 给函数 \nvar bindFn = fn.mybind(obj, 'firstarg')\n\n// 调用返回的函数 bindFn， 并传入参数 'secondarg'\nbindFn();\t// zzwargs==>firstargsecondarg\n```\n\n\n\n\n\n> ! -->  bind 返回的函数不仅可以直接执行， 还可以用作构造函数，同时还能传递参数，例如\n\n\n\n```javascript\nlet obj = {name: 'zzz'}\n\nvar fn = function(arg1, arg2) {\n  console.log(this.name)\n  console.log(arg1)\n  console.log(arg2)\n} \n\nfn.prototype.age = 20\n\nvar bindFn = fn.bind(obj)\n\n// 调用 new时, bind 的 this会失效. 传入的参数\nvar newFn = new bindFn('argnew')\t// undefined argnew undefined\n\nconsole.log(newFn.age) // 20\n\n\n```\n\n\n\n\n\n我们针对这个问题对之前的 `mybind` 函数进行一下优化\n\n如果调用构造函数的话， this会指向构造出来的对象， 对应上面的就是 `newFn`\n\n\n\n```javascript\nFunction.prototype.mybind = function (context) {\n\n    var self = this;\n    // 获取函数从第二个参数到最后一个参数\n    var args = Array.prototype.slice.call(arguments, 1);\n\t\t\n  \tvar fBound = function () {\n        // 这个时候的arguments是指bind返回的函数传入的参数\n        var bindArgs = Array.prototype.slice.call(arguments);\n      \t// 如果this指向fBound，则作为构造函数指向本身， 如果不是则作为普通函数指向要绑定的对象\n        return self.apply(this instanceof fBound ? this : context, args.concat(bindArgs));\n    }\n    // 继承 绑定函数 的原型\n    fBound.prototype = this.prototype\n    return fBound\n}\n\n// !优化一下  ⬇️⬇️ 防止修改原型时将原函数原型影响了\nFunction.prototype.mybind = function (context) {\n\n    var self = this;\n    // 获取函数从第二个参数到最后一个参数\n    var args = Array.prototype.slice.call(arguments, 1);\n\t\tvar fNOP = function () {};\n  \tvar fBound = function () {\n        // 这个时候的arguments是指bind返回的函数传入的参数\n        var bindArgs = Array.prototype.slice.call(arguments);\n        return self.apply(this instanceof fBound ? this : context, args.concat(bindArgs));\n    }\n    // 继承绑定函数的原型\n    fNOP.prototype = this.prototype;\n    fBound.prototype = new fNOP();\n    return fBound\n}\n\n```\n\n\n\n\n\n","slug":"JS bind的使用和实现原理剖析","published":1,"updated":"2021-03-30T06:56:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzgul1a8000nmmsfs6dzb2cq","content":"<h1 id=\"JS-bind的使用和实现原理剖析\"><a href=\"#JS-bind的使用和实现原理剖析\" class=\"headerlink\" title=\"JS bind的使用和实现原理剖析\"></a>JS bind的使用和实现原理剖析</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">name</span>: <span class=\"string\">'jeff'</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arg1, arg2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'args==&gt;'</span>, [arg1, arg2], <span class=\"string\">'name==&gt;'</span>, <span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> bindFn = fn.bind(obj, <span class=\"string\">'arg1'</span>)\t</span><br><span class=\"line\"></span><br><span class=\"line\">bindFn(<span class=\"string\">'arg2'</span>) <span class=\"comment\">// args==&gt; (2) [\"arg1\", \"arg2\"] name==&gt; jeff</span></span><br></pre></td></tr></table></figure>\n<p>以上是bind的一个使用场景, 从上面代码中可以发现bind主要有以下几个作用:</p>\n<ol>\n<li>改变了函数<code>fn</code>的 <code>this</code> 指向；</li>\n<li>通过bind将参数传递给函数<code>fn</code></li>\n<li>返回一个新函数</li>\n</ol>\n<a id=\"more\"></a>\n<p><em>通过 <code>fn.bind(obj, &#39;arg1&#39;)</code> 将函数<code>fn</code>的this指向obj， 同时将 ‘arg1’ 作为 bind 的第二个参数传递给函数 <code>fn</code>， 并返回新函数 <code>bindFn</code>   。 此时调用 <code>bindFn</code>  并传入参数作为 fn 的第二个参数，执行结果依次是打印 arg1 、 arg2、jeff</em></p>\n<h3 id=\"实现一个bind\"><a href=\"#实现一个bind\" class=\"headerlink\" title=\"实现一个bind\"></a>实现一个bind</h3><p>如果要实现bind， 我们根据其使用方式总结出如下几点：</p>\n<ol>\n<li>改变函数 this 的指向</li>\n<li>返回一个新的函数</li>\n<li>将传给 bind 的参传递给函数</li>\n</ol>\n<h4 id=\"改变this指向并返回新函数\"><a href=\"#改变this指向并返回新函数\" class=\"headerlink\" title=\"改变this指向并返回新函数\"></a>改变this指向并返回新函数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.mybind = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">context</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 获取函数从第二个参数到最后一个参数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这个时候的arguments是指bind返回的函数传入的参数</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> bindArgs = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.apply(context, args.concat(bindArgs));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">name</span>: <span class=\"string\">'zzw'</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arg1, arg2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name, <span class=\"string\">'args==&gt;'</span>, arg1, arg2)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 mybind绑定函数 fn 到 obj对象 并传入第一个参数 'firstarg' 给函数 </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> bindFn = fn.mybind(obj, <span class=\"string\">'firstarg'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用返回的函数 bindFn， 并传入参数 'secondarg'</span></span><br><span class=\"line\">bindFn();\t<span class=\"comment\">// zzwargs==&gt;firstargsecondarg</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>! –&gt;  bind 返回的函数不仅可以直接执行， 还可以用作构造函数，同时还能传递参数，例如</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">name</span>: <span class=\"string\">'zzz'</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arg1, arg2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(arg1)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(arg2)</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">fn.prototype.age = <span class=\"number\">20</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> bindFn = fn.bind(obj)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用 new时, bind 的 this会失效. 传入的参数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> newFn = <span class=\"keyword\">new</span> bindFn(<span class=\"string\">'argnew'</span>)\t<span class=\"comment\">// undefined argnew undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newFn.age) <span class=\"comment\">// 20</span></span><br></pre></td></tr></table></figure>\n<p>我们针对这个问题对之前的 <code>mybind</code> 函数进行一下优化</p>\n<p>如果调用构造函数的话， this会指向构造出来的对象， 对应上面的就是 <code>newFn</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.mybind = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">context</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 获取函数从第二个参数到最后一个参数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">  \t<span class=\"keyword\">var</span> fBound = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这个时候的arguments是指bind返回的函数传入的参数</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> bindArgs = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">      \t<span class=\"comment\">// 如果this指向fBound，则作为构造函数指向本身， 如果不是则作为普通函数指向要绑定的对象</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.apply(<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> fBound ? <span class=\"keyword\">this</span> : context, args.concat(bindArgs));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 继承 绑定函数 的原型</span></span><br><span class=\"line\">    fBound.prototype = <span class=\"keyword\">this</span>.prototype</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fBound</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// !优化一下  ⬇️⬇️ 防止修改原型时将原函数原型影响了</span></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.mybind = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">context</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 获取函数从第二个参数到最后一个参数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> fNOP = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">  \t<span class=\"keyword\">var</span> fBound = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这个时候的arguments是指bind返回的函数传入的参数</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> bindArgs = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.apply(<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> fBound ? <span class=\"keyword\">this</span> : context, args.concat(bindArgs));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 继承绑定函数的原型</span></span><br><span class=\"line\">    fNOP.prototype = <span class=\"keyword\">this</span>.prototype;</span><br><span class=\"line\">    fBound.prototype = <span class=\"keyword\">new</span> fNOP();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fBound</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"JS-bind的使用和实现原理剖析\"><a href=\"#JS-bind的使用和实现原理剖析\" class=\"headerlink\" title=\"JS bind的使用和实现原理剖析\"></a>JS bind的使用和实现原理剖析</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">name</span>: <span class=\"string\">'jeff'</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arg1, arg2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'args==&gt;'</span>, [arg1, arg2], <span class=\"string\">'name==&gt;'</span>, <span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> bindFn = fn.bind(obj, <span class=\"string\">'arg1'</span>)\t</span><br><span class=\"line\"></span><br><span class=\"line\">bindFn(<span class=\"string\">'arg2'</span>) <span class=\"comment\">// args==&gt; (2) [\"arg1\", \"arg2\"] name==&gt; jeff</span></span><br></pre></td></tr></table></figure>\n<p>以上是bind的一个使用场景, 从上面代码中可以发现bind主要有以下几个作用:</p>\n<ol>\n<li>改变了函数<code>fn</code>的 <code>this</code> 指向；</li>\n<li>通过bind将参数传递给函数<code>fn</code></li>\n<li>返回一个新函数</li>\n</ol>","more":"<p><em>通过 <code>fn.bind(obj, &#39;arg1&#39;)</code> 将函数<code>fn</code>的this指向obj， 同时将 ‘arg1’ 作为 bind 的第二个参数传递给函数 <code>fn</code>， 并返回新函数 <code>bindFn</code>   。 此时调用 <code>bindFn</code>  并传入参数作为 fn 的第二个参数，执行结果依次是打印 arg1 、 arg2、jeff</em></p>\n<h3 id=\"实现一个bind\"><a href=\"#实现一个bind\" class=\"headerlink\" title=\"实现一个bind\"></a>实现一个bind</h3><p>如果要实现bind， 我们根据其使用方式总结出如下几点：</p>\n<ol>\n<li>改变函数 this 的指向</li>\n<li>返回一个新的函数</li>\n<li>将传给 bind 的参传递给函数</li>\n</ol>\n<h4 id=\"改变this指向并返回新函数\"><a href=\"#改变this指向并返回新函数\" class=\"headerlink\" title=\"改变this指向并返回新函数\"></a>改变this指向并返回新函数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.mybind = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">context</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 获取函数从第二个参数到最后一个参数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这个时候的arguments是指bind返回的函数传入的参数</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> bindArgs = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.apply(context, args.concat(bindArgs));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">name</span>: <span class=\"string\">'zzw'</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arg1, arg2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name, <span class=\"string\">'args==&gt;'</span>, arg1, arg2)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 mybind绑定函数 fn 到 obj对象 并传入第一个参数 'firstarg' 给函数 </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> bindFn = fn.mybind(obj, <span class=\"string\">'firstarg'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用返回的函数 bindFn， 并传入参数 'secondarg'</span></span><br><span class=\"line\">bindFn();\t<span class=\"comment\">// zzwargs==&gt;firstargsecondarg</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>! –&gt;  bind 返回的函数不仅可以直接执行， 还可以用作构造函数，同时还能传递参数，例如</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">name</span>: <span class=\"string\">'zzz'</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arg1, arg2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(arg1)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(arg2)</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">fn.prototype.age = <span class=\"number\">20</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> bindFn = fn.bind(obj)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用 new时, bind 的 this会失效. 传入的参数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> newFn = <span class=\"keyword\">new</span> bindFn(<span class=\"string\">'argnew'</span>)\t<span class=\"comment\">// undefined argnew undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newFn.age) <span class=\"comment\">// 20</span></span><br></pre></td></tr></table></figure>\n<p>我们针对这个问题对之前的 <code>mybind</code> 函数进行一下优化</p>\n<p>如果调用构造函数的话， this会指向构造出来的对象， 对应上面的就是 <code>newFn</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.mybind = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">context</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 获取函数从第二个参数到最后一个参数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">  \t<span class=\"keyword\">var</span> fBound = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这个时候的arguments是指bind返回的函数传入的参数</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> bindArgs = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">      \t<span class=\"comment\">// 如果this指向fBound，则作为构造函数指向本身， 如果不是则作为普通函数指向要绑定的对象</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.apply(<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> fBound ? <span class=\"keyword\">this</span> : context, args.concat(bindArgs));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 继承 绑定函数 的原型</span></span><br><span class=\"line\">    fBound.prototype = <span class=\"keyword\">this</span>.prototype</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fBound</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// !优化一下  ⬇️⬇️ 防止修改原型时将原函数原型影响了</span></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.mybind = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">context</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 获取函数从第二个参数到最后一个参数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> fNOP = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">  \t<span class=\"keyword\">var</span> fBound = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这个时候的arguments是指bind返回的函数传入的参数</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> bindArgs = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.apply(<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> fBound ? <span class=\"keyword\">this</span> : context, args.concat(bindArgs));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 继承绑定函数的原型</span></span><br><span class=\"line\">    fNOP.prototype = <span class=\"keyword\">this</span>.prototype;</span><br><span class=\"line\">    fBound.prototype = <span class=\"keyword\">new</span> fNOP();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fBound</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"layout":"threejs","title":"ThreeJs基础概念","date":"2021-03-30T03:53:10.000Z","_content":"\n\n\n# three.js  基础概念\n\n\n\n> Three.js 是基于webgl的二次封装。将webgl繁杂的api封装成较为简洁、面向对象的方式。threejs提供了几个基本对象让我们很方便的构建一个3D应用，分别是 **场景** 、 **相机**、 **渲染器** 。\n>\n> 场景就是呈现图形画面的空间、相机可以理解为观察拍摄图形画面的方式、渲染器则是将画面渲染到屏幕上。\n>\n> 我们将从以上三个对象出发，了解threejs如何绘制一个基础的3D图形\n\n\n\n<!-- more -->\n\n### 场景、相机\n\n\n\n```javascript\nconst scene = new THREE.Scene();\nconst camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );\n```\n\n\n\n以上代码新建了一个场景和透视相机，主要看下相机这一部分。\n\n\n\n#### 相机详解\n\n​\tthree.js 内置了多种相机，使用最普遍的是透视相机（PerspectiveCamera）和正交相机 （OrthographicCamera）\n\n​\t相机都是使用右手坐标系：\n\n​\t![](https://bkimg.cdn.bcebos.com/pic/08f790529822720e84007b1870cb0a46f31fab02?x-bce-process=image/resize,m_lfit,w_640,limit_1)\n\n\n\n##### 透视相机\n\n透视相机观察的效果更人眼一样，观察物体时是 **近大远小** 的效果， 如下图所示：\n\n![](https://user-gold-cdn.xitu.io/2018/12/25/167e5f89cca8dd1f?imageView2/0/w/1280/h/960/format/)\n\n\n\n`new THREE.PerspectiveCamera(fov, aspect, near, far)` 该api为新建一个透视相机，相应的参数分别代表\n\n- `fov`表示视角；\n- `aspect`表示裁切面宽高比；\n- `near`表示近平面距离；\n- `far`表示远平面距离；\n\n\n\n> 只有离相机的距离大于`near`且小于`far`，另外还得在相机视角(fov)内的物体，才能被相机观察到从而被渲染器渲染出来；\n\n\n\n##### 正交相机\n\n正交相机观测的物体不管离物体距离远近，渲染出来都是一个大小\n\n\n\n![](https://www.ituring.com.cn/download/01YiZI4zr57Q.small)\n\n\n\n`THREE.OrthographicCamera(left, right, top, bottom, near, far)`\n\n这六个参数分别代表正交投影照相机拍摄到的空间的六个面的位置，这六个面围成一个长方体，我们称其为**视景体**（Frustum）。只有在视景体内部（下图中的灰色部分）的物体才可能显示在屏幕上，而视景体外的物体会在显示之前被裁减掉。\n\n为了保持照相机的横竖比例，需要保证`(right - left)`与`(top - bottom)`的比例与Canvas宽度与高度的比例一致。\n\n同时`near`与`far`都是指到照相机位置在深度平面的位置。\n\n\n\n##### 相机位置\n\n相机的`position`属性决定其位置, 参数分别为 x、y、z。   `camera.position.set(x, y, z)`\n\n\n\n相机的up属性决定相机的正视方向，三个参数分别为x、y、z三个维度的向量。   `camera.up.set(0, 1, 0)`  // y轴正向，人正立观察对象\n\n\n\n`Vector3`对象。   `Vector3( x : Float, y : Float, z : Float )`  这个属性既可以表示三维空间中的`点`也可以表示`向量`\n\n\n\n相机还有很重要的一个属性`视点`需要设置，也就是人眼的`焦点`，调用`lookAt`方法即可，参数为`Vector3`对象，`点(0, 0, 0)`表示`坐标系原点`。\n\n\n\n\n\n### 渲染器\n\n`视网膜`的作用是`成像`，在 ThreeJS 框架中的`渲染器`起到相同的作用\n\nThreejs提供了几种渲染器，最常用的是 `WebGLRenderer` , 其他的视情况看兼容性而定。\n\n```javascript\nconst renderer = new THREE.WebGLRenderer();\nrenderer.setSize(window.innerWidth, window.innerHeight); //设置渲染器宽度和高度\ndocument.body.appendChild(renderer.domElement); // 将渲染器防止到body容器下\n```\n\n\n\n\n\n### 物体\n\nThreejs封装了多种几何体，以 `BoxGeometry` 举例，可以创建正方体或者长方体\n\n```javascript\nvar geometry = new THREE.BoxGeometry( 100, 100, 100);\nvar material = new THREE.MeshLambertMaterial( {color: 0xff0000} );\ncube = new THREE.Mesh( geometry, material );\ncube.position.set(0,0,0);\n```\n\n\n\n`BoxGeometry`对象时只用了前三个参数，分别表示`长`、`宽`、`高`；但其实该对象还有三个参数\n\n```javascript\nBoxGeometry(width, height, depth, widthSegments, heightSegments, depthSegments)\n```\n\n分别表示每个面由多少三角形组成。在webGL中，最基础的就是`点`、`线`、`三角形` ，threejs中负责的图形都是由这些组成的。上述生成的`三角形网格` 组成整个正方体轮廓，此时我们还需要给正方体表面添加`材质` 。\n\n上面例子中使用的是 `MeshLambertMaterial`  兰伯特材质, 然后设置颜色为 `0xff0000`\n\n\n\n接着将`材质`和`轮廓` 结合在一起就生成了正方体，并设置其中心点在坐标系原点。\n\n然后将物体添加到场景中 `scene.add(cube)`\n\n\n\n### 总结\n\n\n\nthreejs 主要由渲染器、场景、相机组成。通过配置好场景、相机，然后将生成的物体放置在场景中，最后通过渲染器生成到屏幕上，就完成一个3D图形了。\n\n下面是threejs完整代码\n\n```javascript\nconst scene = new THREE.Scene(); // 创建场景\nconst camera = new THREE.PerspectiveCamera(75,  window.innerWidth / window.innerHeight,  0.1,  1000); // 创建相机\n\n// 创建渲染器\nconst renderer = new THREE.WebGLRenderer();\nrenderer.setSize(window.innerWidth, window.innerHeight); //设置渲染器宽度和高度\ndocument.body.appendChild(renderer.domElement);\n\n// 设置相机\nvar origPoint = new THREE.Vector3(0, 0, 0); //原点\ncamera.position.set(20, 40, 60); //设置相机位置\ncamera.up.set(0, 1, 0); //设置相机正方向 y正方向向量\ncamera.lookAt(origPoint);//设置相机视点\n\n// 设置物体\nconst geometry = new THREE.BoxGeometry(); // 生成几何体轮廓\nconst material = new THREE.MeshBasicMaterial({ color: 0x66ccff }); // 生成几何体材质\nconst cube = new THREE.Mesh(geometry, material); // 轮廓、材质生成立方体\nscene.add(cube); // 添加到场景中\n\n// 渲染\nrenderer.render(scene, camera);\n```\n\n","source":"_posts/ThreeJs基础概念.md","raw":"---\nlayout: threejs\ntitle: ThreeJs基础概念\ndate: 2021-03-30 11:53:10\ntags:\n - ThreeJs\n - JavaScript\ncategories:\n - ThreeJs\n---\n\n\n\n# three.js  基础概念\n\n\n\n> Three.js 是基于webgl的二次封装。将webgl繁杂的api封装成较为简洁、面向对象的方式。threejs提供了几个基本对象让我们很方便的构建一个3D应用，分别是 **场景** 、 **相机**、 **渲染器** 。\n>\n> 场景就是呈现图形画面的空间、相机可以理解为观察拍摄图形画面的方式、渲染器则是将画面渲染到屏幕上。\n>\n> 我们将从以上三个对象出发，了解threejs如何绘制一个基础的3D图形\n\n\n\n<!-- more -->\n\n### 场景、相机\n\n\n\n```javascript\nconst scene = new THREE.Scene();\nconst camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );\n```\n\n\n\n以上代码新建了一个场景和透视相机，主要看下相机这一部分。\n\n\n\n#### 相机详解\n\n​\tthree.js 内置了多种相机，使用最普遍的是透视相机（PerspectiveCamera）和正交相机 （OrthographicCamera）\n\n​\t相机都是使用右手坐标系：\n\n​\t![](https://bkimg.cdn.bcebos.com/pic/08f790529822720e84007b1870cb0a46f31fab02?x-bce-process=image/resize,m_lfit,w_640,limit_1)\n\n\n\n##### 透视相机\n\n透视相机观察的效果更人眼一样，观察物体时是 **近大远小** 的效果， 如下图所示：\n\n![](https://user-gold-cdn.xitu.io/2018/12/25/167e5f89cca8dd1f?imageView2/0/w/1280/h/960/format/)\n\n\n\n`new THREE.PerspectiveCamera(fov, aspect, near, far)` 该api为新建一个透视相机，相应的参数分别代表\n\n- `fov`表示视角；\n- `aspect`表示裁切面宽高比；\n- `near`表示近平面距离；\n- `far`表示远平面距离；\n\n\n\n> 只有离相机的距离大于`near`且小于`far`，另外还得在相机视角(fov)内的物体，才能被相机观察到从而被渲染器渲染出来；\n\n\n\n##### 正交相机\n\n正交相机观测的物体不管离物体距离远近，渲染出来都是一个大小\n\n\n\n![](https://www.ituring.com.cn/download/01YiZI4zr57Q.small)\n\n\n\n`THREE.OrthographicCamera(left, right, top, bottom, near, far)`\n\n这六个参数分别代表正交投影照相机拍摄到的空间的六个面的位置，这六个面围成一个长方体，我们称其为**视景体**（Frustum）。只有在视景体内部（下图中的灰色部分）的物体才可能显示在屏幕上，而视景体外的物体会在显示之前被裁减掉。\n\n为了保持照相机的横竖比例，需要保证`(right - left)`与`(top - bottom)`的比例与Canvas宽度与高度的比例一致。\n\n同时`near`与`far`都是指到照相机位置在深度平面的位置。\n\n\n\n##### 相机位置\n\n相机的`position`属性决定其位置, 参数分别为 x、y、z。   `camera.position.set(x, y, z)`\n\n\n\n相机的up属性决定相机的正视方向，三个参数分别为x、y、z三个维度的向量。   `camera.up.set(0, 1, 0)`  // y轴正向，人正立观察对象\n\n\n\n`Vector3`对象。   `Vector3( x : Float, y : Float, z : Float )`  这个属性既可以表示三维空间中的`点`也可以表示`向量`\n\n\n\n相机还有很重要的一个属性`视点`需要设置，也就是人眼的`焦点`，调用`lookAt`方法即可，参数为`Vector3`对象，`点(0, 0, 0)`表示`坐标系原点`。\n\n\n\n\n\n### 渲染器\n\n`视网膜`的作用是`成像`，在 ThreeJS 框架中的`渲染器`起到相同的作用\n\nThreejs提供了几种渲染器，最常用的是 `WebGLRenderer` , 其他的视情况看兼容性而定。\n\n```javascript\nconst renderer = new THREE.WebGLRenderer();\nrenderer.setSize(window.innerWidth, window.innerHeight); //设置渲染器宽度和高度\ndocument.body.appendChild(renderer.domElement); // 将渲染器防止到body容器下\n```\n\n\n\n\n\n### 物体\n\nThreejs封装了多种几何体，以 `BoxGeometry` 举例，可以创建正方体或者长方体\n\n```javascript\nvar geometry = new THREE.BoxGeometry( 100, 100, 100);\nvar material = new THREE.MeshLambertMaterial( {color: 0xff0000} );\ncube = new THREE.Mesh( geometry, material );\ncube.position.set(0,0,0);\n```\n\n\n\n`BoxGeometry`对象时只用了前三个参数，分别表示`长`、`宽`、`高`；但其实该对象还有三个参数\n\n```javascript\nBoxGeometry(width, height, depth, widthSegments, heightSegments, depthSegments)\n```\n\n分别表示每个面由多少三角形组成。在webGL中，最基础的就是`点`、`线`、`三角形` ，threejs中负责的图形都是由这些组成的。上述生成的`三角形网格` 组成整个正方体轮廓，此时我们还需要给正方体表面添加`材质` 。\n\n上面例子中使用的是 `MeshLambertMaterial`  兰伯特材质, 然后设置颜色为 `0xff0000`\n\n\n\n接着将`材质`和`轮廓` 结合在一起就生成了正方体，并设置其中心点在坐标系原点。\n\n然后将物体添加到场景中 `scene.add(cube)`\n\n\n\n### 总结\n\n\n\nthreejs 主要由渲染器、场景、相机组成。通过配置好场景、相机，然后将生成的物体放置在场景中，最后通过渲染器生成到屏幕上，就完成一个3D图形了。\n\n下面是threejs完整代码\n\n```javascript\nconst scene = new THREE.Scene(); // 创建场景\nconst camera = new THREE.PerspectiveCamera(75,  window.innerWidth / window.innerHeight,  0.1,  1000); // 创建相机\n\n// 创建渲染器\nconst renderer = new THREE.WebGLRenderer();\nrenderer.setSize(window.innerWidth, window.innerHeight); //设置渲染器宽度和高度\ndocument.body.appendChild(renderer.domElement);\n\n// 设置相机\nvar origPoint = new THREE.Vector3(0, 0, 0); //原点\ncamera.position.set(20, 40, 60); //设置相机位置\ncamera.up.set(0, 1, 0); //设置相机正方向 y正方向向量\ncamera.lookAt(origPoint);//设置相机视点\n\n// 设置物体\nconst geometry = new THREE.BoxGeometry(); // 生成几何体轮廓\nconst material = new THREE.MeshBasicMaterial({ color: 0x66ccff }); // 生成几何体材质\nconst cube = new THREE.Mesh(geometry, material); // 轮廓、材质生成立方体\nscene.add(cube); // 添加到场景中\n\n// 渲染\nrenderer.render(scene, camera);\n```\n\n","slug":"ThreeJs基础概念","published":1,"updated":"2021-03-30T06:57:27.000Z","comments":1,"photos":[],"link":"","_id":"ckzgul1ac000qmmsfhra09wsw","content":"<h1 id=\"three-js-基础概念\"><a href=\"#three-js-基础概念\" class=\"headerlink\" title=\"three.js  基础概念\"></a>three.js  基础概念</h1><blockquote>\n<p>Three.js 是基于webgl的二次封装。将webgl繁杂的api封装成较为简洁、面向对象的方式。threejs提供了几个基本对象让我们很方便的构建一个3D应用，分别是 <strong>场景</strong> 、 <strong>相机</strong>、 <strong>渲染器</strong> 。</p>\n<p>场景就是呈现图形画面的空间、相机可以理解为观察拍摄图形画面的方式、渲染器则是将画面渲染到屏幕上。</p>\n<p>我们将从以上三个对象出发，了解threejs如何绘制一个基础的3D图形</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"场景、相机\"><a href=\"#场景、相机\" class=\"headerlink\" title=\"场景、相机\"></a>场景、相机</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> scene = <span class=\"keyword\">new</span> THREE.Scene();</span><br><span class=\"line\"><span class=\"keyword\">const</span> camera = <span class=\"keyword\">new</span> THREE.PerspectiveCamera( <span class=\"number\">75</span>, <span class=\"built_in\">window</span>.innerWidth / <span class=\"built_in\">window</span>.innerHeight, <span class=\"number\">0.1</span>, <span class=\"number\">1000</span> );</span><br></pre></td></tr></table></figure>\n<p>以上代码新建了一个场景和透视相机，主要看下相机这一部分。</p>\n<h4 id=\"相机详解\"><a href=\"#相机详解\" class=\"headerlink\" title=\"相机详解\"></a>相机详解</h4><p>​    three.js 内置了多种相机，使用最普遍的是透视相机（PerspectiveCamera）和正交相机 （OrthographicCamera）</p>\n<p>​    相机都是使用右手坐标系：</p>\n<p>​    <img src=\"https://bkimg.cdn.bcebos.com/pic/08f790529822720e84007b1870cb0a46f31fab02?x-bce-process=image/resize,m_lfit,w_640,limit_1\" alt=\"\"></p>\n<h5 id=\"透视相机\"><a href=\"#透视相机\" class=\"headerlink\" title=\"透视相机\"></a>透视相机</h5><p>透视相机观察的效果更人眼一样，观察物体时是 <strong>近大远小</strong> 的效果， 如下图所示：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/12/25/167e5f89cca8dd1f?imageView2/0/w/1280/h/960/format/\" alt=\"\"></p>\n<p><code>new THREE.PerspectiveCamera(fov, aspect, near, far)</code> 该api为新建一个透视相机，相应的参数分别代表</p>\n<ul>\n<li><code>fov</code>表示视角；</li>\n<li><code>aspect</code>表示裁切面宽高比；</li>\n<li><code>near</code>表示近平面距离；</li>\n<li><code>far</code>表示远平面距离；</li>\n</ul>\n<blockquote>\n<p>只有离相机的距离大于<code>near</code>且小于<code>far</code>，另外还得在相机视角(fov)内的物体，才能被相机观察到从而被渲染器渲染出来；</p>\n</blockquote>\n<h5 id=\"正交相机\"><a href=\"#正交相机\" class=\"headerlink\" title=\"正交相机\"></a>正交相机</h5><p>正交相机观测的物体不管离物体距离远近，渲染出来都是一个大小</p>\n<p><img src=\"https://www.ituring.com.cn/download/01YiZI4zr57Q.small\" alt=\"\"></p>\n<p><code>THREE.OrthographicCamera(left, right, top, bottom, near, far)</code></p>\n<p>这六个参数分别代表正交投影照相机拍摄到的空间的六个面的位置，这六个面围成一个长方体，我们称其为<strong>视景体</strong>（Frustum）。只有在视景体内部（下图中的灰色部分）的物体才可能显示在屏幕上，而视景体外的物体会在显示之前被裁减掉。</p>\n<p>为了保持照相机的横竖比例，需要保证<code>(right - left)</code>与<code>(top - bottom)</code>的比例与Canvas宽度与高度的比例一致。</p>\n<p>同时<code>near</code>与<code>far</code>都是指到照相机位置在深度平面的位置。</p>\n<h5 id=\"相机位置\"><a href=\"#相机位置\" class=\"headerlink\" title=\"相机位置\"></a>相机位置</h5><p>相机的<code>position</code>属性决定其位置, 参数分别为 x、y、z。   <code>camera.position.set(x, y, z)</code></p>\n<p>相机的up属性决定相机的正视方向，三个参数分别为x、y、z三个维度的向量。   <code>camera.up.set(0, 1, 0)</code>  // y轴正向，人正立观察对象</p>\n<p><code>Vector3</code>对象。   <code>Vector3( x : Float, y : Float, z : Float )</code>  这个属性既可以表示三维空间中的<code>点</code>也可以表示<code>向量</code></p>\n<p>相机还有很重要的一个属性<code>视点</code>需要设置，也就是人眼的<code>焦点</code>，调用<code>lookAt</code>方法即可，参数为<code>Vector3</code>对象，<code>点(0, 0, 0)</code>表示<code>坐标系原点</code>。</p>\n<h3 id=\"渲染器\"><a href=\"#渲染器\" class=\"headerlink\" title=\"渲染器\"></a>渲染器</h3><p><code>视网膜</code>的作用是<code>成像</code>，在 ThreeJS 框架中的<code>渲染器</code>起到相同的作用</p>\n<p>Threejs提供了几种渲染器，最常用的是 <code>WebGLRenderer</code> , 其他的视情况看兼容性而定。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> renderer = <span class=\"keyword\">new</span> THREE.WebGLRenderer();</span><br><span class=\"line\">renderer.setSize(<span class=\"built_in\">window</span>.innerWidth, <span class=\"built_in\">window</span>.innerHeight); <span class=\"comment\">//设置渲染器宽度和高度</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(renderer.domElement); <span class=\"comment\">// 将渲染器防止到body容器下</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"物体\"><a href=\"#物体\" class=\"headerlink\" title=\"物体\"></a>物体</h3><p>Threejs封装了多种几何体，以 <code>BoxGeometry</code> 举例，可以创建正方体或者长方体</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> geometry = <span class=\"keyword\">new</span> THREE.BoxGeometry( <span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> material = <span class=\"keyword\">new</span> THREE.MeshLambertMaterial( &#123;<span class=\"attr\">color</span>: <span class=\"number\">0xff0000</span>&#125; );</span><br><span class=\"line\">cube = <span class=\"keyword\">new</span> THREE.Mesh( geometry, material );</span><br><span class=\"line\">cube.position.set(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<p><code>BoxGeometry</code>对象时只用了前三个参数，分别表示<code>长</code>、<code>宽</code>、<code>高</code>；但其实该对象还有三个参数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BoxGeometry(width, height, depth, widthSegments, heightSegments, depthSegments)</span><br></pre></td></tr></table></figure>\n<p>分别表示每个面由多少三角形组成。在webGL中，最基础的就是<code>点</code>、<code>线</code>、<code>三角形</code> ，threejs中负责的图形都是由这些组成的。上述生成的<code>三角形网格</code> 组成整个正方体轮廓，此时我们还需要给正方体表面添加<code>材质</code> 。</p>\n<p>上面例子中使用的是 <code>MeshLambertMaterial</code>  兰伯特材质, 然后设置颜色为 <code>0xff0000</code></p>\n<p>接着将<code>材质</code>和<code>轮廓</code> 结合在一起就生成了正方体，并设置其中心点在坐标系原点。</p>\n<p>然后将物体添加到场景中 <code>scene.add(cube)</code></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>threejs 主要由渲染器、场景、相机组成。通过配置好场景、相机，然后将生成的物体放置在场景中，最后通过渲染器生成到屏幕上，就完成一个3D图形了。</p>\n<p>下面是threejs完整代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> scene = <span class=\"keyword\">new</span> THREE.Scene(); <span class=\"comment\">// 创建场景</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> camera = <span class=\"keyword\">new</span> THREE.PerspectiveCamera(<span class=\"number\">75</span>,  <span class=\"built_in\">window</span>.innerWidth / <span class=\"built_in\">window</span>.innerHeight,  <span class=\"number\">0.1</span>,  <span class=\"number\">1000</span>); <span class=\"comment\">// 创建相机</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建渲染器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> renderer = <span class=\"keyword\">new</span> THREE.WebGLRenderer();</span><br><span class=\"line\">renderer.setSize(<span class=\"built_in\">window</span>.innerWidth, <span class=\"built_in\">window</span>.innerHeight); <span class=\"comment\">//设置渲染器宽度和高度</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(renderer.domElement);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置相机</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> origPoint = <span class=\"keyword\">new</span> THREE.Vector3(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>); <span class=\"comment\">//原点</span></span><br><span class=\"line\">camera.position.set(<span class=\"number\">20</span>, <span class=\"number\">40</span>, <span class=\"number\">60</span>); <span class=\"comment\">//设置相机位置</span></span><br><span class=\"line\">camera.up.set(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>); <span class=\"comment\">//设置相机正方向 y正方向向量</span></span><br><span class=\"line\">camera.lookAt(origPoint);<span class=\"comment\">//设置相机视点</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置物体</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> geometry = <span class=\"keyword\">new</span> THREE.BoxGeometry(); <span class=\"comment\">// 生成几何体轮廓</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> material = <span class=\"keyword\">new</span> THREE.MeshBasicMaterial(&#123; <span class=\"attr\">color</span>: <span class=\"number\">0x66ccff</span> &#125;); <span class=\"comment\">// 生成几何体材质</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> cube = <span class=\"keyword\">new</span> THREE.Mesh(geometry, material); <span class=\"comment\">// 轮廓、材质生成立方体</span></span><br><span class=\"line\">scene.add(cube); <span class=\"comment\">// 添加到场景中</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 渲染</span></span><br><span class=\"line\">renderer.render(scene, camera);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"three-js-基础概念\"><a href=\"#three-js-基础概念\" class=\"headerlink\" title=\"three.js  基础概念\"></a>three.js  基础概念</h1><blockquote>\n<p>Three.js 是基于webgl的二次封装。将webgl繁杂的api封装成较为简洁、面向对象的方式。threejs提供了几个基本对象让我们很方便的构建一个3D应用，分别是 <strong>场景</strong> 、 <strong>相机</strong>、 <strong>渲染器</strong> 。</p>\n<p>场景就是呈现图形画面的空间、相机可以理解为观察拍摄图形画面的方式、渲染器则是将画面渲染到屏幕上。</p>\n<p>我们将从以上三个对象出发，了解threejs如何绘制一个基础的3D图形</p>\n</blockquote>","more":"<h3 id=\"场景、相机\"><a href=\"#场景、相机\" class=\"headerlink\" title=\"场景、相机\"></a>场景、相机</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> scene = <span class=\"keyword\">new</span> THREE.Scene();</span><br><span class=\"line\"><span class=\"keyword\">const</span> camera = <span class=\"keyword\">new</span> THREE.PerspectiveCamera( <span class=\"number\">75</span>, <span class=\"built_in\">window</span>.innerWidth / <span class=\"built_in\">window</span>.innerHeight, <span class=\"number\">0.1</span>, <span class=\"number\">1000</span> );</span><br></pre></td></tr></table></figure>\n<p>以上代码新建了一个场景和透视相机，主要看下相机这一部分。</p>\n<h4 id=\"相机详解\"><a href=\"#相机详解\" class=\"headerlink\" title=\"相机详解\"></a>相机详解</h4><p>​    three.js 内置了多种相机，使用最普遍的是透视相机（PerspectiveCamera）和正交相机 （OrthographicCamera）</p>\n<p>​    相机都是使用右手坐标系：</p>\n<p>​    <img src=\"https://bkimg.cdn.bcebos.com/pic/08f790529822720e84007b1870cb0a46f31fab02?x-bce-process=image/resize,m_lfit,w_640,limit_1\" alt=\"\"></p>\n<h5 id=\"透视相机\"><a href=\"#透视相机\" class=\"headerlink\" title=\"透视相机\"></a>透视相机</h5><p>透视相机观察的效果更人眼一样，观察物体时是 <strong>近大远小</strong> 的效果， 如下图所示：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/12/25/167e5f89cca8dd1f?imageView2/0/w/1280/h/960/format/\" alt=\"\"></p>\n<p><code>new THREE.PerspectiveCamera(fov, aspect, near, far)</code> 该api为新建一个透视相机，相应的参数分别代表</p>\n<ul>\n<li><code>fov</code>表示视角；</li>\n<li><code>aspect</code>表示裁切面宽高比；</li>\n<li><code>near</code>表示近平面距离；</li>\n<li><code>far</code>表示远平面距离；</li>\n</ul>\n<blockquote>\n<p>只有离相机的距离大于<code>near</code>且小于<code>far</code>，另外还得在相机视角(fov)内的物体，才能被相机观察到从而被渲染器渲染出来；</p>\n</blockquote>\n<h5 id=\"正交相机\"><a href=\"#正交相机\" class=\"headerlink\" title=\"正交相机\"></a>正交相机</h5><p>正交相机观测的物体不管离物体距离远近，渲染出来都是一个大小</p>\n<p><img src=\"https://www.ituring.com.cn/download/01YiZI4zr57Q.small\" alt=\"\"></p>\n<p><code>THREE.OrthographicCamera(left, right, top, bottom, near, far)</code></p>\n<p>这六个参数分别代表正交投影照相机拍摄到的空间的六个面的位置，这六个面围成一个长方体，我们称其为<strong>视景体</strong>（Frustum）。只有在视景体内部（下图中的灰色部分）的物体才可能显示在屏幕上，而视景体外的物体会在显示之前被裁减掉。</p>\n<p>为了保持照相机的横竖比例，需要保证<code>(right - left)</code>与<code>(top - bottom)</code>的比例与Canvas宽度与高度的比例一致。</p>\n<p>同时<code>near</code>与<code>far</code>都是指到照相机位置在深度平面的位置。</p>\n<h5 id=\"相机位置\"><a href=\"#相机位置\" class=\"headerlink\" title=\"相机位置\"></a>相机位置</h5><p>相机的<code>position</code>属性决定其位置, 参数分别为 x、y、z。   <code>camera.position.set(x, y, z)</code></p>\n<p>相机的up属性决定相机的正视方向，三个参数分别为x、y、z三个维度的向量。   <code>camera.up.set(0, 1, 0)</code>  // y轴正向，人正立观察对象</p>\n<p><code>Vector3</code>对象。   <code>Vector3( x : Float, y : Float, z : Float )</code>  这个属性既可以表示三维空间中的<code>点</code>也可以表示<code>向量</code></p>\n<p>相机还有很重要的一个属性<code>视点</code>需要设置，也就是人眼的<code>焦点</code>，调用<code>lookAt</code>方法即可，参数为<code>Vector3</code>对象，<code>点(0, 0, 0)</code>表示<code>坐标系原点</code>。</p>\n<h3 id=\"渲染器\"><a href=\"#渲染器\" class=\"headerlink\" title=\"渲染器\"></a>渲染器</h3><p><code>视网膜</code>的作用是<code>成像</code>，在 ThreeJS 框架中的<code>渲染器</code>起到相同的作用</p>\n<p>Threejs提供了几种渲染器，最常用的是 <code>WebGLRenderer</code> , 其他的视情况看兼容性而定。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> renderer = <span class=\"keyword\">new</span> THREE.WebGLRenderer();</span><br><span class=\"line\">renderer.setSize(<span class=\"built_in\">window</span>.innerWidth, <span class=\"built_in\">window</span>.innerHeight); <span class=\"comment\">//设置渲染器宽度和高度</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(renderer.domElement); <span class=\"comment\">// 将渲染器防止到body容器下</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"物体\"><a href=\"#物体\" class=\"headerlink\" title=\"物体\"></a>物体</h3><p>Threejs封装了多种几何体，以 <code>BoxGeometry</code> 举例，可以创建正方体或者长方体</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> geometry = <span class=\"keyword\">new</span> THREE.BoxGeometry( <span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> material = <span class=\"keyword\">new</span> THREE.MeshLambertMaterial( &#123;<span class=\"attr\">color</span>: <span class=\"number\">0xff0000</span>&#125; );</span><br><span class=\"line\">cube = <span class=\"keyword\">new</span> THREE.Mesh( geometry, material );</span><br><span class=\"line\">cube.position.set(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<p><code>BoxGeometry</code>对象时只用了前三个参数，分别表示<code>长</code>、<code>宽</code>、<code>高</code>；但其实该对象还有三个参数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BoxGeometry(width, height, depth, widthSegments, heightSegments, depthSegments)</span><br></pre></td></tr></table></figure>\n<p>分别表示每个面由多少三角形组成。在webGL中，最基础的就是<code>点</code>、<code>线</code>、<code>三角形</code> ，threejs中负责的图形都是由这些组成的。上述生成的<code>三角形网格</code> 组成整个正方体轮廓，此时我们还需要给正方体表面添加<code>材质</code> 。</p>\n<p>上面例子中使用的是 <code>MeshLambertMaterial</code>  兰伯特材质, 然后设置颜色为 <code>0xff0000</code></p>\n<p>接着将<code>材质</code>和<code>轮廓</code> 结合在一起就生成了正方体，并设置其中心点在坐标系原点。</p>\n<p>然后将物体添加到场景中 <code>scene.add(cube)</code></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>threejs 主要由渲染器、场景、相机组成。通过配置好场景、相机，然后将生成的物体放置在场景中，最后通过渲染器生成到屏幕上，就完成一个3D图形了。</p>\n<p>下面是threejs完整代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> scene = <span class=\"keyword\">new</span> THREE.Scene(); <span class=\"comment\">// 创建场景</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> camera = <span class=\"keyword\">new</span> THREE.PerspectiveCamera(<span class=\"number\">75</span>,  <span class=\"built_in\">window</span>.innerWidth / <span class=\"built_in\">window</span>.innerHeight,  <span class=\"number\">0.1</span>,  <span class=\"number\">1000</span>); <span class=\"comment\">// 创建相机</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建渲染器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> renderer = <span class=\"keyword\">new</span> THREE.WebGLRenderer();</span><br><span class=\"line\">renderer.setSize(<span class=\"built_in\">window</span>.innerWidth, <span class=\"built_in\">window</span>.innerHeight); <span class=\"comment\">//设置渲染器宽度和高度</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(renderer.domElement);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置相机</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> origPoint = <span class=\"keyword\">new</span> THREE.Vector3(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>); <span class=\"comment\">//原点</span></span><br><span class=\"line\">camera.position.set(<span class=\"number\">20</span>, <span class=\"number\">40</span>, <span class=\"number\">60</span>); <span class=\"comment\">//设置相机位置</span></span><br><span class=\"line\">camera.up.set(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>); <span class=\"comment\">//设置相机正方向 y正方向向量</span></span><br><span class=\"line\">camera.lookAt(origPoint);<span class=\"comment\">//设置相机视点</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置物体</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> geometry = <span class=\"keyword\">new</span> THREE.BoxGeometry(); <span class=\"comment\">// 生成几何体轮廓</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> material = <span class=\"keyword\">new</span> THREE.MeshBasicMaterial(&#123; <span class=\"attr\">color</span>: <span class=\"number\">0x66ccff</span> &#125;); <span class=\"comment\">// 生成几何体材质</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> cube = <span class=\"keyword\">new</span> THREE.Mesh(geometry, material); <span class=\"comment\">// 轮廓、材质生成立方体</span></span><br><span class=\"line\">scene.add(cube); <span class=\"comment\">// 添加到场景中</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 渲染</span></span><br><span class=\"line\">renderer.render(scene, camera);</span><br></pre></td></tr></table></figure>"},{"title":"js 的浅拷贝和深拷贝","date":"2020-11-04T15:32:23.000Z","_content":"\n# js 的浅拷贝和深拷贝\n\n\n\n### 深、浅拷贝的区别\n\n> 浅拷贝只能拷贝对象第一层，如果对象之中还嵌套有对象则不能实现深层对象的拷贝\n>\n> 深拷贝可以实现对象深层次的拷贝，怎样修改拷贝后的对象，原对象都不会改变\n\n\n\n\n\n\n#### 浅拷贝\n\n\n\n\n\n```javascript\n// 实现\nfunction clone(obj) {\n  let obj2 = Array.isArray(obj) ? [] : {}\n  if(obj && typeof obj === 'object') {\n  \tfor(let item in obj) {\n    \tobj2[item] = obj[item]\n  \t}  \n  } else {\n    obj2 = obj\n  }\n  return obj2\n}\n\n// 使用\nlet obj1 = {a: 1, b: {c: 123}}\nlet obj2 = clone(obj1)\nobj2.b.c = 6666\nobj1.b.c // 6666\t修改拷贝对象后，原对象深层的对象还是改变了\n```\n\n\n\n\n\n\n\n### 深拷贝\n\n\n\n\n\n```javascript\n// 实现\nfunction deepClone(obj) {\n  let obj2 = Array.isArray(obj) ? [] : {}\n  if(obj && typeof obj === 'object') {\n  \tfor(let item in obj) {\n    \tobj2[item] = deepClone(obj[item])\t// 递归遍历属性是否为对象\n  \t}  \n  } else {\n    obj2 = obj\n  }\n  return obj2\n}\n\n// 使用\nlet obj1 = {a: 1, b: {c: 123}}\nlet obj2 = clone(obj1)\nobj2.b.c = 6666\nobj1.b.c // 123\t修改拷贝对象后，原对象深层的对象没有改变，说明对深层的对象也进行了拷贝\n```\n\n\n\n","source":"_posts/js 的浅拷贝和深拷贝.md","raw":"---\ntitle: js 的浅拷贝和深拷贝\ndate: 2020-11-04 23:32:23\ncategories:\n - javascript\ntags:\n - javascript\n---\n\n# js 的浅拷贝和深拷贝\n\n\n\n### 深、浅拷贝的区别\n\n> 浅拷贝只能拷贝对象第一层，如果对象之中还嵌套有对象则不能实现深层对象的拷贝\n>\n> 深拷贝可以实现对象深层次的拷贝，怎样修改拷贝后的对象，原对象都不会改变\n\n\n\n\n\n\n#### 浅拷贝\n\n\n\n\n\n```javascript\n// 实现\nfunction clone(obj) {\n  let obj2 = Array.isArray(obj) ? [] : {}\n  if(obj && typeof obj === 'object') {\n  \tfor(let item in obj) {\n    \tobj2[item] = obj[item]\n  \t}  \n  } else {\n    obj2 = obj\n  }\n  return obj2\n}\n\n// 使用\nlet obj1 = {a: 1, b: {c: 123}}\nlet obj2 = clone(obj1)\nobj2.b.c = 6666\nobj1.b.c // 6666\t修改拷贝对象后，原对象深层的对象还是改变了\n```\n\n\n\n\n\n\n\n### 深拷贝\n\n\n\n\n\n```javascript\n// 实现\nfunction deepClone(obj) {\n  let obj2 = Array.isArray(obj) ? [] : {}\n  if(obj && typeof obj === 'object') {\n  \tfor(let item in obj) {\n    \tobj2[item] = deepClone(obj[item])\t// 递归遍历属性是否为对象\n  \t}  \n  } else {\n    obj2 = obj\n  }\n  return obj2\n}\n\n// 使用\nlet obj1 = {a: 1, b: {c: 123}}\nlet obj2 = clone(obj1)\nobj2.b.c = 6666\nobj1.b.c // 123\t修改拷贝对象后，原对象深层的对象没有改变，说明对深层的对象也进行了拷贝\n```\n\n\n\n","slug":"js 的浅拷贝和深拷贝","published":1,"updated":"2020-11-04T15:26:59.893Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzgul1aj000smmsfxlyqahta","content":"<h1 id=\"js-的浅拷贝和深拷贝\"><a href=\"#js-的浅拷贝和深拷贝\" class=\"headerlink\" title=\"js 的浅拷贝和深拷贝\"></a>js 的浅拷贝和深拷贝</h1><h3 id=\"深、浅拷贝的区别\"><a href=\"#深、浅拷贝的区别\" class=\"headerlink\" title=\"深、浅拷贝的区别\"></a>深、浅拷贝的区别</h3><blockquote>\n<p>浅拷贝只能拷贝对象第一层，如果对象之中还嵌套有对象则不能实现深层对象的拷贝</p>\n<p>深拷贝可以实现对象深层次的拷贝，怎样修改拷贝后的对象，原对象都不会改变</p>\n</blockquote>\n<h4 id=\"浅拷贝\"><a href=\"#浅拷贝\" class=\"headerlink\" title=\"浅拷贝\"></a>浅拷贝</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 实现</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clone</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> obj2 = <span class=\"built_in\">Array</span>.isArray(obj) ? [] : &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(obj &amp;&amp; <span class=\"keyword\">typeof</span> obj === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> item <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    \tobj2[item] = obj[item]</span><br><span class=\"line\">  \t&#125;  </span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    obj2 = obj</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: &#123;<span class=\"attr\">c</span>: <span class=\"number\">123</span>&#125;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = clone(obj1)</span><br><span class=\"line\">obj2.b.c = <span class=\"number\">6666</span></span><br><span class=\"line\">obj1.b.c <span class=\"comment\">// 6666\t修改拷贝对象后，原对象深层的对象还是改变了</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 实现</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepClone</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> obj2 = <span class=\"built_in\">Array</span>.isArray(obj) ? [] : &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(obj &amp;&amp; <span class=\"keyword\">typeof</span> obj === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> item <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    \tobj2[item] = deepClone(obj[item])\t<span class=\"comment\">// 递归遍历属性是否为对象</span></span><br><span class=\"line\">  \t&#125;  </span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    obj2 = obj</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: &#123;<span class=\"attr\">c</span>: <span class=\"number\">123</span>&#125;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = clone(obj1)</span><br><span class=\"line\">obj2.b.c = <span class=\"number\">6666</span></span><br><span class=\"line\">obj1.b.c <span class=\"comment\">// 123\t修改拷贝对象后，原对象深层的对象没有改变，说明对深层的对象也进行了拷贝</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"js-的浅拷贝和深拷贝\"><a href=\"#js-的浅拷贝和深拷贝\" class=\"headerlink\" title=\"js 的浅拷贝和深拷贝\"></a>js 的浅拷贝和深拷贝</h1><h3 id=\"深、浅拷贝的区别\"><a href=\"#深、浅拷贝的区别\" class=\"headerlink\" title=\"深、浅拷贝的区别\"></a>深、浅拷贝的区别</h3><blockquote>\n<p>浅拷贝只能拷贝对象第一层，如果对象之中还嵌套有对象则不能实现深层对象的拷贝</p>\n<p>深拷贝可以实现对象深层次的拷贝，怎样修改拷贝后的对象，原对象都不会改变</p>\n</blockquote>\n<h4 id=\"浅拷贝\"><a href=\"#浅拷贝\" class=\"headerlink\" title=\"浅拷贝\"></a>浅拷贝</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 实现</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clone</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> obj2 = <span class=\"built_in\">Array</span>.isArray(obj) ? [] : &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(obj &amp;&amp; <span class=\"keyword\">typeof</span> obj === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> item <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    \tobj2[item] = obj[item]</span><br><span class=\"line\">  \t&#125;  </span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    obj2 = obj</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: &#123;<span class=\"attr\">c</span>: <span class=\"number\">123</span>&#125;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = clone(obj1)</span><br><span class=\"line\">obj2.b.c = <span class=\"number\">6666</span></span><br><span class=\"line\">obj1.b.c <span class=\"comment\">// 6666\t修改拷贝对象后，原对象深层的对象还是改变了</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 实现</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepClone</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> obj2 = <span class=\"built_in\">Array</span>.isArray(obj) ? [] : &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(obj &amp;&amp; <span class=\"keyword\">typeof</span> obj === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> item <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    \tobj2[item] = deepClone(obj[item])\t<span class=\"comment\">// 递归遍历属性是否为对象</span></span><br><span class=\"line\">  \t&#125;  </span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    obj2 = obj</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: &#123;<span class=\"attr\">c</span>: <span class=\"number\">123</span>&#125;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = clone(obj1)</span><br><span class=\"line\">obj2.b.c = <span class=\"number\">6666</span></span><br><span class=\"line\">obj1.b.c <span class=\"comment\">// 123\t修改拷贝对象后，原对象深层的对象没有改变，说明对深层的对象也进行了拷贝</span></span><br></pre></td></tr></table></figure>\n"},{"title":"vue-router配置踩坑","date":"2021-03-30T09:04:08.000Z","_content":"\n\n\n# Vue-Router 配置踩坑、探究\n\n\n\n先来看一段 Vue-Router 官方的介绍\n\n![image-20210430153555730](https://tva1.sinaimg.cn/large/008i3skNly1gq1v8sdpisj30m70b9dgt.jpg)\n\n<!-- more -->\n\n![image-20210430153605660](https://tva1.sinaimg.cn/large/008i3skNly1gq1t65okoqj30lb04674g.jpg)\n\n\n\n可以得出以下几个结论：\n\n1. 路由是按照从上到下定义的顺序来进行匹配的，也就是说，当前路由当匹配到路由配置中靠前的路由后就会停止后续路由的匹配，即使后面有相同的路由。\n2.  `path: *`  默认会匹配所有路径，那按照第一点来说，该路由配置只能放在最后，否则会影响路由正常跳转。\n\n\n\n但是！！\n\n在一个项目中，我看到了如下配置\n\n![image-20210430154731056](https://tva1.sinaimg.cn/large/008i3skNly1gq1ti14xcsj31120ootaj.jpg)\n\n？？？ 按照上面分析这样不是会导致所有路由都定位到 404 吗\n\n但是实际我们启动了项目后，路由却能正常跳转，这不是跟上述的规则对不上吗？\n\n\n\n本着探究到底的精神，经过多方询问和查阅，我们在源码中发现了这段代码\n\n![image-20210430164730265](https://tva1.sinaimg.cn/large/008i3skNly1gq1v8odst6j31j60q4gqu.jpg)\n\n\n\n原来源码里面已经帮我们进行了处理，不管如何配置 `path: *` 都会移到最后。\n\n","source":"_posts/vue-router配置踩坑.md","raw":"---\ntitle: vue-router配置踩坑\ndate: 2021-03-30 17:04:08\ntags:\n - Vue\n - Vue-Router\ncategories:\n - javascript\n\n---\n\n\n\n# Vue-Router 配置踩坑、探究\n\n\n\n先来看一段 Vue-Router 官方的介绍\n\n![image-20210430153555730](https://tva1.sinaimg.cn/large/008i3skNly1gq1v8sdpisj30m70b9dgt.jpg)\n\n<!-- more -->\n\n![image-20210430153605660](https://tva1.sinaimg.cn/large/008i3skNly1gq1t65okoqj30lb04674g.jpg)\n\n\n\n可以得出以下几个结论：\n\n1. 路由是按照从上到下定义的顺序来进行匹配的，也就是说，当前路由当匹配到路由配置中靠前的路由后就会停止后续路由的匹配，即使后面有相同的路由。\n2.  `path: *`  默认会匹配所有路径，那按照第一点来说，该路由配置只能放在最后，否则会影响路由正常跳转。\n\n\n\n但是！！\n\n在一个项目中，我看到了如下配置\n\n![image-20210430154731056](https://tva1.sinaimg.cn/large/008i3skNly1gq1ti14xcsj31120ootaj.jpg)\n\n？？？ 按照上面分析这样不是会导致所有路由都定位到 404 吗\n\n但是实际我们启动了项目后，路由却能正常跳转，这不是跟上述的规则对不上吗？\n\n\n\n本着探究到底的精神，经过多方询问和查阅，我们在源码中发现了这段代码\n\n![image-20210430164730265](https://tva1.sinaimg.cn/large/008i3skNly1gq1v8odst6j31j60q4gqu.jpg)\n\n\n\n原来源码里面已经帮我们进行了处理，不管如何配置 `path: *` 都会移到最后。\n\n","slug":"vue-router配置踩坑","published":1,"updated":"2021-04-30T09:08:11.091Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzgul1al000vmmsfv04c2610","content":"<h1 id=\"Vue-Router-配置踩坑、探究\"><a href=\"#Vue-Router-配置踩坑、探究\" class=\"headerlink\" title=\"Vue-Router 配置踩坑、探究\"></a>Vue-Router 配置踩坑、探究</h1><p>先来看一段 Vue-Router 官方的介绍</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gq1v8sdpisj30m70b9dgt.jpg\" alt=\"image-20210430153555730\"></p>\n<a id=\"more\"></a>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gq1t65okoqj30lb04674g.jpg\" alt=\"image-20210430153605660\"></p>\n<p>可以得出以下几个结论：</p>\n<ol>\n<li>路由是按照从上到下定义的顺序来进行匹配的，也就是说，当前路由当匹配到路由配置中靠前的路由后就会停止后续路由的匹配，即使后面有相同的路由。</li>\n<li><code>path: *</code>  默认会匹配所有路径，那按照第一点来说，该路由配置只能放在最后，否则会影响路由正常跳转。</li>\n</ol>\n<p>但是！！</p>\n<p>在一个项目中，我看到了如下配置</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gq1ti14xcsj31120ootaj.jpg\" alt=\"image-20210430154731056\"></p>\n<p>？？？ 按照上面分析这样不是会导致所有路由都定位到 404 吗</p>\n<p>但是实际我们启动了项目后，路由却能正常跳转，这不是跟上述的规则对不上吗？</p>\n<p>本着探究到底的精神，经过多方询问和查阅，我们在源码中发现了这段代码</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gq1v8odst6j31j60q4gqu.jpg\" alt=\"image-20210430164730265\"></p>\n<p>原来源码里面已经帮我们进行了处理，不管如何配置 <code>path: *</code> 都会移到最后。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Vue-Router-配置踩坑、探究\"><a href=\"#Vue-Router-配置踩坑、探究\" class=\"headerlink\" title=\"Vue-Router 配置踩坑、探究\"></a>Vue-Router 配置踩坑、探究</h1><p>先来看一段 Vue-Router 官方的介绍</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gq1v8sdpisj30m70b9dgt.jpg\" alt=\"image-20210430153555730\"></p>","more":"<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gq1t65okoqj30lb04674g.jpg\" alt=\"image-20210430153605660\"></p>\n<p>可以得出以下几个结论：</p>\n<ol>\n<li>路由是按照从上到下定义的顺序来进行匹配的，也就是说，当前路由当匹配到路由配置中靠前的路由后就会停止后续路由的匹配，即使后面有相同的路由。</li>\n<li><code>path: *</code>  默认会匹配所有路径，那按照第一点来说，该路由配置只能放在最后，否则会影响路由正常跳转。</li>\n</ol>\n<p>但是！！</p>\n<p>在一个项目中，我看到了如下配置</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gq1ti14xcsj31120ootaj.jpg\" alt=\"image-20210430154731056\"></p>\n<p>？？？ 按照上面分析这样不是会导致所有路由都定位到 404 吗</p>\n<p>但是实际我们启动了项目后，路由却能正常跳转，这不是跟上述的规则对不上吗？</p>\n<p>本着探究到底的精神，经过多方询问和查阅，我们在源码中发现了这段代码</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gq1v8odst6j31j60q4gqu.jpg\" alt=\"image-20210430164730265\"></p>\n<p>原来源码里面已经帮我们进行了处理，不管如何配置 <code>path: *</code> 都会移到最后。</p>"},{"title":"react hooks知识点","date":"2020-07-01T15:48:23.000Z","_content":"\n## react  知识点(hooks, class)\n\n\n\n### 1. usecallback\n\n\n\n> 缓存函数，依赖项变化后再重新生成.\n>\n> [`useCallback`](https://react.docschina.org/docs/hooks-reference.html#usecallback) Hook 允许你在重新渲染之间保持对相同的回调引用以使得 `shouldComponentUpdate` 继续工作\n>\n> 当缓存的函数依赖项频繁变动的话，可以采用useRef的形式，在 `xxxRef.current` 上把所依赖的变量写入xxxref， usecallback依赖 xxxRef， 因为xxxref只会创建一次，且xxxref.current始终是最新的，所以可以解决依赖项频繁变更的问题并且可以完成函数的缓存。\n\n\n\n<!-- more -->\n\n### 2.memo\n\n\n\n> 子组件 props不变的情况下，父组件重新渲染子组件并**不会**重新渲染\n\n\n\n\n\n### 3. useMemo\n\n\n\n> 缓存值，当依赖项变化时，才会重新计算生成最新值\n\n\n\n\n\n### 4.PureComponent\n\n\n\n> 同memo， 通过class继承的方式实现子组件**不因为**父组件更新而进行不必要的渲染。，只依赖props\n\n\n\n#### 为什么不每个组件都用memo或者pureComponent包装呢？\n\n​\treact决定组件是否更新是根据 **前后props** 来比较的，但比较也仅仅只是**潜比较** ， 只能比较值的不同，如果是引用，比如对象、数组等就无能为力老。 所以，如果props是引用类型，父组件每次更新，传递的引用对象都是新生成的，地址空间已经变了，所以子组件经过潜比较判断前后的prop是不相等的，就会造成子组件重新渲染。 同样， 传递的箭头函数(匿名函数)也会造成相同的后果。 那我们如何规避这种情况呢？\n\n* 拆分props传入的应用对象，拆分为单个的值\n* 函数传入唯一声明的函数引用。 比如在class中传入 <code> xxxxfn.bind(this)</code>的函数\n* 控制更新。 使用class的 `shouldComponentUpdate(prevProps, prevState)`  或者memo的 第二个参数来对前后props进行更深层次的比较，从而控制更新。\n\n\n\n### 5. useReduce\n\n\n\n> [`useReducer`](https://react.docschina.org/docs/hooks-reference.html#usereducer) Hook 减少了对深层传递回调的依赖，\n\n\n\n\n\n\n\n\n\n### 6. useContext\n\n\n\n> 用于解决组件深层次嵌套的通信问题\n\n\n\n","source":"_posts/react  知识点.md","raw":"---\ntitle: react hooks知识点\ndate: 2020-07-01 23:48:23\ncategories:\n - javascript\n - react\ntags:\n - react\n---\n\n## react  知识点(hooks, class)\n\n\n\n### 1. usecallback\n\n\n\n> 缓存函数，依赖项变化后再重新生成.\n>\n> [`useCallback`](https://react.docschina.org/docs/hooks-reference.html#usecallback) Hook 允许你在重新渲染之间保持对相同的回调引用以使得 `shouldComponentUpdate` 继续工作\n>\n> 当缓存的函数依赖项频繁变动的话，可以采用useRef的形式，在 `xxxRef.current` 上把所依赖的变量写入xxxref， usecallback依赖 xxxRef， 因为xxxref只会创建一次，且xxxref.current始终是最新的，所以可以解决依赖项频繁变更的问题并且可以完成函数的缓存。\n\n\n\n<!-- more -->\n\n### 2.memo\n\n\n\n> 子组件 props不变的情况下，父组件重新渲染子组件并**不会**重新渲染\n\n\n\n\n\n### 3. useMemo\n\n\n\n> 缓存值，当依赖项变化时，才会重新计算生成最新值\n\n\n\n\n\n### 4.PureComponent\n\n\n\n> 同memo， 通过class继承的方式实现子组件**不因为**父组件更新而进行不必要的渲染。，只依赖props\n\n\n\n#### 为什么不每个组件都用memo或者pureComponent包装呢？\n\n​\treact决定组件是否更新是根据 **前后props** 来比较的，但比较也仅仅只是**潜比较** ， 只能比较值的不同，如果是引用，比如对象、数组等就无能为力老。 所以，如果props是引用类型，父组件每次更新，传递的引用对象都是新生成的，地址空间已经变了，所以子组件经过潜比较判断前后的prop是不相等的，就会造成子组件重新渲染。 同样， 传递的箭头函数(匿名函数)也会造成相同的后果。 那我们如何规避这种情况呢？\n\n* 拆分props传入的应用对象，拆分为单个的值\n* 函数传入唯一声明的函数引用。 比如在class中传入 <code> xxxxfn.bind(this)</code>的函数\n* 控制更新。 使用class的 `shouldComponentUpdate(prevProps, prevState)`  或者memo的 第二个参数来对前后props进行更深层次的比较，从而控制更新。\n\n\n\n### 5. useReduce\n\n\n\n> [`useReducer`](https://react.docschina.org/docs/hooks-reference.html#usereducer) Hook 减少了对深层传递回调的依赖，\n\n\n\n\n\n\n\n\n\n### 6. useContext\n\n\n\n> 用于解决组件深层次嵌套的通信问题\n\n\n\n","slug":"react  知识点","published":1,"updated":"2020-07-20T14:58:08.881Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzgul1am000zmmsfyjpc1u3r","content":"<h2 id=\"react-知识点-hooks-class\"><a href=\"#react-知识点-hooks-class\" class=\"headerlink\" title=\"react  知识点(hooks, class)\"></a>react  知识点(hooks, class)</h2><h3 id=\"1-usecallback\"><a href=\"#1-usecallback\" class=\"headerlink\" title=\"1. usecallback\"></a>1. usecallback</h3><blockquote>\n<p>缓存函数，依赖项变化后再重新生成.</p>\n<p><a href=\"https://react.docschina.org/docs/hooks-reference.html#usecallback\" target=\"_blank\" rel=\"noopener\"><code>useCallback</code></a> Hook 允许你在重新渲染之间保持对相同的回调引用以使得 <code>shouldComponentUpdate</code> 继续工作</p>\n<p>当缓存的函数依赖项频繁变动的话，可以采用useRef的形式，在 <code>xxxRef.current</code> 上把所依赖的变量写入xxxref， usecallback依赖 xxxRef， 因为xxxref只会创建一次，且xxxref.current始终是最新的，所以可以解决依赖项频繁变更的问题并且可以完成函数的缓存。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"2-memo\"><a href=\"#2-memo\" class=\"headerlink\" title=\"2.memo\"></a>2.memo</h3><blockquote>\n<p>子组件 props不变的情况下，父组件重新渲染子组件并<strong>不会</strong>重新渲染</p>\n</blockquote>\n<h3 id=\"3-useMemo\"><a href=\"#3-useMemo\" class=\"headerlink\" title=\"3. useMemo\"></a>3. useMemo</h3><blockquote>\n<p>缓存值，当依赖项变化时，才会重新计算生成最新值</p>\n</blockquote>\n<h3 id=\"4-PureComponent\"><a href=\"#4-PureComponent\" class=\"headerlink\" title=\"4.PureComponent\"></a>4.PureComponent</h3><blockquote>\n<p>同memo， 通过class继承的方式实现子组件<strong>不因为</strong>父组件更新而进行不必要的渲染。，只依赖props</p>\n</blockquote>\n<h4 id=\"为什么不每个组件都用memo或者pureComponent包装呢？\"><a href=\"#为什么不每个组件都用memo或者pureComponent包装呢？\" class=\"headerlink\" title=\"为什么不每个组件都用memo或者pureComponent包装呢？\"></a>为什么不每个组件都用memo或者pureComponent包装呢？</h4><p>​    react决定组件是否更新是根据 <strong>前后props</strong> 来比较的，但比较也仅仅只是<strong>潜比较</strong> ， 只能比较值的不同，如果是引用，比如对象、数组等就无能为力老。 所以，如果props是引用类型，父组件每次更新，传递的引用对象都是新生成的，地址空间已经变了，所以子组件经过潜比较判断前后的prop是不相等的，就会造成子组件重新渲染。 同样， 传递的箭头函数(匿名函数)也会造成相同的后果。 那我们如何规避这种情况呢？</p>\n<ul>\n<li>拆分props传入的应用对象，拆分为单个的值</li>\n<li>函数传入唯一声明的函数引用。 比如在class中传入 <code> xxxxfn.bind(this)</code>的函数</li>\n<li>控制更新。 使用class的 <code>shouldComponentUpdate(prevProps, prevState)</code>  或者memo的 第二个参数来对前后props进行更深层次的比较，从而控制更新。</li>\n</ul>\n<h3 id=\"5-useReduce\"><a href=\"#5-useReduce\" class=\"headerlink\" title=\"5. useReduce\"></a>5. useReduce</h3><blockquote>\n<p><a href=\"https://react.docschina.org/docs/hooks-reference.html#usereducer\" target=\"_blank\" rel=\"noopener\"><code>useReducer</code></a> Hook 减少了对深层传递回调的依赖，</p>\n</blockquote>\n<h3 id=\"6-useContext\"><a href=\"#6-useContext\" class=\"headerlink\" title=\"6. useContext\"></a>6. useContext</h3><blockquote>\n<p>用于解决组件深层次嵌套的通信问题</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h2 id=\"react-知识点-hooks-class\"><a href=\"#react-知识点-hooks-class\" class=\"headerlink\" title=\"react  知识点(hooks, class)\"></a>react  知识点(hooks, class)</h2><h3 id=\"1-usecallback\"><a href=\"#1-usecallback\" class=\"headerlink\" title=\"1. usecallback\"></a>1. usecallback</h3><blockquote>\n<p>缓存函数，依赖项变化后再重新生成.</p>\n<p><a href=\"https://react.docschina.org/docs/hooks-reference.html#usecallback\" target=\"_blank\" rel=\"noopener\"><code>useCallback</code></a> Hook 允许你在重新渲染之间保持对相同的回调引用以使得 <code>shouldComponentUpdate</code> 继续工作</p>\n<p>当缓存的函数依赖项频繁变动的话，可以采用useRef的形式，在 <code>xxxRef.current</code> 上把所依赖的变量写入xxxref， usecallback依赖 xxxRef， 因为xxxref只会创建一次，且xxxref.current始终是最新的，所以可以解决依赖项频繁变更的问题并且可以完成函数的缓存。</p>\n</blockquote>","more":"<h3 id=\"2-memo\"><a href=\"#2-memo\" class=\"headerlink\" title=\"2.memo\"></a>2.memo</h3><blockquote>\n<p>子组件 props不变的情况下，父组件重新渲染子组件并<strong>不会</strong>重新渲染</p>\n</blockquote>\n<h3 id=\"3-useMemo\"><a href=\"#3-useMemo\" class=\"headerlink\" title=\"3. useMemo\"></a>3. useMemo</h3><blockquote>\n<p>缓存值，当依赖项变化时，才会重新计算生成最新值</p>\n</blockquote>\n<h3 id=\"4-PureComponent\"><a href=\"#4-PureComponent\" class=\"headerlink\" title=\"4.PureComponent\"></a>4.PureComponent</h3><blockquote>\n<p>同memo， 通过class继承的方式实现子组件<strong>不因为</strong>父组件更新而进行不必要的渲染。，只依赖props</p>\n</blockquote>\n<h4 id=\"为什么不每个组件都用memo或者pureComponent包装呢？\"><a href=\"#为什么不每个组件都用memo或者pureComponent包装呢？\" class=\"headerlink\" title=\"为什么不每个组件都用memo或者pureComponent包装呢？\"></a>为什么不每个组件都用memo或者pureComponent包装呢？</h4><p>​    react决定组件是否更新是根据 <strong>前后props</strong> 来比较的，但比较也仅仅只是<strong>潜比较</strong> ， 只能比较值的不同，如果是引用，比如对象、数组等就无能为力老。 所以，如果props是引用类型，父组件每次更新，传递的引用对象都是新生成的，地址空间已经变了，所以子组件经过潜比较判断前后的prop是不相等的，就会造成子组件重新渲染。 同样， 传递的箭头函数(匿名函数)也会造成相同的后果。 那我们如何规避这种情况呢？</p>\n<ul>\n<li>拆分props传入的应用对象，拆分为单个的值</li>\n<li>函数传入唯一声明的函数引用。 比如在class中传入 <code> xxxxfn.bind(this)</code>的函数</li>\n<li>控制更新。 使用class的 <code>shouldComponentUpdate(prevProps, prevState)</code>  或者memo的 第二个参数来对前后props进行更深层次的比较，从而控制更新。</li>\n</ul>\n<h3 id=\"5-useReduce\"><a href=\"#5-useReduce\" class=\"headerlink\" title=\"5. useReduce\"></a>5. useReduce</h3><blockquote>\n<p><a href=\"https://react.docschina.org/docs/hooks-reference.html#usereducer\" target=\"_blank\" rel=\"noopener\"><code>useReducer</code></a> Hook 减少了对深层传递回调的依赖，</p>\n</blockquote>\n<h3 id=\"6-useContext\"><a href=\"#6-useContext\" class=\"headerlink\" title=\"6. useContext\"></a>6. useContext</h3><blockquote>\n<p>用于解决组件深层次嵌套的通信问题</p>\n</blockquote>"},{"title":"从零开始学习Vue源码 ——响应式基本原理","date":"2020-07-01T15:55:23.000Z","_content":"\n# 从零开始学习Vue源码 ——响应式基本原理\n\n\n\n\n\n#### 这里实现一个简易版本的响应式系统来形象的理解数据是如何在初始化的时候被劫持，以及如何在修改时更新视图的。\n\n\n\n### 首先看下Vue2.x实现响应式系统最重要的方法\n\n\n\n``Object.defineProperty``, Vue2.x就是基于它实现的响应式\n\n```javascript\n/*\n    obj: 目标对象\n    prop: 需要操作的目标对象的属性名\n    descriptor: 描述符\n    \n    return value 传入对象\n*/\nObject.defineProperty(obj, prop, descriptor)\n```\n\n\n\n具体的属性以及使用方法可以参考[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty)\n\n\n\n<!-- more -->\n\n#### 下面贴一个简易版响应式的代码实现\n\n\n\n```javascript\n// 更新视图时调用\nfunction cb (val) {\n    /* 渲染视图 */\n    console.log(\"视图更新啦～\");\n}\n\n// 对对象中某个属性进行数据劫持\nfunction defineReactive (obj, key, val) {\n    Object.defineProperty(obj, key, {\n        enumerable: true,       /* 属性可枚举 */\n        configurable: true,     /* 属性可被修改或删除 */\n        get: function reactiveGetter () {\n            return val;         /* 实际上会依赖收集 */\n        },\n        set: function reactiveSetter (newVal) {\n            if (newVal === val) return;\n            cb(newVal);\n        }\n    });\n}\n\n// 遍历对象所有属性，进行数据劫持\nfunction observer (value) {\n    if (!value || (typeof value !== 'object')) {\n        return;\n    }\n    \n    Object.keys(value).forEach((key) => {\n        if(typeof value[key] === 'object') {\n            observer(value[key]) // 递归遍历深层次属性\n        }\n        defineReactive(value, key, value[key]);\n    });\n}\n\nclass Vue {\n  constructor(options) {\n    this._data = option.data\n    observer(this._data);\n  }\n}\n\nconst vm = new Vue({\n  data: {\n    name: {firstName: 'z', lastName: 'zz'}\n  }\n})\n\nvm._data.name.firstName = 'cc' // 此时会打印 视图更新啦～\n\n\n```\n\n\n\n##### 下面我们一步步解析以上简易版响应式系统原理\n\n\n\n1. 首先我们要实现一个对对象属性进行数据劫持，跟踪属性更新的函数 `defineReactive`  ， 该函数使用了 `Object.defineProperty` 进行数据劫持, 被设置的属性会在读取时触发 `getter`,  会在设置时触发 `setter`    执行里面更新视图的函数 `cb` 打印出  *视图更新啦～*\n\n\n\n2. 只有一个`defineReactive`还不够， 我们还需要实现一个 `observer`  来对对象所有属性遍历、递归进行绑定, 这样对象上所有属性修改时都会触发getter 、 setter。\n3. 最后我们构建一个Vue 的class类， 在构造函数中初始化data，并进行**[响应式]** 化\n4. 当实例化Vue后，我们修改_data上的值就会触发setter 更新视图\n\n\n\n## 总结\n\n响应式系统最重要的就是数据劫持部分，当然这里只是一个简单的实现，像数组对象等都没处理，不过能通过这个demo了解相应式的基本原理。\n\n","source":"_posts/从零开始学习Vue源码(二) ——响应式基本原理.md","raw":"---\ntitle: 从零开始学习Vue源码 ——响应式基本原理\ndate: 2020-07-01 23:55:23\ncategories:\n - javascript\n - vue\ntags:\n - vue\n---\n\n# 从零开始学习Vue源码 ——响应式基本原理\n\n\n\n\n\n#### 这里实现一个简易版本的响应式系统来形象的理解数据是如何在初始化的时候被劫持，以及如何在修改时更新视图的。\n\n\n\n### 首先看下Vue2.x实现响应式系统最重要的方法\n\n\n\n``Object.defineProperty``, Vue2.x就是基于它实现的响应式\n\n```javascript\n/*\n    obj: 目标对象\n    prop: 需要操作的目标对象的属性名\n    descriptor: 描述符\n    \n    return value 传入对象\n*/\nObject.defineProperty(obj, prop, descriptor)\n```\n\n\n\n具体的属性以及使用方法可以参考[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty)\n\n\n\n<!-- more -->\n\n#### 下面贴一个简易版响应式的代码实现\n\n\n\n```javascript\n// 更新视图时调用\nfunction cb (val) {\n    /* 渲染视图 */\n    console.log(\"视图更新啦～\");\n}\n\n// 对对象中某个属性进行数据劫持\nfunction defineReactive (obj, key, val) {\n    Object.defineProperty(obj, key, {\n        enumerable: true,       /* 属性可枚举 */\n        configurable: true,     /* 属性可被修改或删除 */\n        get: function reactiveGetter () {\n            return val;         /* 实际上会依赖收集 */\n        },\n        set: function reactiveSetter (newVal) {\n            if (newVal === val) return;\n            cb(newVal);\n        }\n    });\n}\n\n// 遍历对象所有属性，进行数据劫持\nfunction observer (value) {\n    if (!value || (typeof value !== 'object')) {\n        return;\n    }\n    \n    Object.keys(value).forEach((key) => {\n        if(typeof value[key] === 'object') {\n            observer(value[key]) // 递归遍历深层次属性\n        }\n        defineReactive(value, key, value[key]);\n    });\n}\n\nclass Vue {\n  constructor(options) {\n    this._data = option.data\n    observer(this._data);\n  }\n}\n\nconst vm = new Vue({\n  data: {\n    name: {firstName: 'z', lastName: 'zz'}\n  }\n})\n\nvm._data.name.firstName = 'cc' // 此时会打印 视图更新啦～\n\n\n```\n\n\n\n##### 下面我们一步步解析以上简易版响应式系统原理\n\n\n\n1. 首先我们要实现一个对对象属性进行数据劫持，跟踪属性更新的函数 `defineReactive`  ， 该函数使用了 `Object.defineProperty` 进行数据劫持, 被设置的属性会在读取时触发 `getter`,  会在设置时触发 `setter`    执行里面更新视图的函数 `cb` 打印出  *视图更新啦～*\n\n\n\n2. 只有一个`defineReactive`还不够， 我们还需要实现一个 `observer`  来对对象所有属性遍历、递归进行绑定, 这样对象上所有属性修改时都会触发getter 、 setter。\n3. 最后我们构建一个Vue 的class类， 在构造函数中初始化data，并进行**[响应式]** 化\n4. 当实例化Vue后，我们修改_data上的值就会触发setter 更新视图\n\n\n\n## 总结\n\n响应式系统最重要的就是数据劫持部分，当然这里只是一个简单的实现，像数组对象等都没处理，不过能通过这个demo了解相应式的基本原理。\n\n","slug":"从零开始学习Vue源码(二) ——响应式基本原理","published":1,"updated":"2020-07-20T14:58:33.870Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzgul1an0010mmsfbuxhzpd7","content":"<h1 id=\"从零开始学习Vue源码-——响应式基本原理\"><a href=\"#从零开始学习Vue源码-——响应式基本原理\" class=\"headerlink\" title=\"从零开始学习Vue源码 ——响应式基本原理\"></a>从零开始学习Vue源码 ——响应式基本原理</h1><h4 id=\"这里实现一个简易版本的响应式系统来形象的理解数据是如何在初始化的时候被劫持，以及如何在修改时更新视图的。\"><a href=\"#这里实现一个简易版本的响应式系统来形象的理解数据是如何在初始化的时候被劫持，以及如何在修改时更新视图的。\" class=\"headerlink\" title=\"这里实现一个简易版本的响应式系统来形象的理解数据是如何在初始化的时候被劫持，以及如何在修改时更新视图的。\"></a>这里实现一个简易版本的响应式系统来形象的理解数据是如何在初始化的时候被劫持，以及如何在修改时更新视图的。</h4><h3 id=\"首先看下Vue2-x实现响应式系统最重要的方法\"><a href=\"#首先看下Vue2-x实现响应式系统最重要的方法\" class=\"headerlink\" title=\"首先看下Vue2.x实现响应式系统最重要的方法\"></a>首先看下Vue2.x实现响应式系统最重要的方法</h3><p><code>Object.defineProperty</code>, Vue2.x就是基于它实现的响应式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    obj: 目标对象</span></span><br><span class=\"line\"><span class=\"comment\">    prop: 需要操作的目标对象的属性名</span></span><br><span class=\"line\"><span class=\"comment\">    descriptor: 描述符</span></span><br><span class=\"line\"><span class=\"comment\">    </span></span><br><span class=\"line\"><span class=\"comment\">    return value 传入对象</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, prop, descriptor)</span><br></pre></td></tr></table></figure>\n<p>具体的属性以及使用方法可以参考<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\" target=\"_blank\" rel=\"noopener\">MDN</a></p>\n<a id=\"more\"></a>\n<h4 id=\"下面贴一个简易版响应式的代码实现\"><a href=\"#下面贴一个简易版响应式的代码实现\" class=\"headerlink\" title=\"下面贴一个简易版响应式的代码实现\"></a>下面贴一个简易版响应式的代码实现</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 更新视图时调用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cb</span> (<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 渲染视图 */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"视图更新啦～\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对对象中某个属性进行数据劫持</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">defineReactive</span> (<span class=\"params\">obj, key, val</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(obj, key, &#123;</span><br><span class=\"line\">        enumerable: <span class=\"literal\">true</span>,       <span class=\"comment\">/* 属性可枚举 */</span></span><br><span class=\"line\">        configurable: <span class=\"literal\">true</span>,     <span class=\"comment\">/* 属性可被修改或删除 */</span></span><br><span class=\"line\">        get: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reactiveGetter</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> val;         <span class=\"comment\">/* 实际上会依赖收集 */</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        set: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reactiveSetter</span> (<span class=\"params\">newVal</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (newVal === val) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            cb(newVal);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 遍历对象所有属性，进行数据劫持</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observer</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!value || (<span class=\"keyword\">typeof</span> value !== <span class=\"string\">'object'</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.keys(value).forEach(<span class=\"function\">(<span class=\"params\">key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> value[key] === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">            observer(value[key]) <span class=\"comment\">// 递归遍历深层次属性</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        defineReactive(value, key, value[key]);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vue</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(options) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._data = option.data</span><br><span class=\"line\">    observer(<span class=\"keyword\">this</span>._data);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    name: &#123;<span class=\"attr\">firstName</span>: <span class=\"string\">'z'</span>, <span class=\"attr\">lastName</span>: <span class=\"string\">'zz'</span>&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">vm._data.name.firstName = <span class=\"string\">'cc'</span> <span class=\"comment\">// 此时会打印 视图更新啦～</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"下面我们一步步解析以上简易版响应式系统原理\"><a href=\"#下面我们一步步解析以上简易版响应式系统原理\" class=\"headerlink\" title=\"下面我们一步步解析以上简易版响应式系统原理\"></a>下面我们一步步解析以上简易版响应式系统原理</h5><ol>\n<li>首先我们要实现一个对对象属性进行数据劫持，跟踪属性更新的函数 <code>defineReactive</code>  ， 该函数使用了 <code>Object.defineProperty</code> 进行数据劫持, 被设置的属性会在读取时触发 <code>getter</code>,  会在设置时触发 <code>setter</code>    执行里面更新视图的函数 <code>cb</code> 打印出  <em>视图更新啦～</em></li>\n</ol>\n<ol start=\"2\">\n<li>只有一个<code>defineReactive</code>还不够， 我们还需要实现一个 <code>observer</code>  来对对象所有属性遍历、递归进行绑定, 这样对象上所有属性修改时都会触发getter 、 setter。</li>\n<li>最后我们构建一个Vue 的class类， 在构造函数中初始化data，并进行<strong>[响应式]</strong> 化</li>\n<li>当实例化Vue后，我们修改_data上的值就会触发setter 更新视图</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>响应式系统最重要的就是数据劫持部分，当然这里只是一个简单的实现，像数组对象等都没处理，不过能通过这个demo了解相应式的基本原理。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"从零开始学习Vue源码-——响应式基本原理\"><a href=\"#从零开始学习Vue源码-——响应式基本原理\" class=\"headerlink\" title=\"从零开始学习Vue源码 ——响应式基本原理\"></a>从零开始学习Vue源码 ——响应式基本原理</h1><h4 id=\"这里实现一个简易版本的响应式系统来形象的理解数据是如何在初始化的时候被劫持，以及如何在修改时更新视图的。\"><a href=\"#这里实现一个简易版本的响应式系统来形象的理解数据是如何在初始化的时候被劫持，以及如何在修改时更新视图的。\" class=\"headerlink\" title=\"这里实现一个简易版本的响应式系统来形象的理解数据是如何在初始化的时候被劫持，以及如何在修改时更新视图的。\"></a>这里实现一个简易版本的响应式系统来形象的理解数据是如何在初始化的时候被劫持，以及如何在修改时更新视图的。</h4><h3 id=\"首先看下Vue2-x实现响应式系统最重要的方法\"><a href=\"#首先看下Vue2-x实现响应式系统最重要的方法\" class=\"headerlink\" title=\"首先看下Vue2.x实现响应式系统最重要的方法\"></a>首先看下Vue2.x实现响应式系统最重要的方法</h3><p><code>Object.defineProperty</code>, Vue2.x就是基于它实现的响应式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    obj: 目标对象</span></span><br><span class=\"line\"><span class=\"comment\">    prop: 需要操作的目标对象的属性名</span></span><br><span class=\"line\"><span class=\"comment\">    descriptor: 描述符</span></span><br><span class=\"line\"><span class=\"comment\">    </span></span><br><span class=\"line\"><span class=\"comment\">    return value 传入对象</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, prop, descriptor)</span><br></pre></td></tr></table></figure>\n<p>具体的属性以及使用方法可以参考<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\" target=\"_blank\" rel=\"noopener\">MDN</a></p>","more":"<h4 id=\"下面贴一个简易版响应式的代码实现\"><a href=\"#下面贴一个简易版响应式的代码实现\" class=\"headerlink\" title=\"下面贴一个简易版响应式的代码实现\"></a>下面贴一个简易版响应式的代码实现</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 更新视图时调用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cb</span> (<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 渲染视图 */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"视图更新啦～\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对对象中某个属性进行数据劫持</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">defineReactive</span> (<span class=\"params\">obj, key, val</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(obj, key, &#123;</span><br><span class=\"line\">        enumerable: <span class=\"literal\">true</span>,       <span class=\"comment\">/* 属性可枚举 */</span></span><br><span class=\"line\">        configurable: <span class=\"literal\">true</span>,     <span class=\"comment\">/* 属性可被修改或删除 */</span></span><br><span class=\"line\">        get: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reactiveGetter</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> val;         <span class=\"comment\">/* 实际上会依赖收集 */</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        set: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reactiveSetter</span> (<span class=\"params\">newVal</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (newVal === val) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            cb(newVal);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 遍历对象所有属性，进行数据劫持</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observer</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!value || (<span class=\"keyword\">typeof</span> value !== <span class=\"string\">'object'</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.keys(value).forEach(<span class=\"function\">(<span class=\"params\">key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> value[key] === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">            observer(value[key]) <span class=\"comment\">// 递归遍历深层次属性</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        defineReactive(value, key, value[key]);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vue</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(options) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._data = option.data</span><br><span class=\"line\">    observer(<span class=\"keyword\">this</span>._data);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    name: &#123;<span class=\"attr\">firstName</span>: <span class=\"string\">'z'</span>, <span class=\"attr\">lastName</span>: <span class=\"string\">'zz'</span>&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">vm._data.name.firstName = <span class=\"string\">'cc'</span> <span class=\"comment\">// 此时会打印 视图更新啦～</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"下面我们一步步解析以上简易版响应式系统原理\"><a href=\"#下面我们一步步解析以上简易版响应式系统原理\" class=\"headerlink\" title=\"下面我们一步步解析以上简易版响应式系统原理\"></a>下面我们一步步解析以上简易版响应式系统原理</h5><ol>\n<li>首先我们要实现一个对对象属性进行数据劫持，跟踪属性更新的函数 <code>defineReactive</code>  ， 该函数使用了 <code>Object.defineProperty</code> 进行数据劫持, 被设置的属性会在读取时触发 <code>getter</code>,  会在设置时触发 <code>setter</code>    执行里面更新视图的函数 <code>cb</code> 打印出  <em>视图更新啦～</em></li>\n</ol>\n<ol start=\"2\">\n<li>只有一个<code>defineReactive</code>还不够， 我们还需要实现一个 <code>observer</code>  来对对象所有属性遍历、递归进行绑定, 这样对象上所有属性修改时都会触发getter 、 setter。</li>\n<li>最后我们构建一个Vue 的class类， 在构造函数中初始化data，并进行<strong>[响应式]</strong> 化</li>\n<li>当实例化Vue后，我们修改_data上的值就会触发setter 更新视图</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>响应式系统最重要的就是数据劫持部分，当然这里只是一个简单的实现，像数组对象等都没处理，不过能通过这个demo了解相应式的基本原理。</p>"},{"title":"css多行文本省略号","date":"2019-03-21T05:03:41.000Z","_content":"\n# CSS多行文本设置省略号\n\n\n\n## 单行文本省略号\n\n  如果要设置单行文本超出容器末尾显示省略号是非常简单的，通过:\n\n```css\noverflow: hidden;\ntext-overflow: ellipsis;\n```\n\n即可实现单行文本的省略号。\n\n## 多行文本的省略号\n\n​\t下面就是本文主要讨论的点了，如何实现多行文本超出区域显示省略号，或者说可以设置最多显示几行。\n\n<!-- more -->\n\n​\t实现的方式有多种，可以用css，也可以用js。 其中css也有多种方法, 但一些方法或多或少都有点hack的味道，下面我们介绍一种浏览器原生的多行文本显示的方法。\n\n在包含文本的标签中添加如下css样式:\n\n```css\np {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 4;\n}\n```\n\n> Tips:  1. 只有中文内容在到达最大宽度时才会自动换行\n>\n> 2. 如果要英文支持的话需要添加  `word-break: break-all` 文本才会换行。\n> 3. 经测试  此css样式在chrome、safari浏览器上能正常生效，但在Firefox上好像并不起效果。\n\n\n\n## 踩坑\n\n​\t单独尝试添加上面的样式可以实现多行省略号，但我在Vue以及nuxt框架下开发，几经尝试都不起效果，一直认为是不是浏览器不支持这个样式。结果倒腾许久才发现是 autoprefixer这个插件干的\"好事\"。\n\n在原来的css中我们添加了`-webkit-box-orient: vertical` 这个样式。 但是经过 autoprefixer 处理之后，元素中竟然没有了！！  好吧。。。 手动加上之后就可以实现多行文本省略号的效果了。\n\n​\t那怎么解决 autoprefixer去掉 `-webkit-box-orient: vertical` 这个样式的问题呢？  很简单，在该样式样多加一条注释   `/*! autoprefixer: off */`   。\n\n​\t哦了，这下我们就能愉快的使用多行文本设置省略号了～\n\n\n\n\n\n\n\n","source":"_posts/css多行文本省略号.md","raw":"---\ntitle: css多行文本省略号\ndate: 2019-03-21 13:03:41\ncategories:\n - css\ntags:\n - 前端\n - css技巧\n\n---\n\n# CSS多行文本设置省略号\n\n\n\n## 单行文本省略号\n\n  如果要设置单行文本超出容器末尾显示省略号是非常简单的，通过:\n\n```css\noverflow: hidden;\ntext-overflow: ellipsis;\n```\n\n即可实现单行文本的省略号。\n\n## 多行文本的省略号\n\n​\t下面就是本文主要讨论的点了，如何实现多行文本超出区域显示省略号，或者说可以设置最多显示几行。\n\n<!-- more -->\n\n​\t实现的方式有多种，可以用css，也可以用js。 其中css也有多种方法, 但一些方法或多或少都有点hack的味道，下面我们介绍一种浏览器原生的多行文本显示的方法。\n\n在包含文本的标签中添加如下css样式:\n\n```css\np {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 4;\n}\n```\n\n> Tips:  1. 只有中文内容在到达最大宽度时才会自动换行\n>\n> 2. 如果要英文支持的话需要添加  `word-break: break-all` 文本才会换行。\n> 3. 经测试  此css样式在chrome、safari浏览器上能正常生效，但在Firefox上好像并不起效果。\n\n\n\n## 踩坑\n\n​\t单独尝试添加上面的样式可以实现多行省略号，但我在Vue以及nuxt框架下开发，几经尝试都不起效果，一直认为是不是浏览器不支持这个样式。结果倒腾许久才发现是 autoprefixer这个插件干的\"好事\"。\n\n在原来的css中我们添加了`-webkit-box-orient: vertical` 这个样式。 但是经过 autoprefixer 处理之后，元素中竟然没有了！！  好吧。。。 手动加上之后就可以实现多行文本省略号的效果了。\n\n​\t那怎么解决 autoprefixer去掉 `-webkit-box-orient: vertical` 这个样式的问题呢？  很简单，在该样式样多加一条注释   `/*! autoprefixer: off */`   。\n\n​\t哦了，这下我们就能愉快的使用多行文本设置省略号了～\n\n\n\n\n\n\n\n","slug":"css多行文本省略号","published":1,"updated":"2019-03-21T05:19:42.250Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzgul1ao0013mmsf2u6bgptl","content":"<h1 id=\"CSS多行文本设置省略号\"><a href=\"#CSS多行文本设置省略号\" class=\"headerlink\" title=\"CSS多行文本设置省略号\"></a>CSS多行文本设置省略号</h1><h2 id=\"单行文本省略号\"><a href=\"#单行文本省略号\" class=\"headerlink\" title=\"单行文本省略号\"></a>单行文本省略号</h2><p>  如果要设置单行文本超出容器末尾显示省略号是非常简单的，通过:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">overflow</span>: <span class=\"selector-tag\">hidden</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">text-overflow</span>: <span class=\"selector-tag\">ellipsis</span>;</span><br></pre></td></tr></table></figure>\n<p>即可实现单行文本的省略号。</p>\n<h2 id=\"多行文本的省略号\"><a href=\"#多行文本的省略号\" class=\"headerlink\" title=\"多行文本的省略号\"></a>多行文本的省略号</h2><p>​    下面就是本文主要讨论的点了，如何实现多行文本超出区域显示省略号，或者说可以设置最多显示几行。</p>\n<a id=\"more\"></a>\n<p>​    实现的方式有多种，可以用css，也可以用js。 其中css也有多种方法, 但一些方法或多或少都有点hack的味道，下面我们介绍一种浏览器原生的多行文本显示的方法。</p>\n<p>在包含文本的标签中添加如下css样式:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">    <span class=\"attribute\">text-overflow</span>: ellipsis;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: -webkit-box;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-box-orient</span>: vertical;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-line-clamp</span>: <span class=\"number\">4</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Tips:  1. 只有中文内容在到达最大宽度时才会自动换行</p>\n<ol start=\"2\">\n<li>如果要英文支持的话需要添加  <code>word-break: break-all</code> 文本才会换行。</li>\n<li>经测试  此css样式在chrome、safari浏览器上能正常生效，但在Firefox上好像并不起效果。</li>\n</ol>\n</blockquote>\n<h2 id=\"踩坑\"><a href=\"#踩坑\" class=\"headerlink\" title=\"踩坑\"></a>踩坑</h2><p>​    单独尝试添加上面的样式可以实现多行省略号，但我在Vue以及nuxt框架下开发，几经尝试都不起效果，一直认为是不是浏览器不支持这个样式。结果倒腾许久才发现是 autoprefixer这个插件干的”好事”。</p>\n<p>在原来的css中我们添加了<code>-webkit-box-orient: vertical</code> 这个样式。 但是经过 autoprefixer 处理之后，元素中竟然没有了！！  好吧。。。 手动加上之后就可以实现多行文本省略号的效果了。</p>\n<p>​    那怎么解决 autoprefixer去掉 <code>-webkit-box-orient: vertical</code> 这个样式的问题呢？  很简单，在该样式样多加一条注释   <code>/*! autoprefixer: off */</code>   。</p>\n<p>​    哦了，这下我们就能愉快的使用多行文本设置省略号了～</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"CSS多行文本设置省略号\"><a href=\"#CSS多行文本设置省略号\" class=\"headerlink\" title=\"CSS多行文本设置省略号\"></a>CSS多行文本设置省略号</h1><h2 id=\"单行文本省略号\"><a href=\"#单行文本省略号\" class=\"headerlink\" title=\"单行文本省略号\"></a>单行文本省略号</h2><p>  如果要设置单行文本超出容器末尾显示省略号是非常简单的，通过:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">overflow</span>: <span class=\"selector-tag\">hidden</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">text-overflow</span>: <span class=\"selector-tag\">ellipsis</span>;</span><br></pre></td></tr></table></figure>\n<p>即可实现单行文本的省略号。</p>\n<h2 id=\"多行文本的省略号\"><a href=\"#多行文本的省略号\" class=\"headerlink\" title=\"多行文本的省略号\"></a>多行文本的省略号</h2><p>​    下面就是本文主要讨论的点了，如何实现多行文本超出区域显示省略号，或者说可以设置最多显示几行。</p>","more":"<p>​    实现的方式有多种，可以用css，也可以用js。 其中css也有多种方法, 但一些方法或多或少都有点hack的味道，下面我们介绍一种浏览器原生的多行文本显示的方法。</p>\n<p>在包含文本的标签中添加如下css样式:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">    <span class=\"attribute\">text-overflow</span>: ellipsis;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: -webkit-box;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-box-orient</span>: vertical;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-line-clamp</span>: <span class=\"number\">4</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Tips:  1. 只有中文内容在到达最大宽度时才会自动换行</p>\n<ol start=\"2\">\n<li>如果要英文支持的话需要添加  <code>word-break: break-all</code> 文本才会换行。</li>\n<li>经测试  此css样式在chrome、safari浏览器上能正常生效，但在Firefox上好像并不起效果。</li>\n</ol>\n</blockquote>\n<h2 id=\"踩坑\"><a href=\"#踩坑\" class=\"headerlink\" title=\"踩坑\"></a>踩坑</h2><p>​    单独尝试添加上面的样式可以实现多行省略号，但我在Vue以及nuxt框架下开发，几经尝试都不起效果，一直认为是不是浏览器不支持这个样式。结果倒腾许久才发现是 autoprefixer这个插件干的”好事”。</p>\n<p>在原来的css中我们添加了<code>-webkit-box-orient: vertical</code> 这个样式。 但是经过 autoprefixer 处理之后，元素中竟然没有了！！  好吧。。。 手动加上之后就可以实现多行文本省略号的效果了。</p>\n<p>​    那怎么解决 autoprefixer去掉 <code>-webkit-box-orient: vertical</code> 这个样式的问题呢？  很简单，在该样式样多加一条注释   <code>/*! autoprefixer: off */</code>   。</p>\n<p>​    哦了，这下我们就能愉快的使用多行文本设置省略号了～</p>"},{"title":"less 使用总结","date":"2020-11-04T14:59:29.000Z","_content":"\n# less  笔记📒\n\n\n\n\n\n## 变量\n\n\n\n```less\n@color: red;\n.a {\n  color: @color;\n}\n```\n\n\n\n<!-- more -->\n\n## 变量选择器\n\n```less\n@my-selector: swipper;\n\n.@{my-selector}-list {\n  color: red;\n}\n\n\n// 转换成\n.swipper-list {\n  color: red;\n}\n```\n\n\n\n\n\n## Properties\n\n```less\n@my-propertity: width;\n\n.block {\n  @{my-propertity}: 10px;\n}\n\n// 转换成\n.block {\n  width: 10px;\n}\n```\n\n用变量代替或**拼接**样式属性名\n\n\n\n## 用变量定义变量名\n\n\n\n```less\n@danger: red;\n\n.font {\n  @color: @danger;\n  color: @@color;\n}\n```\n\n\n\n## Properties as Variables\n\n```less\n@color: red;\n.bg {\n  color: @color;\t// red\n  background-color: $color;\t// red\n}\n```\n\n利用属性名做为变量将属性值传递过去\n\n\n\n## 逻辑函数\n\n```less\n.main {\n  color: if(boolean(true) , red, yellow)\n}\n\n// 转换成\n.main {\n  color: red;\n}\n```\n\n\n\n## list functions 列表函数\n\n```less\n// length (返回列表长度)\n@my-list: nav, bar;\n@len: length(@my-list);\n.w {\n  width: e(\"@{len}px\");\t// e函数作用是去掉引号\n}\n// ==> 转换成\n.w {\n  width: 2px;\n}\n\n\n// extract (返回列表中指定位置元素)\n@list-idx: 10px, 20px, 30px, 40px;\n.l {\n  width: extract(@list-idx, 2);\n  \n}\n// ====> 转换成\n.l {\n  width: 20px;\n}\n\n// range(创建一个范围的列表)\n@values: range(0, 100px, 20px);\n.w {\n  border: @values;\n}\n// =====> 转换成后\n.w {\n  border: 0px 20px 40px 60px 80px 100px;\n}\n\n// each(遍历列表，生成绑定的每个样式类)\n@myList: left, top, right, bottom;\neach(@myList, {\n  .my-p {\n   position: absolute;\n   @{value}: 0;\n  }\n})\n// =====> 转换成\n.my-p {\n  position: absolute;\n  left: 0;\n}\n.my-p {\n  position: absolute;\n  top: 0;\n}\n.my-p {\n  position: absolute;\n  right: 0;\n}\n.my-p {\n  position: absolute;\n  bottom: 0;\n}\n\n```\n\n\n\n## 循环输出\n\n\n\n````less\n// eg: 想输出如下的样式\n.block-a {\n  color: a;\n}\n.block-b {\n  color: b;\n}\n\n// 实现\n@colors: a,b,c,d;\n// 定义函数\n.blockCreater(@name, @color) {\n  .block-@{name} {\n    color:  @color;\n  }\n}\n// 循环生成\n.loop(@i) when (@i < length(@colors)+1){\n    .blockCreater(extract(@colors, @i),extract(@colors, @i));\n    .loop(@i+1);\n}\n.loop(1);\n// ====> 转换成\n.block-a {\n  color: a;\n}\n.block-b {\n  color: b;\n}\n.block-c {\n  color: c;\n}\n.block-d {\n  color: d;\n}\n\n````\n\n","source":"_posts/less笔记.md","raw":"---\ntitle: less 使用总结\ndate: 2020-11-04 22:59:29\ntags: \n - css\ncategories: \n - less\n---\n\n# less  笔记📒\n\n\n\n\n\n## 变量\n\n\n\n```less\n@color: red;\n.a {\n  color: @color;\n}\n```\n\n\n\n<!-- more -->\n\n## 变量选择器\n\n```less\n@my-selector: swipper;\n\n.@{my-selector}-list {\n  color: red;\n}\n\n\n// 转换成\n.swipper-list {\n  color: red;\n}\n```\n\n\n\n\n\n## Properties\n\n```less\n@my-propertity: width;\n\n.block {\n  @{my-propertity}: 10px;\n}\n\n// 转换成\n.block {\n  width: 10px;\n}\n```\n\n用变量代替或**拼接**样式属性名\n\n\n\n## 用变量定义变量名\n\n\n\n```less\n@danger: red;\n\n.font {\n  @color: @danger;\n  color: @@color;\n}\n```\n\n\n\n## Properties as Variables\n\n```less\n@color: red;\n.bg {\n  color: @color;\t// red\n  background-color: $color;\t// red\n}\n```\n\n利用属性名做为变量将属性值传递过去\n\n\n\n## 逻辑函数\n\n```less\n.main {\n  color: if(boolean(true) , red, yellow)\n}\n\n// 转换成\n.main {\n  color: red;\n}\n```\n\n\n\n## list functions 列表函数\n\n```less\n// length (返回列表长度)\n@my-list: nav, bar;\n@len: length(@my-list);\n.w {\n  width: e(\"@{len}px\");\t// e函数作用是去掉引号\n}\n// ==> 转换成\n.w {\n  width: 2px;\n}\n\n\n// extract (返回列表中指定位置元素)\n@list-idx: 10px, 20px, 30px, 40px;\n.l {\n  width: extract(@list-idx, 2);\n  \n}\n// ====> 转换成\n.l {\n  width: 20px;\n}\n\n// range(创建一个范围的列表)\n@values: range(0, 100px, 20px);\n.w {\n  border: @values;\n}\n// =====> 转换成后\n.w {\n  border: 0px 20px 40px 60px 80px 100px;\n}\n\n// each(遍历列表，生成绑定的每个样式类)\n@myList: left, top, right, bottom;\neach(@myList, {\n  .my-p {\n   position: absolute;\n   @{value}: 0;\n  }\n})\n// =====> 转换成\n.my-p {\n  position: absolute;\n  left: 0;\n}\n.my-p {\n  position: absolute;\n  top: 0;\n}\n.my-p {\n  position: absolute;\n  right: 0;\n}\n.my-p {\n  position: absolute;\n  bottom: 0;\n}\n\n```\n\n\n\n## 循环输出\n\n\n\n````less\n// eg: 想输出如下的样式\n.block-a {\n  color: a;\n}\n.block-b {\n  color: b;\n}\n\n// 实现\n@colors: a,b,c,d;\n// 定义函数\n.blockCreater(@name, @color) {\n  .block-@{name} {\n    color:  @color;\n  }\n}\n// 循环生成\n.loop(@i) when (@i < length(@colors)+1){\n    .blockCreater(extract(@colors, @i),extract(@colors, @i));\n    .loop(@i+1);\n}\n.loop(1);\n// ====> 转换成\n.block-a {\n  color: a;\n}\n.block-b {\n  color: b;\n}\n.block-c {\n  color: c;\n}\n.block-d {\n  color: d;\n}\n\n````\n\n","slug":"less笔记","published":1,"updated":"2021-03-30T06:57:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzgul1ap0017mmsfmten1cuk","content":"<h1 id=\"less-笔记📒\"><a href=\"#less-笔记📒\" class=\"headerlink\" title=\"less  笔记📒\"></a>less  笔记📒</h1><h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@color:</span> red;</span><br><span class=\"line\"><span class=\"selector-class\">.a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"variable\">@color</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"变量选择器\"><a href=\"#变量选择器\" class=\"headerlink\" title=\"变量选择器\"></a>变量选择器</h2><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@my-selector:</span> swipper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.@&#123;my-selector&#125;</span><span class=\"selector-tag\">-list</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 转换成</span></span><br><span class=\"line\"><span class=\"selector-class\">.swipper-list</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Properties\"><a href=\"#Properties\" class=\"headerlink\" title=\"Properties\"></a>Properties</h2><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@my-propertity:</span> width;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.block</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">@&#123;my-propertity&#125;</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 转换成</span></span><br><span class=\"line\"><span class=\"selector-class\">.block</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>用变量代替或<strong>拼接</strong>样式属性名</p>\n<h2 id=\"用变量定义变量名\"><a href=\"#用变量定义变量名\" class=\"headerlink\" title=\"用变量定义变量名\"></a>用变量定义变量名</h2><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@danger:</span> red;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.font</span> &#123;</span><br><span class=\"line\">  <span class=\"variable\">@color:</span> <span class=\"variable\">@danger</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"variable\">@@color</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Properties-as-Variables\"><a href=\"#Properties-as-Variables\" class=\"headerlink\" title=\"Properties as Variables\"></a>Properties as Variables</h2><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@color:</span> red;</span><br><span class=\"line\"><span class=\"selector-class\">.bg</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"variable\">@color</span>;\t<span class=\"comment\">// red</span></span><br><span class=\"line\">  background-color: $color;\t// red</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>利用属性名做为变量将属性值传递过去</p>\n<h2 id=\"逻辑函数\"><a href=\"#逻辑函数\" class=\"headerlink\" title=\"逻辑函数\"></a>逻辑函数</h2><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.main</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: if(boolean(true) , red, yellow)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 转换成</span></span><br><span class=\"line\"><span class=\"selector-class\">.main</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"list-functions-列表函数\"><a href=\"#list-functions-列表函数\" class=\"headerlink\" title=\"list functions 列表函数\"></a>list functions 列表函数</h2><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// length (返回列表长度)</span></span><br><span class=\"line\"><span class=\"variable\">@my-list:</span> nav, bar;</span><br><span class=\"line\"><span class=\"variable\">@len:</span> length(<span class=\"variable\">@my-list</span>);</span><br><span class=\"line\"><span class=\"selector-class\">.w</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: e(<span class=\"string\">\"@&#123;len&#125;px\"</span>);\t<span class=\"comment\">// e函数作用是去掉引号</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ==&gt; 转换成</span></span><br><span class=\"line\"><span class=\"selector-class\">.w</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">2px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// extract (返回列表中指定位置元素)</span></span><br><span class=\"line\"><span class=\"variable\">@list-idx:</span> <span class=\"number\">10px</span>, <span class=\"number\">20px</span>, <span class=\"number\">30px</span>, <span class=\"number\">40px</span>;</span><br><span class=\"line\"><span class=\"selector-class\">.l</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: extract(<span class=\"variable\">@list-idx</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ====&gt; 转换成</span></span><br><span class=\"line\"><span class=\"selector-class\">.l</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// range(创建一个范围的列表)</span></span><br><span class=\"line\"><span class=\"variable\">@values:</span> range(<span class=\"number\">0</span>, <span class=\"number\">100px</span>, <span class=\"number\">20px</span>);</span><br><span class=\"line\"><span class=\"selector-class\">.w</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"variable\">@values</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// =====&gt; 转换成后</span></span><br><span class=\"line\"><span class=\"selector-class\">.w</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">0px</span> <span class=\"number\">20px</span> <span class=\"number\">40px</span> <span class=\"number\">60px</span> <span class=\"number\">80px</span> <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// each(遍历列表，生成绑定的每个样式类)</span></span><br><span class=\"line\"><span class=\"variable\">@myList:</span> left, top, right, bottom;</span><br><span class=\"line\"><span class=\"selector-tag\">each</span>(<span class=\"variable\">@myList</span>, &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.my-p</span> &#123;</span><br><span class=\"line\">   <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">   <span class=\"attribute\">@&#123;value&#125;</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// =====&gt; 转换成</span></span><br><span class=\"line\"><span class=\"selector-class\">.my-p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.my-p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.my-p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.my-p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"循环输出\"><a href=\"#循环输出\" class=\"headerlink\" title=\"循环输出\"></a>循环输出</h2><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// eg: 想输出如下的样式</span></span><br><span class=\"line\"><span class=\"selector-class\">.block-a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.block-b</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实现</span></span><br><span class=\"line\"><span class=\"variable\">@colors:</span> a,b,c,d;</span><br><span class=\"line\"><span class=\"comment\">// 定义函数</span></span><br><span class=\"line\"><span class=\"selector-class\">.blockCreater</span>(<span class=\"variable\">@name</span>, <span class=\"variable\">@color</span>) &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.block-</span><span class=\"variable\">@&#123;name&#125;</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>:  <span class=\"variable\">@color</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 循环生成</span></span><br><span class=\"line\"><span class=\"selector-class\">.loop</span>(<span class=\"variable\">@i</span>) <span class=\"keyword\">when</span> (<span class=\"variable\">@i</span> &lt; length(<span class=\"variable\">@colors</span>)+<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    <span class=\"selector-class\">.blockCreater</span>(extract(<span class=\"variable\">@colors</span>, <span class=\"variable\">@i</span>),extract(<span class=\"variable\">@colors</span>, <span class=\"variable\">@i</span>));</span><br><span class=\"line\">    <span class=\"selector-class\">.loop</span>(<span class=\"variable\">@i</span>+<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.loop</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"comment\">// ====&gt; 转换成</span></span><br><span class=\"line\"><span class=\"selector-class\">.block-a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.block-b</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.block-c</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.block-d</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: d;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"less-笔记📒\"><a href=\"#less-笔记📒\" class=\"headerlink\" title=\"less  笔记📒\"></a>less  笔记📒</h1><h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@color:</span> red;</span><br><span class=\"line\"><span class=\"selector-class\">.a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"variable\">@color</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"变量选择器\"><a href=\"#变量选择器\" class=\"headerlink\" title=\"变量选择器\"></a>变量选择器</h2><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@my-selector:</span> swipper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.@&#123;my-selector&#125;</span><span class=\"selector-tag\">-list</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 转换成</span></span><br><span class=\"line\"><span class=\"selector-class\">.swipper-list</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Properties\"><a href=\"#Properties\" class=\"headerlink\" title=\"Properties\"></a>Properties</h2><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@my-propertity:</span> width;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.block</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">@&#123;my-propertity&#125;</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 转换成</span></span><br><span class=\"line\"><span class=\"selector-class\">.block</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>用变量代替或<strong>拼接</strong>样式属性名</p>\n<h2 id=\"用变量定义变量名\"><a href=\"#用变量定义变量名\" class=\"headerlink\" title=\"用变量定义变量名\"></a>用变量定义变量名</h2><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@danger:</span> red;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.font</span> &#123;</span><br><span class=\"line\">  <span class=\"variable\">@color:</span> <span class=\"variable\">@danger</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"variable\">@@color</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Properties-as-Variables\"><a href=\"#Properties-as-Variables\" class=\"headerlink\" title=\"Properties as Variables\"></a>Properties as Variables</h2><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@color:</span> red;</span><br><span class=\"line\"><span class=\"selector-class\">.bg</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"variable\">@color</span>;\t<span class=\"comment\">// red</span></span><br><span class=\"line\">  background-color: $color;\t// red</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>利用属性名做为变量将属性值传递过去</p>\n<h2 id=\"逻辑函数\"><a href=\"#逻辑函数\" class=\"headerlink\" title=\"逻辑函数\"></a>逻辑函数</h2><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.main</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: if(boolean(true) , red, yellow)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 转换成</span></span><br><span class=\"line\"><span class=\"selector-class\">.main</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"list-functions-列表函数\"><a href=\"#list-functions-列表函数\" class=\"headerlink\" title=\"list functions 列表函数\"></a>list functions 列表函数</h2><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// length (返回列表长度)</span></span><br><span class=\"line\"><span class=\"variable\">@my-list:</span> nav, bar;</span><br><span class=\"line\"><span class=\"variable\">@len:</span> length(<span class=\"variable\">@my-list</span>);</span><br><span class=\"line\"><span class=\"selector-class\">.w</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: e(<span class=\"string\">\"@&#123;len&#125;px\"</span>);\t<span class=\"comment\">// e函数作用是去掉引号</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ==&gt; 转换成</span></span><br><span class=\"line\"><span class=\"selector-class\">.w</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">2px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// extract (返回列表中指定位置元素)</span></span><br><span class=\"line\"><span class=\"variable\">@list-idx:</span> <span class=\"number\">10px</span>, <span class=\"number\">20px</span>, <span class=\"number\">30px</span>, <span class=\"number\">40px</span>;</span><br><span class=\"line\"><span class=\"selector-class\">.l</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: extract(<span class=\"variable\">@list-idx</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ====&gt; 转换成</span></span><br><span class=\"line\"><span class=\"selector-class\">.l</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// range(创建一个范围的列表)</span></span><br><span class=\"line\"><span class=\"variable\">@values:</span> range(<span class=\"number\">0</span>, <span class=\"number\">100px</span>, <span class=\"number\">20px</span>);</span><br><span class=\"line\"><span class=\"selector-class\">.w</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"variable\">@values</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// =====&gt; 转换成后</span></span><br><span class=\"line\"><span class=\"selector-class\">.w</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">0px</span> <span class=\"number\">20px</span> <span class=\"number\">40px</span> <span class=\"number\">60px</span> <span class=\"number\">80px</span> <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// each(遍历列表，生成绑定的每个样式类)</span></span><br><span class=\"line\"><span class=\"variable\">@myList:</span> left, top, right, bottom;</span><br><span class=\"line\"><span class=\"selector-tag\">each</span>(<span class=\"variable\">@myList</span>, &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.my-p</span> &#123;</span><br><span class=\"line\">   <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">   <span class=\"attribute\">@&#123;value&#125;</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// =====&gt; 转换成</span></span><br><span class=\"line\"><span class=\"selector-class\">.my-p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.my-p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.my-p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.my-p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"循环输出\"><a href=\"#循环输出\" class=\"headerlink\" title=\"循环输出\"></a>循环输出</h2><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// eg: 想输出如下的样式</span></span><br><span class=\"line\"><span class=\"selector-class\">.block-a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.block-b</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实现</span></span><br><span class=\"line\"><span class=\"variable\">@colors:</span> a,b,c,d;</span><br><span class=\"line\"><span class=\"comment\">// 定义函数</span></span><br><span class=\"line\"><span class=\"selector-class\">.blockCreater</span>(<span class=\"variable\">@name</span>, <span class=\"variable\">@color</span>) &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.block-</span><span class=\"variable\">@&#123;name&#125;</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>:  <span class=\"variable\">@color</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 循环生成</span></span><br><span class=\"line\"><span class=\"selector-class\">.loop</span>(<span class=\"variable\">@i</span>) <span class=\"keyword\">when</span> (<span class=\"variable\">@i</span> &lt; length(<span class=\"variable\">@colors</span>)+<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    <span class=\"selector-class\">.blockCreater</span>(extract(<span class=\"variable\">@colors</span>, <span class=\"variable\">@i</span>),extract(<span class=\"variable\">@colors</span>, <span class=\"variable\">@i</span>));</span><br><span class=\"line\">    <span class=\"selector-class\">.loop</span>(<span class=\"variable\">@i</span>+<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.loop</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"comment\">// ====&gt; 转换成</span></span><br><span class=\"line\"><span class=\"selector-class\">.block-a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.block-b</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.block-c</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.block-d</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: d;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"layout":"js","title":"同步、异步、任务队列","date":"2021-03-30T03:50:46.000Z","_content":"\n#   JS 同步、异步、任务队列\n\n\n\n> 浏览器是多线程，但 js 是单线程执行的。 其他的诸如事件、网络、定时器都有对应的线程。 当  js 代码同步执行时， 遇到非常耗时的操作可能就会阻塞，体现在页面上就是卡顿以及不能交互等。 为此 js 引入了异步的概念。\n\n\n\n<!-- more -->\n\n### 异步\n\n\n\n当执行 js 过程中遇到比较耗时的操作时， js 会采用异步的方式， 比如网络请求，定时器等。当发出请求或者调用定时器后，不会阻塞当前代码执行，而是会往后继续执行， 最终当网络请求数据回来后，或者定时器计时完毕后，会调用事先传入的回调函数。\n\n\n\n举个例子: \n\n```javascript\nfunction a() {\n  console.log('1')\n  setTimeout(() => {\n    console.log('2')\n  }, 1000)\n  console.log('3')\n}\n\na(); // 依次打印 1 - 3 - 2\n```\n\n可以看到， 打印并不是依次按照代码的顺序打印的， 而且定时器也并没有阻塞后面的打印，而是在打印了 `3` 之后， 一秒计时到了再打印的 `2`\n\n\n\n但是 js 是单线程的， 又是怎么实现的异步呢？\n\n\n\n因为 js 会维护一个任务队列 （task queue）。 异步任务有了结果后会依次存入任务队列中，**当主线程执行完代码处于空闲状态时**，就会从任务队列中取出事件，执行对应的回调函数。主线程为空时会重复的检查任务队列是否有任务，如果有会取出在主线程中执行，这个重复执行的过程就叫做 **事件循环**. \n\n\n\n![](http://www.ruanyifeng.com/blogimg/asset/2014/bg2014100802.png)\n\n\n\n> ps:  如任务队列中有定时任务时， 会等到定时时间到后才会取出在主线程中执行。\n\n\n\n### 任务队列\n\n> 任务队列分为 **宏任务队列**(macro task)  和 **微任务队列**（micro task）, 在一次事件循环中，优先执行完所有微任务队列， 接着才执行宏任务队列\n\n\n\n一次事件循环会执行一次从宏任务队列中取出的事件以及微任务队列中所有的微任务\n\n\n\n* 宏任务 （外部队列）\n  * 定时器\n  * 事件绑定\n  * ajax\n  * Node中fs可以进行异步的I/O操作\n  * ……\n* 微任务 （js 内部队列）\n  * Promise(async/await)\n  * process.nextTick （node中实现的api，把当前任务放到主栈最后执行，当主栈执行完，先执行nextTick，再到等待队列中找）\n  * ……\n\n\n\n### Node.js 中的任务队列\n\n\n\n> Node.js  中的事件循环、任务队列和浏览器环境中有些不一样。浏览器中一次事件循环会执行一次宏任务，并将微任务队列清空再执行页面渲染。Node.js 中则是一次事件循环会先将宏任务（文件、IO）全部执行完，再清空微任务队列。 **（11版本之前）** V11.x 版本之后进行了修复。\n\n","source":"_posts/同步、异步、任务队列.md","raw":"---\nlayout: js\ntitle: 同步、异步、任务队列\ndate: 2021-03-30 11:50:46\ncategories:\n - javascript\ntags:\n - javascript\n\n\n---\n\n#   JS 同步、异步、任务队列\n\n\n\n> 浏览器是多线程，但 js 是单线程执行的。 其他的诸如事件、网络、定时器都有对应的线程。 当  js 代码同步执行时， 遇到非常耗时的操作可能就会阻塞，体现在页面上就是卡顿以及不能交互等。 为此 js 引入了异步的概念。\n\n\n\n<!-- more -->\n\n### 异步\n\n\n\n当执行 js 过程中遇到比较耗时的操作时， js 会采用异步的方式， 比如网络请求，定时器等。当发出请求或者调用定时器后，不会阻塞当前代码执行，而是会往后继续执行， 最终当网络请求数据回来后，或者定时器计时完毕后，会调用事先传入的回调函数。\n\n\n\n举个例子: \n\n```javascript\nfunction a() {\n  console.log('1')\n  setTimeout(() => {\n    console.log('2')\n  }, 1000)\n  console.log('3')\n}\n\na(); // 依次打印 1 - 3 - 2\n```\n\n可以看到， 打印并不是依次按照代码的顺序打印的， 而且定时器也并没有阻塞后面的打印，而是在打印了 `3` 之后， 一秒计时到了再打印的 `2`\n\n\n\n但是 js 是单线程的， 又是怎么实现的异步呢？\n\n\n\n因为 js 会维护一个任务队列 （task queue）。 异步任务有了结果后会依次存入任务队列中，**当主线程执行完代码处于空闲状态时**，就会从任务队列中取出事件，执行对应的回调函数。主线程为空时会重复的检查任务队列是否有任务，如果有会取出在主线程中执行，这个重复执行的过程就叫做 **事件循环**. \n\n\n\n![](http://www.ruanyifeng.com/blogimg/asset/2014/bg2014100802.png)\n\n\n\n> ps:  如任务队列中有定时任务时， 会等到定时时间到后才会取出在主线程中执行。\n\n\n\n### 任务队列\n\n> 任务队列分为 **宏任务队列**(macro task)  和 **微任务队列**（micro task）, 在一次事件循环中，优先执行完所有微任务队列， 接着才执行宏任务队列\n\n\n\n一次事件循环会执行一次从宏任务队列中取出的事件以及微任务队列中所有的微任务\n\n\n\n* 宏任务 （外部队列）\n  * 定时器\n  * 事件绑定\n  * ajax\n  * Node中fs可以进行异步的I/O操作\n  * ……\n* 微任务 （js 内部队列）\n  * Promise(async/await)\n  * process.nextTick （node中实现的api，把当前任务放到主栈最后执行，当主栈执行完，先执行nextTick，再到等待队列中找）\n  * ……\n\n\n\n### Node.js 中的任务队列\n\n\n\n> Node.js  中的事件循环、任务队列和浏览器环境中有些不一样。浏览器中一次事件循环会执行一次宏任务，并将微任务队列清空再执行页面渲染。Node.js 中则是一次事件循环会先将宏任务（文件、IO）全部执行完，再清空微任务队列。 **（11版本之前）** V11.x 版本之后进行了修复。\n\n","slug":"同步、异步、任务队列","published":1,"updated":"2021-03-30T06:57:19.000Z","comments":1,"photos":[],"link":"","_id":"ckzgul1ar001bmmsffy3m7b9k","content":"<h1 id=\"JS-同步、异步、任务队列\"><a href=\"#JS-同步、异步、任务队列\" class=\"headerlink\" title=\"JS 同步、异步、任务队列\"></a>JS 同步、异步、任务队列</h1><blockquote>\n<p>浏览器是多线程，但 js 是单线程执行的。 其他的诸如事件、网络、定时器都有对应的线程。 当  js 代码同步执行时， 遇到非常耗时的操作可能就会阻塞，体现在页面上就是卡顿以及不能交互等。 为此 js 引入了异步的概念。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"异步\"><a href=\"#异步\" class=\"headerlink\" title=\"异步\"></a>异步</h3><p>当执行 js 过程中遇到比较耗时的操作时， js 会采用异步的方式， 比如网络请求，定时器等。当发出请求或者调用定时器后，不会阻塞当前代码执行，而是会往后继续执行， 最终当网络请求数据回来后，或者定时器计时完毕后，会调用事先传入的回调函数。</p>\n<p>举个例子: </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'1'</span>)</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'2'</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'3'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">a(); <span class=\"comment\">// 依次打印 1 - 3 - 2</span></span><br></pre></td></tr></table></figure>\n<p>可以看到， 打印并不是依次按照代码的顺序打印的， 而且定时器也并没有阻塞后面的打印，而是在打印了 <code>3</code> 之后， 一秒计时到了再打印的 <code>2</code></p>\n<p>但是 js 是单线程的， 又是怎么实现的异步呢？</p>\n<p>因为 js 会维护一个任务队列 （task queue）。 异步任务有了结果后会依次存入任务队列中，<strong>当主线程执行完代码处于空闲状态时</strong>，就会从任务队列中取出事件，执行对应的回调函数。主线程为空时会重复的检查任务队列是否有任务，如果有会取出在主线程中执行，这个重复执行的过程就叫做 <strong>事件循环</strong>. </p>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2014/bg2014100802.png\" alt=\"\"></p>\n<blockquote>\n<p>ps:  如任务队列中有定时任务时， 会等到定时时间到后才会取出在主线程中执行。</p>\n</blockquote>\n<h3 id=\"任务队列\"><a href=\"#任务队列\" class=\"headerlink\" title=\"任务队列\"></a>任务队列</h3><blockquote>\n<p>任务队列分为 <strong>宏任务队列</strong>(macro task)  和 <strong>微任务队列</strong>（micro task）, 在一次事件循环中，优先执行完所有微任务队列， 接着才执行宏任务队列</p>\n</blockquote>\n<p>一次事件循环会执行一次从宏任务队列中取出的事件以及微任务队列中所有的微任务</p>\n<ul>\n<li>宏任务 （外部队列）<ul>\n<li>定时器</li>\n<li>事件绑定</li>\n<li>ajax</li>\n<li>Node中fs可以进行异步的I/O操作</li>\n<li>……</li>\n</ul>\n</li>\n<li>微任务 （js 内部队列）<ul>\n<li>Promise(async/await)</li>\n<li>process.nextTick （node中实现的api，把当前任务放到主栈最后执行，当主栈执行完，先执行nextTick，再到等待队列中找）</li>\n<li>……</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Node-js-中的任务队列\"><a href=\"#Node-js-中的任务队列\" class=\"headerlink\" title=\"Node.js 中的任务队列\"></a>Node.js 中的任务队列</h3><blockquote>\n<p>Node.js  中的事件循环、任务队列和浏览器环境中有些不一样。浏览器中一次事件循环会执行一次宏任务，并将微任务队列清空再执行页面渲染。Node.js 中则是一次事件循环会先将宏任务（文件、IO）全部执行完，再清空微任务队列。 <strong>（11版本之前）</strong> V11.x 版本之后进行了修复。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h1 id=\"JS-同步、异步、任务队列\"><a href=\"#JS-同步、异步、任务队列\" class=\"headerlink\" title=\"JS 同步、异步、任务队列\"></a>JS 同步、异步、任务队列</h1><blockquote>\n<p>浏览器是多线程，但 js 是单线程执行的。 其他的诸如事件、网络、定时器都有对应的线程。 当  js 代码同步执行时， 遇到非常耗时的操作可能就会阻塞，体现在页面上就是卡顿以及不能交互等。 为此 js 引入了异步的概念。</p>\n</blockquote>","more":"<h3 id=\"异步\"><a href=\"#异步\" class=\"headerlink\" title=\"异步\"></a>异步</h3><p>当执行 js 过程中遇到比较耗时的操作时， js 会采用异步的方式， 比如网络请求，定时器等。当发出请求或者调用定时器后，不会阻塞当前代码执行，而是会往后继续执行， 最终当网络请求数据回来后，或者定时器计时完毕后，会调用事先传入的回调函数。</p>\n<p>举个例子: </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'1'</span>)</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'2'</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'3'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">a(); <span class=\"comment\">// 依次打印 1 - 3 - 2</span></span><br></pre></td></tr></table></figure>\n<p>可以看到， 打印并不是依次按照代码的顺序打印的， 而且定时器也并没有阻塞后面的打印，而是在打印了 <code>3</code> 之后， 一秒计时到了再打印的 <code>2</code></p>\n<p>但是 js 是单线程的， 又是怎么实现的异步呢？</p>\n<p>因为 js 会维护一个任务队列 （task queue）。 异步任务有了结果后会依次存入任务队列中，<strong>当主线程执行完代码处于空闲状态时</strong>，就会从任务队列中取出事件，执行对应的回调函数。主线程为空时会重复的检查任务队列是否有任务，如果有会取出在主线程中执行，这个重复执行的过程就叫做 <strong>事件循环</strong>. </p>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2014/bg2014100802.png\" alt=\"\"></p>\n<blockquote>\n<p>ps:  如任务队列中有定时任务时， 会等到定时时间到后才会取出在主线程中执行。</p>\n</blockquote>\n<h3 id=\"任务队列\"><a href=\"#任务队列\" class=\"headerlink\" title=\"任务队列\"></a>任务队列</h3><blockquote>\n<p>任务队列分为 <strong>宏任务队列</strong>(macro task)  和 <strong>微任务队列</strong>（micro task）, 在一次事件循环中，优先执行完所有微任务队列， 接着才执行宏任务队列</p>\n</blockquote>\n<p>一次事件循环会执行一次从宏任务队列中取出的事件以及微任务队列中所有的微任务</p>\n<ul>\n<li>宏任务 （外部队列）<ul>\n<li>定时器</li>\n<li>事件绑定</li>\n<li>ajax</li>\n<li>Node中fs可以进行异步的I/O操作</li>\n<li>……</li>\n</ul>\n</li>\n<li>微任务 （js 内部队列）<ul>\n<li>Promise(async/await)</li>\n<li>process.nextTick （node中实现的api，把当前任务放到主栈最后执行，当主栈执行完，先执行nextTick，再到等待队列中找）</li>\n<li>……</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Node-js-中的任务队列\"><a href=\"#Node-js-中的任务队列\" class=\"headerlink\" title=\"Node.js 中的任务队列\"></a>Node.js 中的任务队列</h3><blockquote>\n<p>Node.js  中的事件循环、任务队列和浏览器环境中有些不一样。浏览器中一次事件循环会执行一次宏任务，并将微任务队列清空再执行页面渲染。Node.js 中则是一次事件循环会先将宏任务（文件、IO）全部执行完，再清空微任务队列。 <strong>（11版本之前）</strong> V11.x 版本之后进行了修复。</p>\n</blockquote>"},{"title":"前端知识点梳理 --part one","date":"2020-06-10T15:36:23.000Z","_content":"\n# 前端知识点梳理   --part one\n\n\n\n## 基础部分\n\n### 1.  Html 语义化的好处 ?\n\n* 使html的结构更清晰，更直观，更易于seo\n\n\n\n\n\n###  2. 清除浮动的方法有哪些 ？\n\n* 定义一个空标签再浮动元素之后。 然后给其 <code>clear: both</code> \n* 定义伪元素来清除浮动\n\n> 使用overflow:auto（空标签元素清除浮动而不得不增加无意代码的弊端,,使用zoom:1用于兼容IE）。\n\n\n\n<!-- more -->\n\n### 3. img标签 alt 和 title的异同\n\n*  alt 是当图片显示不出来时显示的文字。\n* title 是hover时显示的提示文字。 (描述性文字， 一直都有)\n\n* 总结： alt是当正常图片显示不出来时的替代内容。title是一直存在的描述性内容。\n\n\n\n### 4. 行内元素有哪些？块级元素有哪些？ 空(void)元素有那些?\n\n*  行内元素: i、strong、b、bm、a、span、input、select、img\n* 块级元素: div、h(x)、p、ul、ol、li\n* 空元素 br\n\n\n\n### 5. html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？\n\n1. 新增的元素\n\n* 语义化元素: article、section、header、nav、footer\n* 音视频元素：video、audio\n* 画布元素： canvas\n* 表单控件： time、email、date、calendar……\n* 缓存 local storage、session storage\n* 新技术： webworker(为 JavaScript 创造多线程环境)、geolacation、websocket\n\n2. 移除的元素\n\n* frame、frameset，noframes\n* 纯表现的元素： basefont，**big**，center，font, s，strike，tt，u\n\n3. 如何支持新的标签\n\n* 直接使用成熟的框架、使用最多的是html5shim框架\n\n4. 如何区分是html5\n\n* docType/新增的元素\n\n\n\n### 6. 介绍一下CSS的盒子模型？\n\n* IE盒模型 ｜ 标准盒模型\n* IE盒模型的计算方式是 border + padding + content  = 宽 ｜ 高\n* 标准盒模型计算方式是 content = 宽 ｜ 高\n\n\n\n### 7. css3新增属性?\n\n* Border- 边框(shadow、img、radius)\n* Background-背景 (image、size、origin(相对不同盒模型)、clip(相对不同盒模型裁剪)) --- (border-box、content-box、padding-box)\n* gradients 渐变。   线性渐变 -- **Linear Gradients**  。  径向渐变 -- **Radial Gradients**\n* 文字效果  (text-shadow: 文字阴影、box-shadow: 盒子阴影 、text-overflow:  文字溢出处理、 word-wrap:  文字换行、 word-break： 拆分换行,非中日韩文本)  字体: @font-face\n* 2D、3D转换  .   2D : translate(移动)、 rotate(旋转)、 scale(缩放)、 matrix(包含旋转，缩放，移动（平移）和倾斜功能。 3D: 2D属性的3D体现\n* 过渡: transition\n* 动画  @keyframes 规则 。 animation ： 使创建的规则生效\n* 多列布局  column-xxx\n* 弹性布局 flex\n* 媒体查询 @media xxx and (max-with: xxxpx) {}\n\n","source":"_posts/前端知识点梳理   --part one.md","raw":"---\ntitle: 前端知识点梳理 --part one\ndate: 2020-06-10 23:36:23\ncategories:\n - javascript\ntags:\n - summary\n---\n\n# 前端知识点梳理   --part one\n\n\n\n## 基础部分\n\n### 1.  Html 语义化的好处 ?\n\n* 使html的结构更清晰，更直观，更易于seo\n\n\n\n\n\n###  2. 清除浮动的方法有哪些 ？\n\n* 定义一个空标签再浮动元素之后。 然后给其 <code>clear: both</code> \n* 定义伪元素来清除浮动\n\n> 使用overflow:auto（空标签元素清除浮动而不得不增加无意代码的弊端,,使用zoom:1用于兼容IE）。\n\n\n\n<!-- more -->\n\n### 3. img标签 alt 和 title的异同\n\n*  alt 是当图片显示不出来时显示的文字。\n* title 是hover时显示的提示文字。 (描述性文字， 一直都有)\n\n* 总结： alt是当正常图片显示不出来时的替代内容。title是一直存在的描述性内容。\n\n\n\n### 4. 行内元素有哪些？块级元素有哪些？ 空(void)元素有那些?\n\n*  行内元素: i、strong、b、bm、a、span、input、select、img\n* 块级元素: div、h(x)、p、ul、ol、li\n* 空元素 br\n\n\n\n### 5. html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？\n\n1. 新增的元素\n\n* 语义化元素: article、section、header、nav、footer\n* 音视频元素：video、audio\n* 画布元素： canvas\n* 表单控件： time、email、date、calendar……\n* 缓存 local storage、session storage\n* 新技术： webworker(为 JavaScript 创造多线程环境)、geolacation、websocket\n\n2. 移除的元素\n\n* frame、frameset，noframes\n* 纯表现的元素： basefont，**big**，center，font, s，strike，tt，u\n\n3. 如何支持新的标签\n\n* 直接使用成熟的框架、使用最多的是html5shim框架\n\n4. 如何区分是html5\n\n* docType/新增的元素\n\n\n\n### 6. 介绍一下CSS的盒子模型？\n\n* IE盒模型 ｜ 标准盒模型\n* IE盒模型的计算方式是 border + padding + content  = 宽 ｜ 高\n* 标准盒模型计算方式是 content = 宽 ｜ 高\n\n\n\n### 7. css3新增属性?\n\n* Border- 边框(shadow、img、radius)\n* Background-背景 (image、size、origin(相对不同盒模型)、clip(相对不同盒模型裁剪)) --- (border-box、content-box、padding-box)\n* gradients 渐变。   线性渐变 -- **Linear Gradients**  。  径向渐变 -- **Radial Gradients**\n* 文字效果  (text-shadow: 文字阴影、box-shadow: 盒子阴影 、text-overflow:  文字溢出处理、 word-wrap:  文字换行、 word-break： 拆分换行,非中日韩文本)  字体: @font-face\n* 2D、3D转换  .   2D : translate(移动)、 rotate(旋转)、 scale(缩放)、 matrix(包含旋转，缩放，移动（平移）和倾斜功能。 3D: 2D属性的3D体现\n* 过渡: transition\n* 动画  @keyframes 规则 。 animation ： 使创建的规则生效\n* 多列布局  column-xxx\n* 弹性布局 flex\n* 媒体查询 @media xxx and (max-with: xxxpx) {}\n\n","slug":"前端知识点梳理   --part one","published":1,"updated":"2020-07-20T15:14:23.307Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzgul1as001dmmsfwh8ntcu8","content":"<h1 id=\"前端知识点梳理-–part-one\"><a href=\"#前端知识点梳理-–part-one\" class=\"headerlink\" title=\"前端知识点梳理   –part one\"></a>前端知识点梳理   –part one</h1><h2 id=\"基础部分\"><a href=\"#基础部分\" class=\"headerlink\" title=\"基础部分\"></a>基础部分</h2><h3 id=\"1-Html-语义化的好处\"><a href=\"#1-Html-语义化的好处\" class=\"headerlink\" title=\"1.  Html 语义化的好处 ?\"></a>1.  Html 语义化的好处 ?</h3><ul>\n<li>使html的结构更清晰，更直观，更易于seo</li>\n</ul>\n<h3 id=\"2-清除浮动的方法有哪些-？\"><a href=\"#2-清除浮动的方法有哪些-？\" class=\"headerlink\" title=\"2. 清除浮动的方法有哪些 ？\"></a>2. 清除浮动的方法有哪些 ？</h3><ul>\n<li>定义一个空标签再浮动元素之后。 然后给其 <code>clear: both</code> </li>\n<li>定义伪元素来清除浮动</li>\n</ul>\n<blockquote>\n<p>使用overflow:auto（空标签元素清除浮动而不得不增加无意代码的弊端,,使用zoom:1用于兼容IE）。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"3-img标签-alt-和-title的异同\"><a href=\"#3-img标签-alt-和-title的异同\" class=\"headerlink\" title=\"3. img标签 alt 和 title的异同\"></a>3. img标签 alt 和 title的异同</h3><ul>\n<li>alt 是当图片显示不出来时显示的文字。</li>\n<li><p>title 是hover时显示的提示文字。 (描述性文字， 一直都有)</p>\n</li>\n<li><p>总结： alt是当正常图片显示不出来时的替代内容。title是一直存在的描述性内容。</p>\n</li>\n</ul>\n<h3 id=\"4-行内元素有哪些？块级元素有哪些？-空-void-元素有那些\"><a href=\"#4-行内元素有哪些？块级元素有哪些？-空-void-元素有那些\" class=\"headerlink\" title=\"4. 行内元素有哪些？块级元素有哪些？ 空(void)元素有那些?\"></a>4. 行内元素有哪些？块级元素有哪些？ 空(void)元素有那些?</h3><ul>\n<li>行内元素: i、strong、b、bm、a、span、input、select、img</li>\n<li>块级元素: div、h(x)、p、ul、ol、li</li>\n<li>空元素 br</li>\n</ul>\n<h3 id=\"5-html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分-HTML-和-HTML5？\"><a href=\"#5-html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分-HTML-和-HTML5？\" class=\"headerlink\" title=\"5. html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？\"></a>5. html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？</h3><ol>\n<li>新增的元素</li>\n</ol>\n<ul>\n<li>语义化元素: article、section、header、nav、footer</li>\n<li>音视频元素：video、audio</li>\n<li>画布元素： canvas</li>\n<li>表单控件： time、email、date、calendar……</li>\n<li>缓存 local storage、session storage</li>\n<li>新技术： webworker(为 JavaScript 创造多线程环境)、geolacation、websocket</li>\n</ul>\n<ol start=\"2\">\n<li>移除的元素</li>\n</ol>\n<ul>\n<li>frame、frameset，noframes</li>\n<li>纯表现的元素： basefont，<strong>big</strong>，center，font, s，strike，tt，u</li>\n</ul>\n<ol start=\"3\">\n<li>如何支持新的标签</li>\n</ol>\n<ul>\n<li>直接使用成熟的框架、使用最多的是html5shim框架</li>\n</ul>\n<ol start=\"4\">\n<li>如何区分是html5</li>\n</ol>\n<ul>\n<li>docType/新增的元素</li>\n</ul>\n<h3 id=\"6-介绍一下CSS的盒子模型？\"><a href=\"#6-介绍一下CSS的盒子模型？\" class=\"headerlink\" title=\"6. 介绍一下CSS的盒子模型？\"></a>6. 介绍一下CSS的盒子模型？</h3><ul>\n<li>IE盒模型 ｜ 标准盒模型</li>\n<li>IE盒模型的计算方式是 border + padding + content  = 宽 ｜ 高</li>\n<li>标准盒模型计算方式是 content = 宽 ｜ 高</li>\n</ul>\n<h3 id=\"7-css3新增属性\"><a href=\"#7-css3新增属性\" class=\"headerlink\" title=\"7. css3新增属性?\"></a>7. css3新增属性?</h3><ul>\n<li>Border- 边框(shadow、img、radius)</li>\n<li>Background-背景 (image、size、origin(相对不同盒模型)、clip(相对不同盒模型裁剪)) — (border-box、content-box、padding-box)</li>\n<li>gradients 渐变。   线性渐变 – <strong>Linear Gradients</strong>  。  径向渐变 – <strong>Radial Gradients</strong></li>\n<li>文字效果  (text-shadow: 文字阴影、box-shadow: 盒子阴影 、text-overflow:  文字溢出处理、 word-wrap:  文字换行、 word-break： 拆分换行,非中日韩文本)  字体: @font-face</li>\n<li>2D、3D转换  .   2D : translate(移动)、 rotate(旋转)、 scale(缩放)、 matrix(包含旋转，缩放，移动（平移）和倾斜功能。 3D: 2D属性的3D体现</li>\n<li>过渡: transition</li>\n<li>动画  @keyframes 规则 。 animation ： 使创建的规则生效</li>\n<li>多列布局  column-xxx</li>\n<li>弹性布局 flex</li>\n<li>媒体查询 @media xxx and (max-with: xxxpx) {}</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"前端知识点梳理-–part-one\"><a href=\"#前端知识点梳理-–part-one\" class=\"headerlink\" title=\"前端知识点梳理   –part one\"></a>前端知识点梳理   –part one</h1><h2 id=\"基础部分\"><a href=\"#基础部分\" class=\"headerlink\" title=\"基础部分\"></a>基础部分</h2><h3 id=\"1-Html-语义化的好处\"><a href=\"#1-Html-语义化的好处\" class=\"headerlink\" title=\"1.  Html 语义化的好处 ?\"></a>1.  Html 语义化的好处 ?</h3><ul>\n<li>使html的结构更清晰，更直观，更易于seo</li>\n</ul>\n<h3 id=\"2-清除浮动的方法有哪些-？\"><a href=\"#2-清除浮动的方法有哪些-？\" class=\"headerlink\" title=\"2. 清除浮动的方法有哪些 ？\"></a>2. 清除浮动的方法有哪些 ？</h3><ul>\n<li>定义一个空标签再浮动元素之后。 然后给其 <code>clear: both</code> </li>\n<li>定义伪元素来清除浮动</li>\n</ul>\n<blockquote>\n<p>使用overflow:auto（空标签元素清除浮动而不得不增加无意代码的弊端,,使用zoom:1用于兼容IE）。</p>\n</blockquote>","more":"<h3 id=\"3-img标签-alt-和-title的异同\"><a href=\"#3-img标签-alt-和-title的异同\" class=\"headerlink\" title=\"3. img标签 alt 和 title的异同\"></a>3. img标签 alt 和 title的异同</h3><ul>\n<li>alt 是当图片显示不出来时显示的文字。</li>\n<li><p>title 是hover时显示的提示文字。 (描述性文字， 一直都有)</p>\n</li>\n<li><p>总结： alt是当正常图片显示不出来时的替代内容。title是一直存在的描述性内容。</p>\n</li>\n</ul>\n<h3 id=\"4-行内元素有哪些？块级元素有哪些？-空-void-元素有那些\"><a href=\"#4-行内元素有哪些？块级元素有哪些？-空-void-元素有那些\" class=\"headerlink\" title=\"4. 行内元素有哪些？块级元素有哪些？ 空(void)元素有那些?\"></a>4. 行内元素有哪些？块级元素有哪些？ 空(void)元素有那些?</h3><ul>\n<li>行内元素: i、strong、b、bm、a、span、input、select、img</li>\n<li>块级元素: div、h(x)、p、ul、ol、li</li>\n<li>空元素 br</li>\n</ul>\n<h3 id=\"5-html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分-HTML-和-HTML5？\"><a href=\"#5-html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分-HTML-和-HTML5？\" class=\"headerlink\" title=\"5. html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？\"></a>5. html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？</h3><ol>\n<li>新增的元素</li>\n</ol>\n<ul>\n<li>语义化元素: article、section、header、nav、footer</li>\n<li>音视频元素：video、audio</li>\n<li>画布元素： canvas</li>\n<li>表单控件： time、email、date、calendar……</li>\n<li>缓存 local storage、session storage</li>\n<li>新技术： webworker(为 JavaScript 创造多线程环境)、geolacation、websocket</li>\n</ul>\n<ol start=\"2\">\n<li>移除的元素</li>\n</ol>\n<ul>\n<li>frame、frameset，noframes</li>\n<li>纯表现的元素： basefont，<strong>big</strong>，center，font, s，strike，tt，u</li>\n</ul>\n<ol start=\"3\">\n<li>如何支持新的标签</li>\n</ol>\n<ul>\n<li>直接使用成熟的框架、使用最多的是html5shim框架</li>\n</ul>\n<ol start=\"4\">\n<li>如何区分是html5</li>\n</ol>\n<ul>\n<li>docType/新增的元素</li>\n</ul>\n<h3 id=\"6-介绍一下CSS的盒子模型？\"><a href=\"#6-介绍一下CSS的盒子模型？\" class=\"headerlink\" title=\"6. 介绍一下CSS的盒子模型？\"></a>6. 介绍一下CSS的盒子模型？</h3><ul>\n<li>IE盒模型 ｜ 标准盒模型</li>\n<li>IE盒模型的计算方式是 border + padding + content  = 宽 ｜ 高</li>\n<li>标准盒模型计算方式是 content = 宽 ｜ 高</li>\n</ul>\n<h3 id=\"7-css3新增属性\"><a href=\"#7-css3新增属性\" class=\"headerlink\" title=\"7. css3新增属性?\"></a>7. css3新增属性?</h3><ul>\n<li>Border- 边框(shadow、img、radius)</li>\n<li>Background-背景 (image、size、origin(相对不同盒模型)、clip(相对不同盒模型裁剪)) — (border-box、content-box、padding-box)</li>\n<li>gradients 渐变。   线性渐变 – <strong>Linear Gradients</strong>  。  径向渐变 – <strong>Radial Gradients</strong></li>\n<li>文字效果  (text-shadow: 文字阴影、box-shadow: 盒子阴影 、text-overflow:  文字溢出处理、 word-wrap:  文字换行、 word-break： 拆分换行,非中日韩文本)  字体: @font-face</li>\n<li>2D、3D转换  .   2D : translate(移动)、 rotate(旋转)、 scale(缩放)、 matrix(包含旋转，缩放，移动（平移）和倾斜功能。 3D: 2D属性的3D体现</li>\n<li>过渡: transition</li>\n<li>动画  @keyframes 规则 。 animation ： 使创建的规则生效</li>\n<li>多列布局  column-xxx</li>\n<li>弹性布局 flex</li>\n<li>媒体查询 @media xxx and (max-with: xxxpx) {}</li>\n</ul>"},{"title":"css3 水位图波纹动效","date":"2020-07-20T14:57:23.000Z","_content":"\n\n\n# 水波纹动效\n\n\n\n直接上代码\n\n\n\n通过遮罩和动画实现水位图波纹特效\n\n\n\n可以通过输入0-100的数字或者 拖动滑动条调节水位的高低 (通过修改wave-mask的top)\n\n<!-- more -->\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Document</title>\n    <style>\n      * {\n        box-sizing: border-box;\n        padding: 0;\n        margin: 0;\n      }\n      .container {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        border-radius: 50%;\n        border: 3px solid #67c23a;\n        background: #ffffff;\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        padding: 7px 7px;\n        overflow: hidden;\n      }\n      .wave {\n        position: relative;\n        width: 100px;\n        height: 100px;\n        background-image: linear-gradient(-180deg, #aaff80 13%, #67c23a 91%);\n        border-radius: 50%;\n        box-shadow: 1px 3px 3px 0 rgba(139, 139, 139, 0.822);\n      }\n      .wave-mask {\n        position: absolute;\n        width: 200px;\n        height: 200px;\n        top: 100%;\n        left: 50%;\n        border-radius: 39%;\n        background-color: white;\n        transform: translate(-50%, -100%) rotate(0);\n        animation: toRotate 10s linear infinite;\n        z-index: 20;\n      }\n\n      @keyframes toRotate {\n        50% {\n          transform: translate(-50%, -100%) rotate(180deg);\n        }\n        100% {\n          transform: translate(-50%, -100%) rotate(360deg);\n        }\n      }\n      .tips {\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        width: 50px;\n        height: 50px;\n        transform: translate(-25px, -25px);\n        text-align: center;\n        line-height: 50px;\n        z-index: 30;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"container\">\n      <div class=\"wave\"></div>\n      <div class=\"wave-mask\"></div>\n      <div class=\"tips\">0%</div>\n    </div>\n\n    <div style=\"display: flex; justify-content: center; align-items: center; margin-top: 200px;\">\n      <input type=\"number\" step=\"5\">\n      <button style=\"margin-left: 20px;\" id=\"btn\">按钮</button>\n      <input style=\"margin-left: 40px;\" id=\"range\" type=\"range\" min=\"0\" max=\"100\" step=\"5\" value=\"0\" />\n    </div>\n    <script>\n      let btn = document.getElementById('btn')\n      let mask = document.getElementsByClassName('wave-mask')[0]\n      let ipt = document.getElementsByTagName('input')[0]\n      let tips = document.getElementsByClassName('tips')[0]\n      let range = document.getElementById('range')\n\n      btn.onclick = function(e) {\n        let value = (100 - +ipt.value)\n        mask.style.top = value + '%'\n        tips.innerHTML = ipt.value + '%'\n      }\n\n      range.onchange = function(e) {\n        let value = (100 - +e.target.value)\n        mask.style.top = value + '%'\n        tips.innerHTML = e.target.value + '%'\n      }\n    </script>\n  </body>\n</html>\n\n```\n\n","source":"_posts/水波纹动效.md","raw":"---\ntitle: css3 水位图波纹动效\ndate: 2020-07-20 22:57:23\ncategories:\n - css\ntags:\n - css\n---\n\n\n\n# 水波纹动效\n\n\n\n直接上代码\n\n\n\n通过遮罩和动画实现水位图波纹特效\n\n\n\n可以通过输入0-100的数字或者 拖动滑动条调节水位的高低 (通过修改wave-mask的top)\n\n<!-- more -->\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Document</title>\n    <style>\n      * {\n        box-sizing: border-box;\n        padding: 0;\n        margin: 0;\n      }\n      .container {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        border-radius: 50%;\n        border: 3px solid #67c23a;\n        background: #ffffff;\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        padding: 7px 7px;\n        overflow: hidden;\n      }\n      .wave {\n        position: relative;\n        width: 100px;\n        height: 100px;\n        background-image: linear-gradient(-180deg, #aaff80 13%, #67c23a 91%);\n        border-radius: 50%;\n        box-shadow: 1px 3px 3px 0 rgba(139, 139, 139, 0.822);\n      }\n      .wave-mask {\n        position: absolute;\n        width: 200px;\n        height: 200px;\n        top: 100%;\n        left: 50%;\n        border-radius: 39%;\n        background-color: white;\n        transform: translate(-50%, -100%) rotate(0);\n        animation: toRotate 10s linear infinite;\n        z-index: 20;\n      }\n\n      @keyframes toRotate {\n        50% {\n          transform: translate(-50%, -100%) rotate(180deg);\n        }\n        100% {\n          transform: translate(-50%, -100%) rotate(360deg);\n        }\n      }\n      .tips {\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        width: 50px;\n        height: 50px;\n        transform: translate(-25px, -25px);\n        text-align: center;\n        line-height: 50px;\n        z-index: 30;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"container\">\n      <div class=\"wave\"></div>\n      <div class=\"wave-mask\"></div>\n      <div class=\"tips\">0%</div>\n    </div>\n\n    <div style=\"display: flex; justify-content: center; align-items: center; margin-top: 200px;\">\n      <input type=\"number\" step=\"5\">\n      <button style=\"margin-left: 20px;\" id=\"btn\">按钮</button>\n      <input style=\"margin-left: 40px;\" id=\"range\" type=\"range\" min=\"0\" max=\"100\" step=\"5\" value=\"0\" />\n    </div>\n    <script>\n      let btn = document.getElementById('btn')\n      let mask = document.getElementsByClassName('wave-mask')[0]\n      let ipt = document.getElementsByTagName('input')[0]\n      let tips = document.getElementsByClassName('tips')[0]\n      let range = document.getElementById('range')\n\n      btn.onclick = function(e) {\n        let value = (100 - +ipt.value)\n        mask.style.top = value + '%'\n        tips.innerHTML = ipt.value + '%'\n      }\n\n      range.onchange = function(e) {\n        let value = (100 - +e.target.value)\n        mask.style.top = value + '%'\n        tips.innerHTML = e.target.value + '%'\n      }\n    </script>\n  </body>\n</html>\n\n```\n\n","slug":"水波纹动效","published":1,"updated":"2020-07-20T14:58:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzgul1at001gmmsf5viem5im","content":"<h1 id=\"水波纹动效\"><a href=\"#水波纹动效\" class=\"headerlink\" title=\"水波纹动效\"></a>水波纹动效</h1><p>直接上代码</p>\n<p>通过遮罩和动画实现水位图波纹特效</p>\n<p>可以通过输入0-100的数字或者 拖动滑动条调节水位的高低 (通过修改wave-mask的top)</p>\n<a id=\"more\"></a>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">      * &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        box-sizing: border-box;</span></span><br><span class=\"line\"><span class=\"undefined\">        padding: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">        margin: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        display: flex;</span></span><br><span class=\"line\"><span class=\"undefined\">        justify-content: center;</span></span><br><span class=\"line\"><span class=\"undefined\">        align-items: center;</span></span><br><span class=\"line\"><span class=\"undefined\">        border-radius: 50%;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">border</span>: 3<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#67c23a</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#ffffff</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">        position: absolute;</span></span><br><span class=\"line\"><span class=\"undefined\">        top: 50%;</span></span><br><span class=\"line\"><span class=\"undefined\">        left: 50%;</span></span><br><span class=\"line\"><span class=\"undefined\">        transform: translate(-50%, -50%);</span></span><br><span class=\"line\"><span class=\"undefined\">        padding: 7px 7px;</span></span><br><span class=\"line\"><span class=\"undefined\">        overflow: hidden;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-class\">.wave</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        position: relative;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 100px;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 100px;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">background-image</span>: <span class=\"selector-tag\">linear-gradient</span>(<span class=\"selector-tag\">-180deg</span>, <span class=\"selector-id\">#aaff80</span> 13%, <span class=\"selector-id\">#67c23a</span> 91%);</span></span><br><span class=\"line\"><span class=\"undefined\">        border-radius: 50%;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">box-shadow</span>: 1<span class=\"selector-tag\">px</span> 3<span class=\"selector-tag\">px</span> 3<span class=\"selector-tag\">px</span> 0 <span class=\"selector-tag\">rgba</span>(139, 139, 139, 0<span class=\"selector-class\">.822</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-class\">.wave-mask</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        position: absolute;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">        top: 100%;</span></span><br><span class=\"line\"><span class=\"undefined\">        left: 50%;</span></span><br><span class=\"line\"><span class=\"undefined\">        border-radius: 39%;</span></span><br><span class=\"line\"><span class=\"undefined\">        background-color: white;</span></span><br><span class=\"line\"><span class=\"undefined\">        transform: translate(-50%, -100%) rotate(0);</span></span><br><span class=\"line\"><span class=\"undefined\">        animation: toRotate 10s linear infinite;</span></span><br><span class=\"line\"><span class=\"undefined\">        z-index: 20;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">      @<span class=\"keyword\">keyframes</span> toRotate &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        50% &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">          transform: translate(-50%, -100%) rotate(180deg);</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        100% &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">          transform: translate(-50%, -100%) rotate(360deg);</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-class\">.tips</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        position: absolute;</span></span><br><span class=\"line\"><span class=\"undefined\">        top: 50%;</span></span><br><span class=\"line\"><span class=\"undefined\">        left: 50%;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 50px;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 50px;</span></span><br><span class=\"line\"><span class=\"undefined\">        transform: translate(-25px, -25px);</span></span><br><span class=\"line\"><span class=\"undefined\">        text-align: center;</span></span><br><span class=\"line\"><span class=\"undefined\">        line-height: 50px;</span></span><br><span class=\"line\"><span class=\"undefined\">        z-index: 30;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wave\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wave-mask\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"tips\"</span>&gt;</span>0%<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"display: flex; justify-content: center; align-items: center; margin-top: 200px;\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">step</span>=<span class=\"string\">\"5\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">style</span>=<span class=\"string\">\"margin-left: 20px;\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"btn\"</span>&gt;</span>按钮<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">style</span>=<span class=\"string\">\"margin-left: 40px;\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"range\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"range\"</span> <span class=\"attr\">min</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">max</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">step</span>=<span class=\"string\">\"5\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"0\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'btn'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> mask = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">'wave-mask'</span>)[<span class=\"number\">0</span>]</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> ipt = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'input'</span>)[<span class=\"number\">0</span>]</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> tips = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">'tips'</span>)[<span class=\"number\">0</span>]</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> range = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'range'</span>)</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">      btn.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> value = (<span class=\"number\">100</span> - +ipt.value)</span></span><br><span class=\"line\"><span class=\"javascript\">        mask.style.top = value + <span class=\"string\">'%'</span></span></span><br><span class=\"line\"><span class=\"javascript\">        tips.innerHTML = ipt.value + <span class=\"string\">'%'</span></span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">      range.onchange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> value = (<span class=\"number\">100</span> - +e.target.value)</span></span><br><span class=\"line\"><span class=\"javascript\">        mask.style.top = value + <span class=\"string\">'%'</span></span></span><br><span class=\"line\"><span class=\"javascript\">        tips.innerHTML = e.target.value + <span class=\"string\">'%'</span></span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"水波纹动效\"><a href=\"#水波纹动效\" class=\"headerlink\" title=\"水波纹动效\"></a>水波纹动效</h1><p>直接上代码</p>\n<p>通过遮罩和动画实现水位图波纹特效</p>\n<p>可以通过输入0-100的数字或者 拖动滑动条调节水位的高低 (通过修改wave-mask的top)</p>","more":"<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">      * &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        box-sizing: border-box;</span></span><br><span class=\"line\"><span class=\"undefined\">        padding: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">        margin: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        display: flex;</span></span><br><span class=\"line\"><span class=\"undefined\">        justify-content: center;</span></span><br><span class=\"line\"><span class=\"undefined\">        align-items: center;</span></span><br><span class=\"line\"><span class=\"undefined\">        border-radius: 50%;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">border</span>: 3<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#67c23a</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#ffffff</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">        position: absolute;</span></span><br><span class=\"line\"><span class=\"undefined\">        top: 50%;</span></span><br><span class=\"line\"><span class=\"undefined\">        left: 50%;</span></span><br><span class=\"line\"><span class=\"undefined\">        transform: translate(-50%, -50%);</span></span><br><span class=\"line\"><span class=\"undefined\">        padding: 7px 7px;</span></span><br><span class=\"line\"><span class=\"undefined\">        overflow: hidden;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-class\">.wave</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        position: relative;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 100px;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 100px;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">background-image</span>: <span class=\"selector-tag\">linear-gradient</span>(<span class=\"selector-tag\">-180deg</span>, <span class=\"selector-id\">#aaff80</span> 13%, <span class=\"selector-id\">#67c23a</span> 91%);</span></span><br><span class=\"line\"><span class=\"undefined\">        border-radius: 50%;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">box-shadow</span>: 1<span class=\"selector-tag\">px</span> 3<span class=\"selector-tag\">px</span> 3<span class=\"selector-tag\">px</span> 0 <span class=\"selector-tag\">rgba</span>(139, 139, 139, 0<span class=\"selector-class\">.822</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-class\">.wave-mask</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        position: absolute;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">        top: 100%;</span></span><br><span class=\"line\"><span class=\"undefined\">        left: 50%;</span></span><br><span class=\"line\"><span class=\"undefined\">        border-radius: 39%;</span></span><br><span class=\"line\"><span class=\"undefined\">        background-color: white;</span></span><br><span class=\"line\"><span class=\"undefined\">        transform: translate(-50%, -100%) rotate(0);</span></span><br><span class=\"line\"><span class=\"undefined\">        animation: toRotate 10s linear infinite;</span></span><br><span class=\"line\"><span class=\"undefined\">        z-index: 20;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">      @<span class=\"keyword\">keyframes</span> toRotate &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        50% &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">          transform: translate(-50%, -100%) rotate(180deg);</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        100% &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">          transform: translate(-50%, -100%) rotate(360deg);</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-class\">.tips</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        position: absolute;</span></span><br><span class=\"line\"><span class=\"undefined\">        top: 50%;</span></span><br><span class=\"line\"><span class=\"undefined\">        left: 50%;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 50px;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 50px;</span></span><br><span class=\"line\"><span class=\"undefined\">        transform: translate(-25px, -25px);</span></span><br><span class=\"line\"><span class=\"undefined\">        text-align: center;</span></span><br><span class=\"line\"><span class=\"undefined\">        line-height: 50px;</span></span><br><span class=\"line\"><span class=\"undefined\">        z-index: 30;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wave\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wave-mask\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"tips\"</span>&gt;</span>0%<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"display: flex; justify-content: center; align-items: center; margin-top: 200px;\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">step</span>=<span class=\"string\">\"5\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">style</span>=<span class=\"string\">\"margin-left: 20px;\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"btn\"</span>&gt;</span>按钮<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">style</span>=<span class=\"string\">\"margin-left: 40px;\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"range\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"range\"</span> <span class=\"attr\">min</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">max</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">step</span>=<span class=\"string\">\"5\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"0\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'btn'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> mask = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">'wave-mask'</span>)[<span class=\"number\">0</span>]</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> ipt = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'input'</span>)[<span class=\"number\">0</span>]</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> tips = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">'tips'</span>)[<span class=\"number\">0</span>]</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> range = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'range'</span>)</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">      btn.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> value = (<span class=\"number\">100</span> - +ipt.value)</span></span><br><span class=\"line\"><span class=\"javascript\">        mask.style.top = value + <span class=\"string\">'%'</span></span></span><br><span class=\"line\"><span class=\"javascript\">        tips.innerHTML = ipt.value + <span class=\"string\">'%'</span></span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">      range.onchange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> value = (<span class=\"number\">100</span> - +e.target.value)</span></span><br><span class=\"line\"><span class=\"javascript\">        mask.style.top = value + <span class=\"string\">'%'</span></span></span><br><span class=\"line\"><span class=\"javascript\">        tips.innerHTML = e.target.value + <span class=\"string\">'%'</span></span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"不使用 + 、-求两个数的和 （含符号）","date":"2020-06-18T16:11:23.000Z","_content":"\n\n\n#  不使用 + 、-求两个数的和 （含符号）\n\n\n\n**首先想到用位运算符来处理**\n\n\n\n* ^ 异或   可以理解为不进位的加法  如:  0010 ^ 0101 = 0111   0 + 0 = 0  | 1+1 = 0 | 1 + 0 = 1\n* & 按位与   \n* << 按位左移 \n\n\n\n### 分析： \n\n1. 既然 ^ 异或可以得到不进位得值，那么再通过 & 按位与取得需要进位的位， 再 << 按位左移进位就可以取得进位的值\n2. 将 **没进位的和** ^  **进位**  \n3. 接着再进行以上的操作，**没进位的和** & **进位**     直到 & 的值为0时就代表没有进位了， 就返回 **没进位的和** ^  **进位**  的值\n\n\n\n### eg:   \n\n1. 9 + 7 = 1001 +  0111\n2. s1 = 1001 ^ 0111 = 1110   |  1001 & 0111 = 0001    |  j1 =  0001 << 1 = 0010\n3. j2 = s1 & j1 = 1110 & 0010 = 0010  <<  1 = 0100 (还有进位，继续执行上述步骤)  s2 =  s1 ^ j1 = 1110 ^ 0010 = 1100\n4. J3 = j2 & s2 = 0100 & 1100 = 0100 << 1 = 1000      s3 = j2 ^ s2 = 0100 ^ 1100 = 1000\n5. J4 = j3 & s3 = 1000 & 1000 = 1000 << 1 = 10000    s4 = j3 ^ s3 = 1000 ^ 1000 = 0000\n6. j5 = j4 & s4 = 1 000 & 0000 = 0 0000   s5 = j4 ^ s4 = 1 0000 ^ 0 0000 = 1 0000 = 16\n\n\n\n### j s 实现\n\n\n\n```javascript\nlet add = function(a,b) {\n    let sum = a ^ b;\n    let carry = (a&b) << 1;\n    if(a&b) {\n        return add(sum, carry);\n    } else {\n        return sum;\n    }\n}\n\nadd(10, 6)  // 16\nadd(-2, 8)  // 6\n```\n\n\n\n\n\n### python 实现\n\n\n\n```python\n#!/usr/bin/python3\n\ndef add(a, b):\n\tif(b == 0):\n\t\treturn a\n\tsum = a ^ b\n\tcarry = (a & b) << 1\n\treturn add(sum, carry)\n\t\n\t\nnums = add(2,99) // 101\n```\n\n","source":"_posts/不使用 + 、-求两个数的和 （含符号）.md","raw":"---\ntitle: 不使用 + 、-求两个数的和 （含符号）\ndate: 2020-06-19 00:11:23\ncategories:\n - javascript\ntags:\n - algorithm\n---\n\n\n\n#  不使用 + 、-求两个数的和 （含符号）\n\n\n\n**首先想到用位运算符来处理**\n\n\n\n* ^ 异或   可以理解为不进位的加法  如:  0010 ^ 0101 = 0111   0 + 0 = 0  | 1+1 = 0 | 1 + 0 = 1\n* & 按位与   \n* << 按位左移 \n\n\n\n### 分析： \n\n1. 既然 ^ 异或可以得到不进位得值，那么再通过 & 按位与取得需要进位的位， 再 << 按位左移进位就可以取得进位的值\n2. 将 **没进位的和** ^  **进位**  \n3. 接着再进行以上的操作，**没进位的和** & **进位**     直到 & 的值为0时就代表没有进位了， 就返回 **没进位的和** ^  **进位**  的值\n\n\n\n### eg:   \n\n1. 9 + 7 = 1001 +  0111\n2. s1 = 1001 ^ 0111 = 1110   |  1001 & 0111 = 0001    |  j1 =  0001 << 1 = 0010\n3. j2 = s1 & j1 = 1110 & 0010 = 0010  <<  1 = 0100 (还有进位，继续执行上述步骤)  s2 =  s1 ^ j1 = 1110 ^ 0010 = 1100\n4. J3 = j2 & s2 = 0100 & 1100 = 0100 << 1 = 1000      s3 = j2 ^ s2 = 0100 ^ 1100 = 1000\n5. J4 = j3 & s3 = 1000 & 1000 = 1000 << 1 = 10000    s4 = j3 ^ s3 = 1000 ^ 1000 = 0000\n6. j5 = j4 & s4 = 1 000 & 0000 = 0 0000   s5 = j4 ^ s4 = 1 0000 ^ 0 0000 = 1 0000 = 16\n\n\n\n### j s 实现\n\n\n\n```javascript\nlet add = function(a,b) {\n    let sum = a ^ b;\n    let carry = (a&b) << 1;\n    if(a&b) {\n        return add(sum, carry);\n    } else {\n        return sum;\n    }\n}\n\nadd(10, 6)  // 16\nadd(-2, 8)  // 6\n```\n\n\n\n\n\n### python 实现\n\n\n\n```python\n#!/usr/bin/python3\n\ndef add(a, b):\n\tif(b == 0):\n\t\treturn a\n\tsum = a ^ b\n\tcarry = (a & b) << 1\n\treturn add(sum, carry)\n\t\n\t\nnums = add(2,99) // 101\n```\n\n","slug":"不使用 + 、-求两个数的和 （含符号）","published":1,"updated":"2020-06-18T16:12:25.534Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzgul1au001kmmsf6o776ux8","content":"<h1 id=\"不使用-、-求两个数的和-（含符号）\"><a href=\"#不使用-、-求两个数的和-（含符号）\" class=\"headerlink\" title=\"不使用 + 、-求两个数的和 （含符号）\"></a>不使用 + 、-求两个数的和 （含符号）</h1><p><strong>首先想到用位运算符来处理</strong></p>\n<ul>\n<li>^ 异或   可以理解为不进位的加法  如:  0010 ^ 0101 = 0111   0 + 0 = 0  | 1+1 = 0 | 1 + 0 = 1</li>\n<li>&amp; 按位与   </li>\n<li>&lt;&lt; 按位左移 </li>\n</ul>\n<h3 id=\"分析：\"><a href=\"#分析：\" class=\"headerlink\" title=\"分析：\"></a>分析：</h3><ol>\n<li>既然 ^ 异或可以得到不进位得值，那么再通过 &amp; 按位与取得需要进位的位， 再 &lt;&lt; 按位左移进位就可以取得进位的值</li>\n<li>将 <strong>没进位的和</strong> ^  <strong>进位</strong>  </li>\n<li>接着再进行以上的操作，<strong>没进位的和</strong> &amp; <strong>进位</strong>     直到 &amp; 的值为0时就代表没有进位了， 就返回 <strong>没进位的和</strong> ^  <strong>进位</strong>  的值</li>\n</ol>\n<h3 id=\"eg\"><a href=\"#eg\" class=\"headerlink\" title=\"eg:\"></a>eg:</h3><ol>\n<li>9 + 7 = 1001 +  0111</li>\n<li>s1 = 1001 ^ 0111 = 1110   |  1001 &amp; 0111 = 0001    |  j1 =  0001 &lt;&lt; 1 = 0010</li>\n<li>j2 = s1 &amp; j1 = 1110 &amp; 0010 = 0010  &lt;&lt;  1 = 0100 (还有进位，继续执行上述步骤)  s2 =  s1 ^ j1 = 1110 ^ 0010 = 1100</li>\n<li>J3 = j2 &amp; s2 = 0100 &amp; 1100 = 0100 &lt;&lt; 1 = 1000      s3 = j2 ^ s2 = 0100 ^ 1100 = 1000</li>\n<li>J4 = j3 &amp; s3 = 1000 &amp; 1000 = 1000 &lt;&lt; 1 = 10000    s4 = j3 ^ s3 = 1000 ^ 1000 = 0000</li>\n<li>j5 = j4 &amp; s4 = 1 000 &amp; 0000 = 0 0000   s5 = j4 ^ s4 = 1 0000 ^ 0 0000 = 1 0000 = 16</li>\n</ol>\n<h3 id=\"j-s-实现\"><a href=\"#j-s-实现\" class=\"headerlink\" title=\"j s 实现\"></a>j s 实现</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> add = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum = a ^ b;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> carry = (a&amp;b) &lt;&lt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a&amp;b) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> add(sum, carry);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">10</span>, <span class=\"number\">6</span>)  <span class=\"comment\">// 16</span></span><br><span class=\"line\">add(<span class=\"number\">-2</span>, <span class=\"number\">8</span>)  <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"python-实现\"><a href=\"#python-实现\" class=\"headerlink\" title=\"python 实现\"></a>python 实现</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(a, b)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(b == <span class=\"number\">0</span>):</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a</span><br><span class=\"line\">\tsum = a ^ b</span><br><span class=\"line\">\tcarry = (a &amp; b) &lt;&lt; <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> add(sum, carry)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">nums = add(<span class=\"number\">2</span>,<span class=\"number\">99</span>) // <span class=\"number\">101</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"不使用-、-求两个数的和-（含符号）\"><a href=\"#不使用-、-求两个数的和-（含符号）\" class=\"headerlink\" title=\"不使用 + 、-求两个数的和 （含符号）\"></a>不使用 + 、-求两个数的和 （含符号）</h1><p><strong>首先想到用位运算符来处理</strong></p>\n<ul>\n<li>^ 异或   可以理解为不进位的加法  如:  0010 ^ 0101 = 0111   0 + 0 = 0  | 1+1 = 0 | 1 + 0 = 1</li>\n<li>&amp; 按位与   </li>\n<li>&lt;&lt; 按位左移 </li>\n</ul>\n<h3 id=\"分析：\"><a href=\"#分析：\" class=\"headerlink\" title=\"分析：\"></a>分析：</h3><ol>\n<li>既然 ^ 异或可以得到不进位得值，那么再通过 &amp; 按位与取得需要进位的位， 再 &lt;&lt; 按位左移进位就可以取得进位的值</li>\n<li>将 <strong>没进位的和</strong> ^  <strong>进位</strong>  </li>\n<li>接着再进行以上的操作，<strong>没进位的和</strong> &amp; <strong>进位</strong>     直到 &amp; 的值为0时就代表没有进位了， 就返回 <strong>没进位的和</strong> ^  <strong>进位</strong>  的值</li>\n</ol>\n<h3 id=\"eg\"><a href=\"#eg\" class=\"headerlink\" title=\"eg:\"></a>eg:</h3><ol>\n<li>9 + 7 = 1001 +  0111</li>\n<li>s1 = 1001 ^ 0111 = 1110   |  1001 &amp; 0111 = 0001    |  j1 =  0001 &lt;&lt; 1 = 0010</li>\n<li>j2 = s1 &amp; j1 = 1110 &amp; 0010 = 0010  &lt;&lt;  1 = 0100 (还有进位，继续执行上述步骤)  s2 =  s1 ^ j1 = 1110 ^ 0010 = 1100</li>\n<li>J3 = j2 &amp; s2 = 0100 &amp; 1100 = 0100 &lt;&lt; 1 = 1000      s3 = j2 ^ s2 = 0100 ^ 1100 = 1000</li>\n<li>J4 = j3 &amp; s3 = 1000 &amp; 1000 = 1000 &lt;&lt; 1 = 10000    s4 = j3 ^ s3 = 1000 ^ 1000 = 0000</li>\n<li>j5 = j4 &amp; s4 = 1 000 &amp; 0000 = 0 0000   s5 = j4 ^ s4 = 1 0000 ^ 0 0000 = 1 0000 = 16</li>\n</ol>\n<h3 id=\"j-s-实现\"><a href=\"#j-s-实现\" class=\"headerlink\" title=\"j s 实现\"></a>j s 实现</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> add = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum = a ^ b;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> carry = (a&amp;b) &lt;&lt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a&amp;b) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> add(sum, carry);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">10</span>, <span class=\"number\">6</span>)  <span class=\"comment\">// 16</span></span><br><span class=\"line\">add(<span class=\"number\">-2</span>, <span class=\"number\">8</span>)  <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"python-实现\"><a href=\"#python-实现\" class=\"headerlink\" title=\"python 实现\"></a>python 实现</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(a, b)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(b == <span class=\"number\">0</span>):</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a</span><br><span class=\"line\">\tsum = a ^ b</span><br><span class=\"line\">\tcarry = (a &amp; b) &lt;&lt; <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> add(sum, carry)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">nums = add(<span class=\"number\">2</span>,<span class=\"number\">99</span>) // <span class=\"number\">101</span></span><br></pre></td></tr></table></figure>\n"},{"title":"从零开始学习Vue源码 —— 概览","date":"2020-07-01T15:50:23.000Z","_content":"\n# 从零开始学习Vue源码 —— 概览\n\n\n\n\n\n先上一张图\n\n\n\n![](https://user-gold-cdn.xitu.io/2017/12/19/1606e7eaa2a664e8?imageslim)\n\n\n\n以上流程包括了从：\n\n> 初始化 —— 挂载 —— 解析模版 —— 生成渲染函数 ——   render function转换为VNode节点最终形成Virtual Dom Tree ——  virtual dom tree转化为真实Dom节点从而渲染视图\n\n\n\n响应式更新包括了:\n\n> 在init时进行了`Object.defineProperty` 的绑定 —— render function渲染读取值，触发getter函数 —— 进行依赖收集 —— 修改对象值触发setter函数 —— 通知**[依赖收集]**中Dep的每个 watcher 值变化了，需要更新视图 —— watcher调用 `update`来更新视图 ——  将新、旧VNode传入patch进行diff比较，只修改比较得出的差异的部分Dom\n\n\n\n<!-- more -->\n\n## init\n\n在 `new Vue()`  之后， 会进行一系列的初始化操作，包括初始化 **生命周期** 、 **事件**、**props** 、 **methods** 、 **data** 、 **computed** 、 **watch** 等。 最重要的是进行 `Object.defineProperty` 的绑定，用于实现 **[响应式]** 和 **[依赖收集]** \n\n\n\n## $mount\n\n\n\n在初始化之后就会进行组件的挂载\n\n\n\n## compile\n\n如果是运行时会进行`template`模版的编译， 包括 ：\n\n* **parse** ——  使用正则解析模版中的指令、class、style等 ， 形成AST (抽象语法树)\n* **optimize** —— 标记 static 静态节点，用于后面`update` 时 `patch` 执行diff算法对静态节点跳过，从而优化性能\n* **generate** —— 将AST转换为 render function， 包括 render字符串 和 staticRenderFns字符串\n\n\n\n经过以上步骤之后，就会生产用于渲染VNode的 render function\n\n\n\n\n\n## Virtual DOM\n\nRender function 转换为Vnode节点，最终形成 virtual Dom Tree ，最后虚拟Dom渲染得到真实Dom\n\n\n\n\n\n## 响应式\n\n\n\nrender function被渲染时会读取 **Init**时绑定的值，就会触发 getter函数进行 **[依赖收集]** \n\n![](https://user-gold-cdn.xitu.io/2017/12/21/160770b2a77e084e?imageView2)\n\n **[依赖收集]** 是为了将观察者watcher对象存放到订阅者Dep的subs中\n\n\n\n在修改对象值时会触发setter函数，通知之前依赖收集dep中的每个watcher值发生改变了，紧接着，watcher就会调用 `update`来更新视图\n\n\n\n*关于setter为什么要通知dep中的每个watch，这里引用一段网友的解释:*\n\n> 通知所有的watcher是指对应的dep保存的所有watcher。进行数据劫持的时候，循环遍历data中所有的属性，一个属性就会创建一个唯一的dep,当初始化解析编译界面的时候，一个指令/表达式就是一个watcher,那么解析指令/表达式的值的时候就去读data中的属性，触发getter，再触发添加dep添加订阅（将watcher添加到dep.subs中），当修改对应的属性的时候，触发setter，那么就再去触发这个dep保存的所有watcher\n\n\n\n\n\n## 总结\n\n\n\n以上大概梳理呢Vue整个运行机制，后续会针对每个大板块，小功能进行更细致化的分析。\n\n","source":"_posts/从零开始学习Vue源码(一) —— 概览.md","raw":"---\ntitle: 从零开始学习Vue源码 —— 概览\ndate: 2020-07-01 23:50:23\ncategories:\n - javascript\n - vue\ntags:\n - vue\n---\n\n# 从零开始学习Vue源码 —— 概览\n\n\n\n\n\n先上一张图\n\n\n\n![](https://user-gold-cdn.xitu.io/2017/12/19/1606e7eaa2a664e8?imageslim)\n\n\n\n以上流程包括了从：\n\n> 初始化 —— 挂载 —— 解析模版 —— 生成渲染函数 ——   render function转换为VNode节点最终形成Virtual Dom Tree ——  virtual dom tree转化为真实Dom节点从而渲染视图\n\n\n\n响应式更新包括了:\n\n> 在init时进行了`Object.defineProperty` 的绑定 —— render function渲染读取值，触发getter函数 —— 进行依赖收集 —— 修改对象值触发setter函数 —— 通知**[依赖收集]**中Dep的每个 watcher 值变化了，需要更新视图 —— watcher调用 `update`来更新视图 ——  将新、旧VNode传入patch进行diff比较，只修改比较得出的差异的部分Dom\n\n\n\n<!-- more -->\n\n## init\n\n在 `new Vue()`  之后， 会进行一系列的初始化操作，包括初始化 **生命周期** 、 **事件**、**props** 、 **methods** 、 **data** 、 **computed** 、 **watch** 等。 最重要的是进行 `Object.defineProperty` 的绑定，用于实现 **[响应式]** 和 **[依赖收集]** \n\n\n\n## $mount\n\n\n\n在初始化之后就会进行组件的挂载\n\n\n\n## compile\n\n如果是运行时会进行`template`模版的编译， 包括 ：\n\n* **parse** ——  使用正则解析模版中的指令、class、style等 ， 形成AST (抽象语法树)\n* **optimize** —— 标记 static 静态节点，用于后面`update` 时 `patch` 执行diff算法对静态节点跳过，从而优化性能\n* **generate** —— 将AST转换为 render function， 包括 render字符串 和 staticRenderFns字符串\n\n\n\n经过以上步骤之后，就会生产用于渲染VNode的 render function\n\n\n\n\n\n## Virtual DOM\n\nRender function 转换为Vnode节点，最终形成 virtual Dom Tree ，最后虚拟Dom渲染得到真实Dom\n\n\n\n\n\n## 响应式\n\n\n\nrender function被渲染时会读取 **Init**时绑定的值，就会触发 getter函数进行 **[依赖收集]** \n\n![](https://user-gold-cdn.xitu.io/2017/12/21/160770b2a77e084e?imageView2)\n\n **[依赖收集]** 是为了将观察者watcher对象存放到订阅者Dep的subs中\n\n\n\n在修改对象值时会触发setter函数，通知之前依赖收集dep中的每个watcher值发生改变了，紧接着，watcher就会调用 `update`来更新视图\n\n\n\n*关于setter为什么要通知dep中的每个watch，这里引用一段网友的解释:*\n\n> 通知所有的watcher是指对应的dep保存的所有watcher。进行数据劫持的时候，循环遍历data中所有的属性，一个属性就会创建一个唯一的dep,当初始化解析编译界面的时候，一个指令/表达式就是一个watcher,那么解析指令/表达式的值的时候就去读data中的属性，触发getter，再触发添加dep添加订阅（将watcher添加到dep.subs中），当修改对应的属性的时候，触发setter，那么就再去触发这个dep保存的所有watcher\n\n\n\n\n\n## 总结\n\n\n\n以上大概梳理呢Vue整个运行机制，后续会针对每个大板块，小功能进行更细致化的分析。\n\n","slug":"从零开始学习Vue源码(一) —— 概览","published":1,"updated":"2020-07-20T14:58:23.800Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzgul1av001nmmsfcacbmvaa","content":"<h1 id=\"从零开始学习Vue源码-——-概览\"><a href=\"#从零开始学习Vue源码-——-概览\" class=\"headerlink\" title=\"从零开始学习Vue源码 —— 概览\"></a>从零开始学习Vue源码 —— 概览</h1><p>先上一张图</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2017/12/19/1606e7eaa2a664e8?imageslim\" alt=\"\"></p>\n<p>以上流程包括了从：</p>\n<blockquote>\n<p>初始化 —— 挂载 —— 解析模版 —— 生成渲染函数 ——   render function转换为VNode节点最终形成Virtual Dom Tree ——  virtual dom tree转化为真实Dom节点从而渲染视图</p>\n</blockquote>\n<p>响应式更新包括了:</p>\n<blockquote>\n<p>在init时进行了<code>Object.defineProperty</code> 的绑定 —— render function渲染读取值，触发getter函数 —— 进行依赖收集 —— 修改对象值触发setter函数 —— 通知<strong>[依赖收集]</strong>中Dep的每个 watcher 值变化了，需要更新视图 —— watcher调用 <code>update</code>来更新视图 ——  将新、旧VNode传入patch进行diff比较，只修改比较得出的差异的部分Dom</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\"init\"></a>init</h2><p>在 <code>new Vue()</code>  之后， 会进行一系列的初始化操作，包括初始化 <strong>生命周期</strong> 、 <strong>事件</strong>、<strong>props</strong> 、 <strong>methods</strong> 、 <strong>data</strong> 、 <strong>computed</strong> 、 <strong>watch</strong> 等。 最重要的是进行 <code>Object.defineProperty</code> 的绑定，用于实现 <strong>[响应式]</strong> 和 <strong>[依赖收集]</strong> </p>\n<h2 id=\"mount\"><a href=\"#mount\" class=\"headerlink\" title=\"$mount\"></a>$mount</h2><p>在初始化之后就会进行组件的挂载</p>\n<h2 id=\"compile\"><a href=\"#compile\" class=\"headerlink\" title=\"compile\"></a>compile</h2><p>如果是运行时会进行<code>template</code>模版的编译， 包括 ：</p>\n<ul>\n<li><strong>parse</strong> ——  使用正则解析模版中的指令、class、style等 ， 形成AST (抽象语法树)</li>\n<li><strong>optimize</strong> —— 标记 static 静态节点，用于后面<code>update</code> 时 <code>patch</code> 执行diff算法对静态节点跳过，从而优化性能</li>\n<li><strong>generate</strong> —— 将AST转换为 render function， 包括 render字符串 和 staticRenderFns字符串</li>\n</ul>\n<p>经过以上步骤之后，就会生产用于渲染VNode的 render function</p>\n<h2 id=\"Virtual-DOM\"><a href=\"#Virtual-DOM\" class=\"headerlink\" title=\"Virtual DOM\"></a>Virtual DOM</h2><p>Render function 转换为Vnode节点，最终形成 virtual Dom Tree ，最后虚拟Dom渲染得到真实Dom</p>\n<h2 id=\"响应式\"><a href=\"#响应式\" class=\"headerlink\" title=\"响应式\"></a>响应式</h2><p>render function被渲染时会读取 <strong>Init</strong>时绑定的值，就会触发 getter函数进行 <strong>[依赖收集]</strong> </p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2017/12/21/160770b2a77e084e?imageView2\" alt=\"\"></p>\n<p> <strong>[依赖收集]</strong> 是为了将观察者watcher对象存放到订阅者Dep的subs中</p>\n<p>在修改对象值时会触发setter函数，通知之前依赖收集dep中的每个watcher值发生改变了，紧接着，watcher就会调用 <code>update</code>来更新视图</p>\n<p><em>关于setter为什么要通知dep中的每个watch，这里引用一段网友的解释:</em></p>\n<blockquote>\n<p>通知所有的watcher是指对应的dep保存的所有watcher。进行数据劫持的时候，循环遍历data中所有的属性，一个属性就会创建一个唯一的dep,当初始化解析编译界面的时候，一个指令/表达式就是一个watcher,那么解析指令/表达式的值的时候就去读data中的属性，触发getter，再触发添加dep添加订阅（将watcher添加到dep.subs中），当修改对应的属性的时候，触发setter，那么就再去触发这个dep保存的所有watcher</p>\n</blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>以上大概梳理呢Vue整个运行机制，后续会针对每个大板块，小功能进行更细致化的分析。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"从零开始学习Vue源码-——-概览\"><a href=\"#从零开始学习Vue源码-——-概览\" class=\"headerlink\" title=\"从零开始学习Vue源码 —— 概览\"></a>从零开始学习Vue源码 —— 概览</h1><p>先上一张图</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2017/12/19/1606e7eaa2a664e8?imageslim\" alt=\"\"></p>\n<p>以上流程包括了从：</p>\n<blockquote>\n<p>初始化 —— 挂载 —— 解析模版 —— 生成渲染函数 ——   render function转换为VNode节点最终形成Virtual Dom Tree ——  virtual dom tree转化为真实Dom节点从而渲染视图</p>\n</blockquote>\n<p>响应式更新包括了:</p>\n<blockquote>\n<p>在init时进行了<code>Object.defineProperty</code> 的绑定 —— render function渲染读取值，触发getter函数 —— 进行依赖收集 —— 修改对象值触发setter函数 —— 通知<strong>[依赖收集]</strong>中Dep的每个 watcher 值变化了，需要更新视图 —— watcher调用 <code>update</code>来更新视图 ——  将新、旧VNode传入patch进行diff比较，只修改比较得出的差异的部分Dom</p>\n</blockquote>","more":"<h2 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\"init\"></a>init</h2><p>在 <code>new Vue()</code>  之后， 会进行一系列的初始化操作，包括初始化 <strong>生命周期</strong> 、 <strong>事件</strong>、<strong>props</strong> 、 <strong>methods</strong> 、 <strong>data</strong> 、 <strong>computed</strong> 、 <strong>watch</strong> 等。 最重要的是进行 <code>Object.defineProperty</code> 的绑定，用于实现 <strong>[响应式]</strong> 和 <strong>[依赖收集]</strong> </p>\n<h2 id=\"mount\"><a href=\"#mount\" class=\"headerlink\" title=\"$mount\"></a>$mount</h2><p>在初始化之后就会进行组件的挂载</p>\n<h2 id=\"compile\"><a href=\"#compile\" class=\"headerlink\" title=\"compile\"></a>compile</h2><p>如果是运行时会进行<code>template</code>模版的编译， 包括 ：</p>\n<ul>\n<li><strong>parse</strong> ——  使用正则解析模版中的指令、class、style等 ， 形成AST (抽象语法树)</li>\n<li><strong>optimize</strong> —— 标记 static 静态节点，用于后面<code>update</code> 时 <code>patch</code> 执行diff算法对静态节点跳过，从而优化性能</li>\n<li><strong>generate</strong> —— 将AST转换为 render function， 包括 render字符串 和 staticRenderFns字符串</li>\n</ul>\n<p>经过以上步骤之后，就会生产用于渲染VNode的 render function</p>\n<h2 id=\"Virtual-DOM\"><a href=\"#Virtual-DOM\" class=\"headerlink\" title=\"Virtual DOM\"></a>Virtual DOM</h2><p>Render function 转换为Vnode节点，最终形成 virtual Dom Tree ，最后虚拟Dom渲染得到真实Dom</p>\n<h2 id=\"响应式\"><a href=\"#响应式\" class=\"headerlink\" title=\"响应式\"></a>响应式</h2><p>render function被渲染时会读取 <strong>Init</strong>时绑定的值，就会触发 getter函数进行 <strong>[依赖收集]</strong> </p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2017/12/21/160770b2a77e084e?imageView2\" alt=\"\"></p>\n<p> <strong>[依赖收集]</strong> 是为了将观察者watcher对象存放到订阅者Dep的subs中</p>\n<p>在修改对象值时会触发setter函数，通知之前依赖收集dep中的每个watcher值发生改变了，紧接着，watcher就会调用 <code>update</code>来更新视图</p>\n<p><em>关于setter为什么要通知dep中的每个watch，这里引用一段网友的解释:</em></p>\n<blockquote>\n<p>通知所有的watcher是指对应的dep保存的所有watcher。进行数据劫持的时候，循环遍历data中所有的属性，一个属性就会创建一个唯一的dep,当初始化解析编译界面的时候，一个指令/表达式就是一个watcher,那么解析指令/表达式的值的时候就去读data中的属性，触发getter，再触发添加dep添加订阅（将watcher添加到dep.subs中），当修改对应的属性的时候，触发setter，那么就再去触发这个dep保存的所有watcher</p>\n</blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>以上大概梳理呢Vue整个运行机制，后续会针对每个大板块，小功能进行更细致化的分析。</p>"},{"title":"使用rollup打包并发布一个js库","date":"2021-04-30T07:27:41.000Z","_content":"\n\n\n# rollup 打包js库\n\n\n\n> 发布一个js库包含一下几个大致的流程\n>\n> 1. 编写库代码\n> 2. 配置打包\n> 3. 配置 npm 账户和发布配置\n> 4. 配置 travis ci 持续集成环境，相关配置\n> 5. 更新 version，提交tag 出发构建发布流程\n\n\n\n<!-- more -->\n\n## 1. 编写代码库\n\n```javascript\n// src/index.js\n\nclass Dog {\n  constructor(name = 'huahua') {\n    this.name = name\n  }\n  eat() {\n    console.log(this.name + 'eat food!')\n  }\n}\n\nexport default Dog\n```\n\n## 2. 配置打包\n\n打包有几种方式，目前主流是 webpack 和 rollup。 其中webpack适合开发项目打包（代码拆分、静态资源处理），如果是发布类库的话 rollup 更合适。 相关对比可以参考 https://www.jianshu.com/p/19a3d8ef5e6c\n\n### rollup\n\n​\t这里我们开发类库使用的是 rollup 进行打包，详细介绍和使用可以参考： https://www.rollupjs.com/guide/tutorial\n\n默认已经对 rollup 有所了解了，接着我们开始进行打包的配置：\n\n1. 首先我们先在根目录新建 rollup.config.js 文件，并配置如下：\n\n```javascript\nimport pkjson from './package.json';\nimport filesize from 'rollup-plugin-filesize';\nimport { babel } from '@rollup/plugin-babel';\nimport { nodeResolve } from '@rollup/plugin-node-resolve';\nimport commonjs from '@rollup/plugin-commonjs';\nimport { terser } from \"rollup-plugin-terser\";\n\nconst isDev = process.argv.splice(2).indexOf('--pub') < 0;\nconst prjName = pkjson.name\nconst ProjectName = 'ZMark'\n\n\nconst output = isDev ? { file: `build/${prjName}.js` } : { file: `build/${prjName}.js` };\n\nexport default {\n  input: 'src/index.js',\n  output: {\n    ...output,\n    format: 'umd',\n    name: ProjectName,\n    sourcemap: true\n  },\n  plugins: [\n    nodeResolve(),\n    commonjs({\n      sourceMap: false,  // Default: true\n    }),\n    filesize(),\n    babel({\n      exclude: 'node_modules/**', // 只编译我们的源代码\n      babelHelpers: 'runtime',\n    }),\n    terser(),\n  ],\n}\n```\n\n其中主要配置是   `input` , `output` , `plugins`\n\n`input` 就是整个库的入口文件\n\n`output` 就是打包后文件存放的位置，其中比较重要的是 `format` 这个参数，配置打包模块方式，常用的有 `cjs -- commonjs`  `umd -- 通用模块定义规范`  `esm -- es moudle`  ， 详情参考网上关于  **CommonJS、AMD、CMD、UMD和ES Modules的区别**\n\n`plugins` 是打包过程中使用到的插件，rollup 的精髓就是通过各种插件实现想要的效果。\n\n上面配置中用到如下插件：\n\n* nodeResolve    加载node_moudles 三方包\n* commonjs   （rollup 支持es模块规范，需要将commonjs转成 esm）\n* filesize （构建时提示）\n* babel （重要！  将 es2015+ 语法转成es5 支持的语法，相关介绍后期单独开一个文章）\n* terser (打包压缩)\n\n接着我们在 `package.json` 中添加构建脚本 \n\n```json\n\"build\": \"rimraf ./build/ && rollup -c --pub\",\n```\n\n其中 `rimraf` 是安装的插件，实现构建前将 /build 文件夹及其下面所有文件删除的功能，通过以下方式安装:\n\n```sh\nnpm i rimraf -D\n```\n\n执行后就会在根目录 /build 文件下生成打包后的 js 文件\n\n![image-20210430110115587](https://tva1.sinaimg.cn/large/008i3skNly1gq1l85x31jj30gu05omxp.jpg)\n\n\n\n\n\n## 3. npm 发布\n\n经过 编写库代码、rollup 构建打包，接下来就是将打包好的库发布到 npm 仓库上去。\n\n1. 首先需要注册一个 npm 的账户\n2. 完善 `package.json`  下的包信息\n3. 使用 `npm login`  本地登陆账号 （注： 如果更改了 npm 源可以能遇到问题，具体参考网上解答或者换回原本的源）\n4. 接着就可以直接发布了 `npm publish` ，然后在 npm 上就可以看到自己发布的包了。\n\n\n\n## 4. 自动化发布（待续）……\n\n整个打包发库过程还可以更自动化一点，可以通过 travis CI 结合 github来实现 构建发布一条龙服务，具体配置和使用，后面再结合 rollup 打包的 babel 配置一起来说。","source":"_posts/使用rollup打包并发布一个js库.md","raw":"---\ntitle: 使用rollup打包并发布一个js库\ndate: 2021-04-30 15:27:41\ntags:\n - javascript\n - rollup\n - npm\ncategories:\n - javascript\n---\n\n\n\n# rollup 打包js库\n\n\n\n> 发布一个js库包含一下几个大致的流程\n>\n> 1. 编写库代码\n> 2. 配置打包\n> 3. 配置 npm 账户和发布配置\n> 4. 配置 travis ci 持续集成环境，相关配置\n> 5. 更新 version，提交tag 出发构建发布流程\n\n\n\n<!-- more -->\n\n## 1. 编写代码库\n\n```javascript\n// src/index.js\n\nclass Dog {\n  constructor(name = 'huahua') {\n    this.name = name\n  }\n  eat() {\n    console.log(this.name + 'eat food!')\n  }\n}\n\nexport default Dog\n```\n\n## 2. 配置打包\n\n打包有几种方式，目前主流是 webpack 和 rollup。 其中webpack适合开发项目打包（代码拆分、静态资源处理），如果是发布类库的话 rollup 更合适。 相关对比可以参考 https://www.jianshu.com/p/19a3d8ef5e6c\n\n### rollup\n\n​\t这里我们开发类库使用的是 rollup 进行打包，详细介绍和使用可以参考： https://www.rollupjs.com/guide/tutorial\n\n默认已经对 rollup 有所了解了，接着我们开始进行打包的配置：\n\n1. 首先我们先在根目录新建 rollup.config.js 文件，并配置如下：\n\n```javascript\nimport pkjson from './package.json';\nimport filesize from 'rollup-plugin-filesize';\nimport { babel } from '@rollup/plugin-babel';\nimport { nodeResolve } from '@rollup/plugin-node-resolve';\nimport commonjs from '@rollup/plugin-commonjs';\nimport { terser } from \"rollup-plugin-terser\";\n\nconst isDev = process.argv.splice(2).indexOf('--pub') < 0;\nconst prjName = pkjson.name\nconst ProjectName = 'ZMark'\n\n\nconst output = isDev ? { file: `build/${prjName}.js` } : { file: `build/${prjName}.js` };\n\nexport default {\n  input: 'src/index.js',\n  output: {\n    ...output,\n    format: 'umd',\n    name: ProjectName,\n    sourcemap: true\n  },\n  plugins: [\n    nodeResolve(),\n    commonjs({\n      sourceMap: false,  // Default: true\n    }),\n    filesize(),\n    babel({\n      exclude: 'node_modules/**', // 只编译我们的源代码\n      babelHelpers: 'runtime',\n    }),\n    terser(),\n  ],\n}\n```\n\n其中主要配置是   `input` , `output` , `plugins`\n\n`input` 就是整个库的入口文件\n\n`output` 就是打包后文件存放的位置，其中比较重要的是 `format` 这个参数，配置打包模块方式，常用的有 `cjs -- commonjs`  `umd -- 通用模块定义规范`  `esm -- es moudle`  ， 详情参考网上关于  **CommonJS、AMD、CMD、UMD和ES Modules的区别**\n\n`plugins` 是打包过程中使用到的插件，rollup 的精髓就是通过各种插件实现想要的效果。\n\n上面配置中用到如下插件：\n\n* nodeResolve    加载node_moudles 三方包\n* commonjs   （rollup 支持es模块规范，需要将commonjs转成 esm）\n* filesize （构建时提示）\n* babel （重要！  将 es2015+ 语法转成es5 支持的语法，相关介绍后期单独开一个文章）\n* terser (打包压缩)\n\n接着我们在 `package.json` 中添加构建脚本 \n\n```json\n\"build\": \"rimraf ./build/ && rollup -c --pub\",\n```\n\n其中 `rimraf` 是安装的插件，实现构建前将 /build 文件夹及其下面所有文件删除的功能，通过以下方式安装:\n\n```sh\nnpm i rimraf -D\n```\n\n执行后就会在根目录 /build 文件下生成打包后的 js 文件\n\n![image-20210430110115587](https://tva1.sinaimg.cn/large/008i3skNly1gq1l85x31jj30gu05omxp.jpg)\n\n\n\n\n\n## 3. npm 发布\n\n经过 编写库代码、rollup 构建打包，接下来就是将打包好的库发布到 npm 仓库上去。\n\n1. 首先需要注册一个 npm 的账户\n2. 完善 `package.json`  下的包信息\n3. 使用 `npm login`  本地登陆账号 （注： 如果更改了 npm 源可以能遇到问题，具体参考网上解答或者换回原本的源）\n4. 接着就可以直接发布了 `npm publish` ，然后在 npm 上就可以看到自己发布的包了。\n\n\n\n## 4. 自动化发布（待续）……\n\n整个打包发库过程还可以更自动化一点，可以通过 travis CI 结合 github来实现 构建发布一条龙服务，具体配置和使用，后面再结合 rollup 打包的 babel 配置一起来说。","slug":"使用rollup打包并发布一个js库","published":1,"updated":"2021-04-30T09:07:59.483Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzgul1ax001smmsf6rkagyhz","content":"<h1 id=\"rollup-打包js库\"><a href=\"#rollup-打包js库\" class=\"headerlink\" title=\"rollup 打包js库\"></a>rollup 打包js库</h1><blockquote>\n<p>发布一个js库包含一下几个大致的流程</p>\n<ol>\n<li>编写库代码</li>\n<li>配置打包</li>\n<li>配置 npm 账户和发布配置</li>\n<li>配置 travis ci 持续集成环境，相关配置</li>\n<li>更新 version，提交tag 出发构建发布流程</li>\n</ol>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"1-编写代码库\"><a href=\"#1-编写代码库\" class=\"headerlink\" title=\"1. 编写代码库\"></a>1. 编写代码库</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/index.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name = 'huahua') &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  eat() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">'eat food!'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Dog</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-配置打包\"><a href=\"#2-配置打包\" class=\"headerlink\" title=\"2. 配置打包\"></a>2. 配置打包</h2><p>打包有几种方式，目前主流是 webpack 和 rollup。 其中webpack适合开发项目打包（代码拆分、静态资源处理），如果是发布类库的话 rollup 更合适。 相关对比可以参考 <a href=\"https://www.jianshu.com/p/19a3d8ef5e6c\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/19a3d8ef5e6c</a></p>\n<h3 id=\"rollup\"><a href=\"#rollup\" class=\"headerlink\" title=\"rollup\"></a>rollup</h3><p>​    这里我们开发类库使用的是 rollup 进行打包，详细介绍和使用可以参考： <a href=\"https://www.rollupjs.com/guide/tutorial\" target=\"_blank\" rel=\"noopener\">https://www.rollupjs.com/guide/tutorial</a></p>\n<p>默认已经对 rollup 有所了解了，接着我们开始进行打包的配置：</p>\n<ol>\n<li>首先我们先在根目录新建 rollup.config.js 文件，并配置如下：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pkjson <span class=\"keyword\">from</span> <span class=\"string\">'./package.json'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> filesize <span class=\"keyword\">from</span> <span class=\"string\">'rollup-plugin-filesize'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; babel &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@rollup/plugin-babel'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; nodeResolve &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@rollup/plugin-node-resolve'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> commonjs <span class=\"keyword\">from</span> <span class=\"string\">'@rollup/plugin-commonjs'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; terser &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"rollup-plugin-terser\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> isDev = process.argv.splice(<span class=\"number\">2</span>).indexOf(<span class=\"string\">'--pub'</span>) &lt; <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> prjName = pkjson.name</span><br><span class=\"line\"><span class=\"keyword\">const</span> ProjectName = <span class=\"string\">'ZMark'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> output = isDev ? &#123; <span class=\"attr\">file</span>: <span class=\"string\">`build/<span class=\"subst\">$&#123;prjName&#125;</span>.js`</span> &#125; : &#123; <span class=\"attr\">file</span>: <span class=\"string\">`build/<span class=\"subst\">$&#123;prjName&#125;</span>.js`</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  input: <span class=\"string\">'src/index.js'</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    ...output,</span><br><span class=\"line\">    format: <span class=\"string\">'umd'</span>,</span><br><span class=\"line\">    name: ProjectName,</span><br><span class=\"line\">    sourcemap: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    nodeResolve(),</span><br><span class=\"line\">    commonjs(&#123;</span><br><span class=\"line\">      sourceMap: <span class=\"literal\">false</span>,  <span class=\"comment\">// Default: true</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    filesize(),</span><br><span class=\"line\">    babel(&#123;</span><br><span class=\"line\">      exclude: <span class=\"string\">'node_modules/**'</span>, <span class=\"comment\">// 只编译我们的源代码</span></span><br><span class=\"line\">      babelHelpers: <span class=\"string\">'runtime'</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    terser(),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中主要配置是   <code>input</code> , <code>output</code> , <code>plugins</code></p>\n<p><code>input</code> 就是整个库的入口文件</p>\n<p><code>output</code> 就是打包后文件存放的位置，其中比较重要的是 <code>format</code> 这个参数，配置打包模块方式，常用的有 <code>cjs -- commonjs</code>  <code>umd -- 通用模块定义规范</code>  <code>esm -- es moudle</code>  ， 详情参考网上关于  <strong>CommonJS、AMD、CMD、UMD和ES Modules的区别</strong></p>\n<p><code>plugins</code> 是打包过程中使用到的插件，rollup 的精髓就是通过各种插件实现想要的效果。</p>\n<p>上面配置中用到如下插件：</p>\n<ul>\n<li>nodeResolve    加载node_moudles 三方包</li>\n<li>commonjs   （rollup 支持es模块规范，需要将commonjs转成 esm）</li>\n<li>filesize （构建时提示）</li>\n<li>babel （重要！  将 es2015+ 语法转成es5 支持的语法，相关介绍后期单独开一个文章）</li>\n<li>terser (打包压缩)</li>\n</ul>\n<p>接着我们在 <code>package.json</code> 中添加构建脚本 </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"build\": \"rimraf ./build/ &amp;&amp; rollup -c --pub\",</span><br></pre></td></tr></table></figure>\n<p>其中 <code>rimraf</code> 是安装的插件，实现构建前将 /build 文件夹及其下面所有文件删除的功能，通过以下方式安装:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i rimraf -D</span><br></pre></td></tr></table></figure>\n<p>执行后就会在根目录 /build 文件下生成打包后的 js 文件</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gq1l85x31jj30gu05omxp.jpg\" alt=\"image-20210430110115587\"></p>\n<h2 id=\"3-npm-发布\"><a href=\"#3-npm-发布\" class=\"headerlink\" title=\"3. npm 发布\"></a>3. npm 发布</h2><p>经过 编写库代码、rollup 构建打包，接下来就是将打包好的库发布到 npm 仓库上去。</p>\n<ol>\n<li>首先需要注册一个 npm 的账户</li>\n<li>完善 <code>package.json</code>  下的包信息</li>\n<li>使用 <code>npm login</code>  本地登陆账号 （注： 如果更改了 npm 源可以能遇到问题，具体参考网上解答或者换回原本的源）</li>\n<li>接着就可以直接发布了 <code>npm publish</code> ，然后在 npm 上就可以看到自己发布的包了。</li>\n</ol>\n<h2 id=\"4-自动化发布（待续）……\"><a href=\"#4-自动化发布（待续）……\" class=\"headerlink\" title=\"4. 自动化发布（待续）……\"></a>4. 自动化发布（待续）……</h2><p>整个打包发库过程还可以更自动化一点，可以通过 travis CI 结合 github来实现 构建发布一条龙服务，具体配置和使用，后面再结合 rollup 打包的 babel 配置一起来说。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"rollup-打包js库\"><a href=\"#rollup-打包js库\" class=\"headerlink\" title=\"rollup 打包js库\"></a>rollup 打包js库</h1><blockquote>\n<p>发布一个js库包含一下几个大致的流程</p>\n<ol>\n<li>编写库代码</li>\n<li>配置打包</li>\n<li>配置 npm 账户和发布配置</li>\n<li>配置 travis ci 持续集成环境，相关配置</li>\n<li>更新 version，提交tag 出发构建发布流程</li>\n</ol>\n</blockquote>","more":"<h2 id=\"1-编写代码库\"><a href=\"#1-编写代码库\" class=\"headerlink\" title=\"1. 编写代码库\"></a>1. 编写代码库</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/index.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name = 'huahua') &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  eat() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">'eat food!'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Dog</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-配置打包\"><a href=\"#2-配置打包\" class=\"headerlink\" title=\"2. 配置打包\"></a>2. 配置打包</h2><p>打包有几种方式，目前主流是 webpack 和 rollup。 其中webpack适合开发项目打包（代码拆分、静态资源处理），如果是发布类库的话 rollup 更合适。 相关对比可以参考 <a href=\"https://www.jianshu.com/p/19a3d8ef5e6c\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/19a3d8ef5e6c</a></p>\n<h3 id=\"rollup\"><a href=\"#rollup\" class=\"headerlink\" title=\"rollup\"></a>rollup</h3><p>​    这里我们开发类库使用的是 rollup 进行打包，详细介绍和使用可以参考： <a href=\"https://www.rollupjs.com/guide/tutorial\" target=\"_blank\" rel=\"noopener\">https://www.rollupjs.com/guide/tutorial</a></p>\n<p>默认已经对 rollup 有所了解了，接着我们开始进行打包的配置：</p>\n<ol>\n<li>首先我们先在根目录新建 rollup.config.js 文件，并配置如下：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pkjson <span class=\"keyword\">from</span> <span class=\"string\">'./package.json'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> filesize <span class=\"keyword\">from</span> <span class=\"string\">'rollup-plugin-filesize'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; babel &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@rollup/plugin-babel'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; nodeResolve &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@rollup/plugin-node-resolve'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> commonjs <span class=\"keyword\">from</span> <span class=\"string\">'@rollup/plugin-commonjs'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; terser &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"rollup-plugin-terser\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> isDev = process.argv.splice(<span class=\"number\">2</span>).indexOf(<span class=\"string\">'--pub'</span>) &lt; <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> prjName = pkjson.name</span><br><span class=\"line\"><span class=\"keyword\">const</span> ProjectName = <span class=\"string\">'ZMark'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> output = isDev ? &#123; <span class=\"attr\">file</span>: <span class=\"string\">`build/<span class=\"subst\">$&#123;prjName&#125;</span>.js`</span> &#125; : &#123; <span class=\"attr\">file</span>: <span class=\"string\">`build/<span class=\"subst\">$&#123;prjName&#125;</span>.js`</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  input: <span class=\"string\">'src/index.js'</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    ...output,</span><br><span class=\"line\">    format: <span class=\"string\">'umd'</span>,</span><br><span class=\"line\">    name: ProjectName,</span><br><span class=\"line\">    sourcemap: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    nodeResolve(),</span><br><span class=\"line\">    commonjs(&#123;</span><br><span class=\"line\">      sourceMap: <span class=\"literal\">false</span>,  <span class=\"comment\">// Default: true</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    filesize(),</span><br><span class=\"line\">    babel(&#123;</span><br><span class=\"line\">      exclude: <span class=\"string\">'node_modules/**'</span>, <span class=\"comment\">// 只编译我们的源代码</span></span><br><span class=\"line\">      babelHelpers: <span class=\"string\">'runtime'</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    terser(),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中主要配置是   <code>input</code> , <code>output</code> , <code>plugins</code></p>\n<p><code>input</code> 就是整个库的入口文件</p>\n<p><code>output</code> 就是打包后文件存放的位置，其中比较重要的是 <code>format</code> 这个参数，配置打包模块方式，常用的有 <code>cjs -- commonjs</code>  <code>umd -- 通用模块定义规范</code>  <code>esm -- es moudle</code>  ， 详情参考网上关于  <strong>CommonJS、AMD、CMD、UMD和ES Modules的区别</strong></p>\n<p><code>plugins</code> 是打包过程中使用到的插件，rollup 的精髓就是通过各种插件实现想要的效果。</p>\n<p>上面配置中用到如下插件：</p>\n<ul>\n<li>nodeResolve    加载node_moudles 三方包</li>\n<li>commonjs   （rollup 支持es模块规范，需要将commonjs转成 esm）</li>\n<li>filesize （构建时提示）</li>\n<li>babel （重要！  将 es2015+ 语法转成es5 支持的语法，相关介绍后期单独开一个文章）</li>\n<li>terser (打包压缩)</li>\n</ul>\n<p>接着我们在 <code>package.json</code> 中添加构建脚本 </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"build\": \"rimraf ./build/ &amp;&amp; rollup -c --pub\",</span><br></pre></td></tr></table></figure>\n<p>其中 <code>rimraf</code> 是安装的插件，实现构建前将 /build 文件夹及其下面所有文件删除的功能，通过以下方式安装:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i rimraf -D</span><br></pre></td></tr></table></figure>\n<p>执行后就会在根目录 /build 文件下生成打包后的 js 文件</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gq1l85x31jj30gu05omxp.jpg\" alt=\"image-20210430110115587\"></p>\n<h2 id=\"3-npm-发布\"><a href=\"#3-npm-发布\" class=\"headerlink\" title=\"3. npm 发布\"></a>3. npm 发布</h2><p>经过 编写库代码、rollup 构建打包，接下来就是将打包好的库发布到 npm 仓库上去。</p>\n<ol>\n<li>首先需要注册一个 npm 的账户</li>\n<li>完善 <code>package.json</code>  下的包信息</li>\n<li>使用 <code>npm login</code>  本地登陆账号 （注： 如果更改了 npm 源可以能遇到问题，具体参考网上解答或者换回原本的源）</li>\n<li>接着就可以直接发布了 <code>npm publish</code> ，然后在 npm 上就可以看到自己发布的包了。</li>\n</ol>\n<h2 id=\"4-自动化发布（待续）……\"><a href=\"#4-自动化发布（待续）……\" class=\"headerlink\" title=\"4. 自动化发布（待续）……\"></a>4. 自动化发布（待续）……</h2><p>整个打包发库过程还可以更自动化一点，可以通过 travis CI 结合 github来实现 构建发布一条龙服务，具体配置和使用，后面再结合 rollup 打包的 babel 配置一起来说。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckzgul15c0000mmsfq7quaqhh","category_id":"ckzgul15n0002mmsf9ck5hkb2","_id":"ckzgul15x000cmmsfs5ekc3kz"},{"post_id":"ckzgul15s0006mmsfsaykdfu6","category_id":"ckzgul15n0002mmsf9ck5hkb2","_id":"ckzgul15y000fmmsfaz5p79um"},{"post_id":"ckzgul15h0001mmsfx78895lz","category_id":"ckzgul15n0002mmsf9ck5hkb2","_id":"ckzgul15z000gmmsf3tfod83o"},{"post_id":"ckzgul15p0004mmsf0dm0ewzb","category_id":"ckzgul15n0002mmsf9ck5hkb2","_id":"ckzgul15z000jmmsftk7tv9u2"},{"post_id":"ckzgul1a5000lmmsf7d03qbzf","category_id":"ckzgul15n0002mmsf9ck5hkb2","_id":"ckzgul1ak000tmmsfna5i6orj"},{"post_id":"ckzgul1a8000nmmsfs6dzb2cq","category_id":"ckzgul15n0002mmsf9ck5hkb2","_id":"ckzgul1al000wmmsfbu5i6jk2"},{"post_id":"ckzgul1aj000smmsfxlyqahta","category_id":"ckzgul15n0002mmsf9ck5hkb2","_id":"ckzgul1ao0011mmsfpspr966y"},{"post_id":"ckzgul1al000vmmsfv04c2610","category_id":"ckzgul15n0002mmsf9ck5hkb2","_id":"ckzgul1ap0015mmsfk5y5thsb"},{"post_id":"ckzgul1ac000qmmsfhra09wsw","category_id":"ckzgul1al000ummsf1nll1dkm","_id":"ckzgul1aq0018mmsf0neiz209"},{"post_id":"ckzgul1am000zmmsfyjpc1u3r","category_id":"ckzgul15n0002mmsf9ck5hkb2","_id":"ckzgul1at001hmmsfkunahlw1"},{"post_id":"ckzgul1am000zmmsfyjpc1u3r","category_id":"ckzgul1ap0014mmsfphhld2lv","_id":"ckzgul1av001lmmsf2xo9ktve"},{"post_id":"ckzgul1ar001bmmsffy3m7b9k","category_id":"ckzgul15n0002mmsf9ck5hkb2","_id":"ckzgul1aw001pmmsf3ot7qoc5"},{"post_id":"ckzgul1as001dmmsfwh8ntcu8","category_id":"ckzgul15n0002mmsf9ck5hkb2","_id":"ckzgul1ax001tmmsfd6roksa7"},{"post_id":"ckzgul1an0010mmsfbuxhzpd7","category_id":"ckzgul15n0002mmsf9ck5hkb2","_id":"ckzgul1ay001vmmsfqfbowxxi"},{"post_id":"ckzgul1an0010mmsfbuxhzpd7","category_id":"ckzgul1ar001cmmsfds6i1ko6","_id":"ckzgul1az001zmmsf89cmuts5"},{"post_id":"ckzgul1au001kmmsf6o776ux8","category_id":"ckzgul15n0002mmsf9ck5hkb2","_id":"ckzgul1az0020mmsf8vuaje97"},{"post_id":"ckzgul1ao0013mmsf2u6bgptl","category_id":"ckzgul1au001immsfih00kuk7","_id":"ckzgul1b00022mmsfkvsgkbjm"},{"post_id":"ckzgul1av001nmmsfcacbmvaa","category_id":"ckzgul15n0002mmsf9ck5hkb2","_id":"ckzgul1b00024mmsfa7kf2qj0"},{"post_id":"ckzgul1av001nmmsfcacbmvaa","category_id":"ckzgul1ar001cmmsfds6i1ko6","_id":"ckzgul1b00026mmsf9pj8265p"},{"post_id":"ckzgul1ax001smmsf6rkagyhz","category_id":"ckzgul15n0002mmsf9ck5hkb2","_id":"ckzgul1b10027mmsfon1iprzx"},{"post_id":"ckzgul1ap0017mmsfmten1cuk","category_id":"ckzgul1aw001qmmsf22qsn7br","_id":"ckzgul1b10029mmsffng9zvqy"},{"post_id":"ckzgul1at001gmmsf5viem5im","category_id":"ckzgul1au001immsfih00kuk7","_id":"ckzgul1b1002bmmsfr03nplhg"}],"PostTag":[{"post_id":"ckzgul15c0000mmsfq7quaqhh","tag_id":"ckzgul15p0003mmsfuwulraah","_id":"ckzgul15v0009mmsfbg4ubgd6"},{"post_id":"ckzgul15s0006mmsfsaykdfu6","tag_id":"ckzgul15p0003mmsfuwulraah","_id":"ckzgul15w000ammsf4k94pbb7"},{"post_id":"ckzgul15h0001mmsfx78895lz","tag_id":"ckzgul15p0003mmsfuwulraah","_id":"ckzgul15y000emmsf82ropjkr"},{"post_id":"ckzgul15p0004mmsf0dm0ewzb","tag_id":"ckzgul15x000dmmsfkette73h","_id":"ckzgul15z000immsfykh3j3kl"},{"post_id":"ckzgul15r0005mmsfmiszsced","tag_id":"ckzgul15z000hmmsfymrwgesc","_id":"ckzgul160000kmmsf5vvo532k"},{"post_id":"ckzgul1a8000nmmsfs6dzb2cq","tag_id":"ckzgul15p0003mmsfuwulraah","_id":"ckzgul1aj000rmmsf9yacir8y"},{"post_id":"ckzgul1aj000smmsfxlyqahta","tag_id":"ckzgul15p0003mmsfuwulraah","_id":"ckzgul1am000ymmsfqxb0z52w"},{"post_id":"ckzgul1a5000lmmsf7d03qbzf","tag_id":"ckzgul1ac000pmmsfjqacoi5f","_id":"ckzgul1ap0016mmsf4av0gdns"},{"post_id":"ckzgul1a5000lmmsf7d03qbzf","tag_id":"ckzgul1al000xmmsftv0393q9","_id":"ckzgul1aq0019mmsf2hk7gmt1"},{"post_id":"ckzgul1ar001bmmsffy3m7b9k","tag_id":"ckzgul15p0003mmsfuwulraah","_id":"ckzgul1as001emmsfto3p22z2"},{"post_id":"ckzgul1ac000qmmsfhra09wsw","tag_id":"ckzgul1ao0012mmsfsh2vdv6r","_id":"ckzgul1au001jmmsfmqkktyxs"},{"post_id":"ckzgul1ac000qmmsfhra09wsw","tag_id":"ckzgul1aq001ammsf43x86qw5","_id":"ckzgul1av001mmmsfugc3bf49"},{"post_id":"ckzgul1al000vmmsfv04c2610","tag_id":"ckzgul15z000hmmsfymrwgesc","_id":"ckzgul1ax001rmmsffpnq3r3p"},{"post_id":"ckzgul1al000vmmsfv04c2610","tag_id":"ckzgul1at001fmmsfjfysjilh","_id":"ckzgul1ay001ummsfl65bs3xr"},{"post_id":"ckzgul1am000zmmsfyjpc1u3r","tag_id":"ckzgul1aw001ommsfz3vyy1p6","_id":"ckzgul1az001ymmsfsiroap9h"},{"post_id":"ckzgul1an0010mmsfbuxhzpd7","tag_id":"ckzgul1ay001wmmsfyd3wpt8s","_id":"ckzgul1b00023mmsf4szuft4f"},{"post_id":"ckzgul1ao0013mmsf2u6bgptl","tag_id":"ckzgul1az0021mmsft98m1qpt","_id":"ckzgul1b1002ammsfmh8pybnv"},{"post_id":"ckzgul1ao0013mmsf2u6bgptl","tag_id":"ckzgul1b00025mmsfnyh07cmu","_id":"ckzgul1b1002cmmsff180alfb"},{"post_id":"ckzgul1ap0017mmsfmten1cuk","tag_id":"ckzgul1b10028mmsfoq0wajdi","_id":"ckzgul1b2002emmsf3pvk2pfn"},{"post_id":"ckzgul1as001dmmsfwh8ntcu8","tag_id":"ckzgul1b1002dmmsf8btqcgck","_id":"ckzgul1b3002gmmsfjoif1ii1"},{"post_id":"ckzgul1at001gmmsf5viem5im","tag_id":"ckzgul1b10028mmsfoq0wajdi","_id":"ckzgul1b3002immsfrvjfo09u"},{"post_id":"ckzgul1au001kmmsf6o776ux8","tag_id":"ckzgul1b3002hmmsf439564y4","_id":"ckzgul1b4002kmmsfy6qgkh1b"},{"post_id":"ckzgul1av001nmmsfcacbmvaa","tag_id":"ckzgul1ay001wmmsfyd3wpt8s","_id":"ckzgul1b5002mmmsft0hffn1u"},{"post_id":"ckzgul1ax001smmsf6rkagyhz","tag_id":"ckzgul15p0003mmsfuwulraah","_id":"ckzgul1b5002ommsfcv8r0pqf"},{"post_id":"ckzgul1ax001smmsf6rkagyhz","tag_id":"ckzgul1b4002lmmsf37e72a0u","_id":"ckzgul1b6002pmmsfwub2vg0a"},{"post_id":"ckzgul1ax001smmsf6rkagyhz","tag_id":"ckzgul1b5002nmmsf2bbsefki","_id":"ckzgul1b6002qmmsfeuu6ltik"}],"Tag":[{"name":"javascript","_id":"ckzgul15p0003mmsfuwulraah"},{"name":"blob","_id":"ckzgul15x000dmmsfkette73h"},{"name":"Vue","_id":"ckzgul15z000hmmsfymrwgesc"},{"name":"i18n","_id":"ckzgul1ac000pmmsfjqacoi5f"},{"name":"nuxt","_id":"ckzgul1al000xmmsftv0393q9"},{"name":"ThreeJs","_id":"ckzgul1ao0012mmsfsh2vdv6r"},{"name":"JavaScript","_id":"ckzgul1aq001ammsf43x86qw5"},{"name":"Vue-Router","_id":"ckzgul1at001fmmsfjfysjilh"},{"name":"react","_id":"ckzgul1aw001ommsfz3vyy1p6"},{"name":"vue","_id":"ckzgul1ay001wmmsfyd3wpt8s"},{"name":"前端","_id":"ckzgul1az0021mmsft98m1qpt"},{"name":"css技巧","_id":"ckzgul1b00025mmsfnyh07cmu"},{"name":"css","_id":"ckzgul1b10028mmsfoq0wajdi"},{"name":"summary","_id":"ckzgul1b1002dmmsf8btqcgck"},{"name":"algorithm","_id":"ckzgul1b3002hmmsf439564y4"},{"name":"rollup","_id":"ckzgul1b4002lmmsf37e72a0u"},{"name":"npm","_id":"ckzgul1b5002nmmsf2bbsefki"}]}}