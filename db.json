{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/uploads/wechat-qcode.png","path":"uploads/wechat-qcode.png","modified":0,"renderable":0},{"_id":"themes/maple/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/maple/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/maple/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/maple/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/maple/source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/maple/source/img/logo.svg","path":"img/logo.svg","modified":0,"renderable":1},{"_id":"themes/maple/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/maple/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/maple/source/lib/clipboard.min.js","path":"lib/clipboard.min.js","modified":0,"renderable":1},{"_id":"themes/maple/source/lib/iconify-icon.min.js","path":"lib/iconify-icon.min.js","modified":0,"renderable":1},{"_id":"themes/maple/source/lib/jquery.min.js","path":"lib/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/maple/source/lib/fancybox/fancybox.min.css","path":"lib/fancybox/fancybox.min.css","modified":0,"renderable":1},{"_id":"themes/maple/source/lib/fancybox/fancybox.umd.min.js","path":"lib/fancybox/fancybox.umd.min.js","modified":0,"renderable":1},{"_id":"themes/maple/source/lib/nprogress/nprogress.css","path":"lib/nprogress/nprogress.css","modified":0,"renderable":1},{"_id":"themes/maple/source/lib/nprogress/nprogress.js","path":"lib/nprogress/nprogress.js","modified":0,"renderable":1},{"_id":"themes/maple/source/lib/tocbot/tocbot.min.js","path":"lib/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/maple/source/lib/tocbot/tocbot.min.css","path":"lib/tocbot/tocbot.min.css","modified":0,"renderable":1}],"Cache":[{"_id":"source/categories/index.md","hash":"717a27a16cd52ea00cc0da7080493b7c4488f8b3","modified":1703146945283},{"_id":"source/_posts/JS bind的使用和实现原理剖析.md","hash":"70285bf5474f3d67fe8aba7c7d34b23920a5c70b","modified":1617087405000},{"_id":"source/_posts/JS new 运算符的使用和原理剖析.md","hash":"7c58fab33bfab3af0fbcdeeba007519c22477c81","modified":1617087415000},{"_id":"source/_posts/Nuxt.js  i18n国际化.md","hash":"62c23b6b1dcf5cbc505a812e9575945612fd4c04","modified":1554044905000},{"_id":"source/_posts/ThreeJs基础概念.md","hash":"ff3f31e8258a0ad3706e113e0dc302d72d09e3de","modified":1617087447000},{"_id":"source/_posts/blob2pic.md","hash":"c2d763b3236c9611d370a7f10ab8488dc460b46e","modified":1586274822000},{"_id":"source/_posts/css多行文本省略号.md","hash":"b7db4ce14f77257d9d665703761e562636ef593d","modified":1553145582000},{"_id":"source/_posts/eslint-prettier-stylelint-commitlint配置.md","hash":"bcc6887c06483a54e0afd716283de711e1755b5d","modified":1644549199000},{"_id":"source/_posts/Js 如何实现函数只执行一次.md","hash":"1c9c1c73293bdd12f1bf7ed18972bbc23e66096c","modified":1604503192000},{"_id":"source/_posts/js   Call、Apply的使用和剖析.md","hash":"1ef9e4ec2d19894a2e81e441ba121db8cc67e935","modified":1604503790000},{"_id":"source/_posts/js 的浅拷贝和深拷贝.md","hash":"a6f752a1308f6e5a6013b52966d5268e7e973b25","modified":1604503619000},{"_id":"source/_posts/react  知识点.md","hash":"986e0480e52b00411d8ed64bc15ddd93bc344976","modified":1595257088000},{"_id":"source/_posts/vue-router配置踩坑.md","hash":"0b2ae1d07763e0b169b22ba9c9a7020c11a547e8","modified":1619773691000},{"_id":"source/_posts/不使用 + 、-求两个数的和 （含符号）.md","hash":"39f2427cfcc86ab1e75b6331609dca1c2ca7d006","modified":1592496745000},{"_id":"source/_posts/从零开始学习Vue源码(一) —— 概览.md","hash":"45f7a247d4d02da054f4be47152081195bee6824","modified":1595257103000},{"_id":"source/_posts/从零开始学习Vue源码(二) ——响应式基本原理.md","hash":"77c9dba25c4f9f4a33c9b069cd5e70e96ef16974","modified":1595257113000},{"_id":"source/_posts/less笔记.md","hash":"f89ccee9693cbc62976496a731fee30f373f4025","modified":1617087429000},{"_id":"source/_posts/使用rollup打包并发布一个js库.md","hash":"03ee06d2e00ea6f2a89374b3b023ac16af3549d2","modified":1619773679000},{"_id":"source/_posts/前端知识点梳理   --part one.md","hash":"aea76b6f40d7b41bae672cc15893f2615fdea3f1","modified":1595258063000},{"_id":"source/_posts/水波纹动效.md","hash":"a7ff127a4c1be38dea06c2886bbadf1fa65a8247","modified":1595257126000},{"_id":"source/_posts/同步、异步、任务队列.md","hash":"2e68c6be293d25a0d3c3bc638ecc017f1a0ebff2","modified":1617087439000},{"_id":"source/tags/index.md","hash":"4b6190467039f22c41b38eea68c151c83b2ad7f7","modified":1703146958085},{"_id":"source/uploads/wechat-qcode.png","hash":"c46829642e2877ed7914a6134aec8dca51e93185","modified":1550288889000},{"_id":"themes/maple/.editorconfig","hash":"b16f01a7b04ad512e15ebb32c5786d432a536779","modified":1703145746394},{"_id":"themes/maple/.gitignore","hash":"67656f75e8113a4275ba5ef394b7662fab3ebea0","modified":1703145746394},{"_id":"themes/maple/package.json","hash":"1fcf302f78d748f96ca62b6f0070e20889200004","modified":1703145746400},{"_id":"themes/maple/LICENSE","hash":"632b916dd7e4f5c11790ab808388cda6610210ed","modified":1703145746394},{"_id":"themes/maple/_config.yml","hash":"197c1cc045de35841a7460e81bc019cf9b365ed0","modified":1703146929965},{"_id":"themes/maple/languages/default.yml","hash":"da38f00bb45a318f118db0d74df24a137351777e","modified":1703145746395},{"_id":"themes/maple/languages/de.yml","hash":"d45cea36c5c83d7d09afcd1c26fff4a4c513c25b","modified":1703145746395},{"_id":"themes/maple/languages/en.yml","hash":"72066419d6682a017c97910921ade125f21b04cd","modified":1703145746395},{"_id":"themes/maple/languages/es.yml","hash":"1e581098303181ed7927827d2388990f495cc873","modified":1703145746395},{"_id":"themes/maple/languages/ja.yml","hash":"3e2fedca096678c0c234ebffa4637828979296fa","modified":1703145746395},{"_id":"themes/maple/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1703145746396},{"_id":"themes/maple/languages/ko.yml","hash":"11330316e3c1262474a2b496e40dbc29f93fe01b","modified":1703145746395},{"_id":"themes/maple/languages/fr.yml","hash":"8cb0fe4b6913b4d5b662cdd0108a923c90025f85","modified":1703145746395},{"_id":"themes/maple/languages/no.yml","hash":"182bd9ea76313ec9dc769b5dd2845c0d1c56e3a0","modified":1703145746396},{"_id":"themes/maple/languages/pt.yml","hash":"ae2c61b30e638f74f1a42c9ce39ac08d063b30f5","modified":1703145746396},{"_id":"themes/maple/languages/zh-CN.yml","hash":"e41d1e0e3a9e15c30b7142491bed39dc50371e96","modified":1703145746396},{"_id":"themes/maple/README.md","hash":"7e7179813a261535974f8ac70241cb2f73c6aa2f","modified":1703145746394},{"_id":"themes/maple/languages/ru.yml","hash":"50d08403ca204fba074f616b0d054a657f8d642f","modified":1703145746396},{"_id":"themes/maple/layout/archive.ejs","hash":"e58f4934d945f53e012a3ed5fc12f58bcb460ec0","modified":1703145746399},{"_id":"themes/maple/layout/category.ejs","hash":"4011aa116f3256fe5ab4934193108aa93e4a0f55","modified":1703145746399},{"_id":"themes/maple/languages/zh-TW.yml","hash":"d2cb9d5d8a4a80479547da0bb63e2feee0fffe47","modified":1703145746396},{"_id":"themes/maple/layout/index.ejs","hash":"d4bd174f3b8136034df484fa26ec10eae7ad7432","modified":1703145746399},{"_id":"themes/maple/layout/layout.ejs","hash":"77334fae76b4310e4294b67dd7b36e97b2bd9f0b","modified":1703145746399},{"_id":"themes/maple/layout/tag.ejs","hash":"b61a25d7767b75b1168b6b9f7f212ba0c3145f98","modified":1703145746400},{"_id":"themes/maple/scripts/echarts.js","hash":"2c5a1439a12b3c3ab3fd51b3572748a0ccd8667a","modified":1703145746400},{"_id":"themes/maple/scripts/mermaid.js","hash":"778f3daf90edab9bd5c007cfb131e69e3e65709f","modified":1703145746401},{"_id":"themes/maple/scripts/wordcount.js","hash":"bbab5a5c5f28da2d75f36fc95b4c817e33e9e17a","modified":1703145746401},{"_id":"themes/maple/layout/post.ejs","hash":"8b9176119c87abf6f3abadc04ecfc5afd5f674f4","modified":1703145746400},{"_id":"themes/maple/source/favicon.ico","hash":"8ede8a7e8edefbd78bb978d781a502f696c32be9","modified":1703145746401},{"_id":"themes/maple/layout/_plugins/baidu-analytics.ejs","hash":"7b92fafbaab42c32780a7716a41aa9130e8f6352","modified":1703145746397},{"_id":"themes/maple/layout/_plugins/busuanzi.ejs","hash":"e4907e8d16e58abdd931f5b66c954dd28b9fee6b","modified":1703145746397},{"_id":"themes/maple/layout/_plugins/fancybox.ejs","hash":"4591ed1a13ed32b67844a4505f3ac613535fd23f","modified":1703145746397},{"_id":"themes/maple/layout/_plugins/disqusjs.ejs","hash":"5f9b22b65eb828e3af178379c3d5be56d93a7aaa","modified":1703145746397},{"_id":"themes/maple/layout/_plugins/giscus.ejs","hash":"24a1a2b7b7b5fc978392e5f284da27b263b9164f","modified":1703145746398},{"_id":"themes/maple/layout/_plugins/maple.ejs","hash":"fe5f2207a9c59836edfae5e7ecb520dbe0c64706","modified":1703145746398},{"_id":"themes/maple/layout/_plugins/google-analytics.ejs","hash":"295659ef0d9c902cf7a3d0f2671e83c38be2645b","modified":1703145746398},{"_id":"themes/maple/layout/_plugins/mathjax.ejs","hash":"c358356a7595b5e1fe1d65aee10616eec8eb00e7","modified":1703145746398},{"_id":"themes/maple/layout/_plugins/mermaid.ejs","hash":"804c36256f9232a1fe6f308e06ae89642fe0eb1b","modified":1703145746398},{"_id":"themes/maple/layout/_plugins/nprogress.ejs","hash":"0c2a73e67ffe2563c58c5274f007df02765ec08a","modified":1703145746398},{"_id":"themes/maple/layout/_plugins/tailwindcss.ejs","hash":"ff6a9e9180453fcc8c67515e1baa564d181f1836","modified":1703145746398},{"_id":"themes/maple/layout/_plugins/tocbot.ejs","hash":"e28198bc5ff2dc563838b9eaa39b399eb8b9e47f","modified":1703145746399},{"_id":"themes/maple/layout/_plugins/theme.ejs","hash":"0c23420768391f362eda8e6833a78961afe1cea7","modified":1703145746399},{"_id":"themes/maple/layout/_partial/footer.ejs","hash":"9bf536a5e4da95d488e9fa33450e0f94385d2577","modified":1703145746396},{"_id":"themes/maple/layout/_partial/head.ejs","hash":"6155a5e4ce7ac90340fef979d1c6714eb9492f76","modified":1703145746397},{"_id":"themes/maple/layout/_partial/header.ejs","hash":"ebce35f1a6a2e2cf3e0a6c6038ac78942b1a44b3","modified":1703145746397},{"_id":"themes/maple/layout/_partial/after-footer.ejs","hash":"48f56bcea9820ca347f509703ecc626ee4154276","modified":1703145746396},{"_id":"themes/maple/layout/_partial/paginator.ejs","hash":"7c64dd99baf13eb3c1b25435f3617635f351dbad","modified":1703145746397},{"_id":"themes/maple/layout/_partial/toc.ejs","hash":"53b822671f4049da30d3742c1cc9774751dee8f4","modified":1703145746397},{"_id":"themes/maple/source/css/highlight.styl","hash":"d2772f30760aa99f7d8995e3f65c96bd10da29b6","modified":1703145746401},{"_id":"themes/maple/source/css/main.styl","hash":"bdd2634b720e6716b1ca88e23f60f25add51536c","modified":1703145746401},{"_id":"themes/maple/source/img/logo.svg","hash":"75341fbd657844a29dc5e217f67c71295ad1239c","modified":1703145746410},{"_id":"themes/maple/source/images/logo.svg","hash":"1b7a73d948e593dcec7549d63e5ac60ad6db6a8f","modified":1703145746406},{"_id":"themes/maple/source/lib/clipboard.min.js","hash":"f48e9bfeca83e5057cc751e8c44fc07e9d976c06","modified":1703145746410},{"_id":"themes/maple/source/lib/iconify-icon.min.js","hash":"7526cf2b54b9e657f377083129cc00c5aa4dc110","modified":1703145746411},{"_id":"themes/maple/source/lib/fancybox/fancybox.min.css","hash":"1564bb6a6b930a61875610c05001c4f7bfe9939a","modified":1703145746410},{"_id":"themes/maple/source/js/main.js","hash":"c06a89f631ac37cc3acde2ce0979f6ebf6f6e6d6","modified":1703145746410},{"_id":"themes/maple/source/lib/nprogress/nprogress.css","hash":"d8a2825a6fb35a3eeb3743e09184c18be9dbfcdc","modified":1703145746412},{"_id":"themes/maple/source/lib/tocbot/tocbot.min.js","hash":"4f1b40a6818fe6e955f2ce7de3b79aec4dcd0a7c","modified":1703145746412},{"_id":"themes/maple/source/lib/tocbot/tocbot.min.css","hash":"0029d92ce7f1a59c7c57feb6d5f80649daba3db8","modified":1703145746412},{"_id":"themes/maple/source/lib/nprogress/nprogress.js","hash":"e328b676f7e93bd78cd5d31cd0899cba2a423097","modified":1703145746412},{"_id":"themes/maple/README.zh-CN.md","hash":"1c641b9df0614e6cba2269f130dd4af376067037","modified":1703145746394},{"_id":"themes/maple/package-lock.json","hash":"baa49ca26642e92ef622b2ef21d4ec8af602fd8e","modified":1703145746400},{"_id":"themes/maple/source/lib/jquery.min.js","hash":"69bb69e25ca7d5ef0935317584e6153f3fd9a88c","modified":1703145746411},{"_id":"themes/maple/source/lib/fancybox/fancybox.umd.min.js","hash":"e766e468e4f017b51a643648f6b4f05187c41d6b","modified":1703145746411},{"_id":"themes/maple/source/images/avatar.jpg","hash":"0eb2de59901a55c792898ddf5d1da3ed96f2e2d8","modified":1703145746405},{"_id":"themes/maple/source/img/avatar.jpg","hash":"0eb2de59901a55c792898ddf5d1da3ed96f2e2d8","modified":1703145746409},{"_id":"public/categories/index.html","hash":"7674939701aa7e08a745484b1dd1fb62761d5ae4","modified":1703146961672},{"_id":"public/tags/index.html","hash":"89d7c4a1055ad3ee3aadaaa66b6226476fd0141d","modified":1703146961672},{"_id":"public/archives/2019/index.html","hash":"671f39aeef52d98664065abca56d81651728191f","modified":1703146961672},{"_id":"public/archives/2019/03/index.html","hash":"fe72ef4740e51c67ba5eba587e212da6b9a45f9a","modified":1703146961672},{"_id":"public/archives/2020/page/2/index.html","hash":"1a36aeacf00d9fbcc2de37f462ea165cf288dfe2","modified":1703146961672},{"_id":"public/archives/2020/04/index.html","hash":"006f32100c40075ee8bb95c5ec76429cc017fe6f","modified":1703146961672},{"_id":"public/archives/2020/06/index.html","hash":"9e8df530d3de65428d4a8570f7f59bcfd5d52d9b","modified":1703146961672},{"_id":"public/archives/2021/index.html","hash":"5b3fe99e5281f58960f4fe8f04e4e9402f355214","modified":1703146961672},{"_id":"public/archives/2021/03/index.html","hash":"1bb28d82554891126cafd857e9f271f30b2f9937","modified":1703146961672},{"_id":"public/archives/2021/04/index.html","hash":"82d8ad8aef7011acfb821cfd47b6607dae527b81","modified":1703146961672},{"_id":"public/archives/2022/index.html","hash":"da13735cc6b5b90cb7a13eb8cfeac8e6e819cb5a","modified":1703146961672},{"_id":"public/archives/2022/02/index.html","hash":"3f80dfaffd04d05075e1f844052cdae374faa7d8","modified":1703146961672},{"_id":"public/tags/i18n/index.html","hash":"f66b4fe415f75a292c3dc2867acb8d613e7f2767","modified":1703146961672},{"_id":"public/tags/nuxt/index.html","hash":"de99abe268cb8dd6328c5a3b309aded00290deaa","modified":1703146961672},{"_id":"public/tags/ThreeJs/index.html","hash":"d1865256be238ace934e8a52c42602535e99994f","modified":1703146961672},{"_id":"public/tags/JavaScript/index.html","hash":"15da74f9a690c1090125d398aa163b7d5d234bff","modified":1703146961672},{"_id":"public/tags/前端/index.html","hash":"58232a10b3c6b0f609a2d5d5adb8918a43b90c03","modified":1703146961672},{"_id":"public/tags/css技巧/index.html","hash":"d2c51f5eff465cb6f5488e525f35bab06f1d72a2","modified":1703146961672},{"_id":"public/tags/Vue/index.html","hash":"6e4c59e2f53286cccd4f0552a717aab7ad195dfb","modified":1703146961672},{"_id":"public/tags/react/index.html","hash":"d0bccac5de63e1d67aec3e7b871d045bf133b651","modified":1703146961672},{"_id":"public/tags/Vue-Router/index.html","hash":"7dd37d5401411da45aa411e8fb2d67b3d601bf8e","modified":1703146961672},{"_id":"public/tags/algorithm/index.html","hash":"595d7cc80f28e665e108dcf0c122c8da0c65f6e5","modified":1703146961672},{"_id":"public/tags/blob/index.html","hash":"4e92d10805ef90809f467b7a0c37d96e884a9641","modified":1703146961672},{"_id":"public/tags/vue/index.html","hash":"112ae27525d003dbaa39a9d93035a35ba9d77093","modified":1703146961672},{"_id":"public/tags/rollup/index.html","hash":"205686f2e1b4d4a3f8486f9c8fc4a5e36309964d","modified":1703146961672},{"_id":"public/tags/npm/index.html","hash":"ab1c0937177d509aa1098220049438fa9fe3a55e","modified":1703146961672},{"_id":"public/tags/summary/index.html","hash":"4c5a2080944ce52260a362a5656a4b15b86b374a","modified":1703146961672},{"_id":"public/tags/css/index.html","hash":"cbd45a469bce841497ba1af6ac062a9b6a4b5a23","modified":1703146961672},{"_id":"public/2022/02/10/eslint-prettier-stylelint-commitlint配置/index.html","hash":"0d28b0e1c09ce0ab83b475605593ae0ffffab77d","modified":1703146961672},{"_id":"public/2021/03/30/vue-router配置踩坑/index.html","hash":"1292226cbbaf84adb8f7ea6cf2d70e754ae7b477","modified":1703146961672},{"_id":"public/2021/04/30/使用rollup打包并发布一个js库/index.html","hash":"7081ecd7066076b302e3026a7708eb65a7a0a681","modified":1703146961672},{"_id":"public/2021/03/30/ThreeJs基础概念/index.html","hash":"838b615682c1e6553edbb3d870948e1168cfbea6","modified":1703146961672},{"_id":"public/2021/03/30/同步、异步、任务队列/index.html","hash":"861162503a9d876db48823afce6533633f535c65","modified":1703146961672},{"_id":"public/2020/11/04/JS new 运算符的使用和原理剖析/index.html","hash":"2103525d9b00a3470269b4bce41042c001e8e98d","modified":1703146961672},{"_id":"public/2020/11/04/JS bind的使用和实现原理剖析/index.html","hash":"458754bb1f3dfedea1b7cb52b9aff6e70f81129b","modified":1703146961672},{"_id":"public/2020/11/04/js   Call、Apply的使用和剖析/index.html","hash":"7932804eb548a067d62a189c3c9893134b710e26","modified":1703146961672},{"_id":"public/2020/11/04/js 的浅拷贝和深拷贝/index.html","hash":"2d64fd0c6830d8a25cc46d84040ce3cbca2a6e34","modified":1703146961672},{"_id":"public/2020/11/04/Js 如何实现函数只执行一次/index.html","hash":"e90c688556cde7e321afbb4c77144e80b31a8630","modified":1703146961672},{"_id":"public/2020/11/04/less笔记/index.html","hash":"24e7e8ff50607694713458d6f6551d71efc1f5e3","modified":1703146961672},{"_id":"public/2020/07/20/水波纹动效/index.html","hash":"b7912f29a47b9122aee8223f66086412ceb6f6f8","modified":1703146961672},{"_id":"public/2020/07/01/从零开始学习Vue源码(一) —— 概览/index.html","hash":"6211b358ead581dde55be8946334d84bcf677c1f","modified":1703146961672},{"_id":"public/2020/07/01/react  知识点/index.html","hash":"27b77aa27ffb3112a90d1d7418cacdb69a606542","modified":1703146961672},{"_id":"public/2020/06/19/不使用 + 、-求两个数的和 （含符号）/index.html","hash":"8a8bebbf15b1007ae6ed08c3a54998accbefcfc3","modified":1703146961672},{"_id":"public/2020/06/10/前端知识点梳理   --part one/index.html","hash":"b659a5e468d6b001d35f805aa808dd190cabcaa9","modified":1703146961672},{"_id":"public/2020/04/07/blob2pic/index.html","hash":"fcdb3dbb165482f35db38eb08caf6b2ae70e4c1b","modified":1703146961672},{"_id":"public/2020/07/01/从零开始学习Vue源码(二) ——响应式基本原理/index.html","hash":"e891c63d187a3ad13403fba3be113543c35e9b5e","modified":1703146961672},{"_id":"public/2019/03/31/Nuxt.js  i18n国际化/index.html","hash":"32144c0d9ef436fbf91e7cda2d711a9b40204526","modified":1703146961672},{"_id":"public/2019/03/21/css多行文本省略号/index.html","hash":"b90376ae10f9d0a5c7226826fa30fccba9f80bfb","modified":1703146961672},{"_id":"public/archives/index.html","hash":"c5217ae3d2142a3288b7145cf11e481351c0b756","modified":1703146961672},{"_id":"public/archives/page/2/index.html","hash":"6c94d713902008f1145d6076766d28d65c0ddf7d","modified":1703146961672},{"_id":"public/archives/2020/index.html","hash":"af75059494ba8343df6bb24dda414d97285f5fc1","modified":1703146961672},{"_id":"public/archives/2020/07/index.html","hash":"c043b9c432d03a335b0546e371640bd736a0cafe","modified":1703146961672},{"_id":"public/archives/2020/11/index.html","hash":"ae52ee0574b4fcff298ffac76444525eea28c68a","modified":1703146961672},{"_id":"public/tags/javascript/index.html","hash":"0537a18acfa0711e6e2daadc3c0a2ded51643977","modified":1703146961672},{"_id":"public/index.html","hash":"4192c47c09467951d90c6ea4a693b64cf6155daf","modified":1703146961672},{"_id":"public/page/2/index.html","hash":"f2a7b99b2e913dd7a510b2e27e01f573a7a94ea4","modified":1703146961672},{"_id":"public/categories/ThreeJs/index.html","hash":"3d12ad265a80445cfeb1fbfb59bc2368ef4c88f9","modified":1703146961672},{"_id":"public/categories/javascript/page/2/index.html","hash":"80b486fc8dc491b543d9a4c7fbb16bc955e06c87","modified":1703146961672},{"_id":"public/categories/css/index.html","hash":"4a74f5c1ba4645cc4f976a9f647dbf8488be2521","modified":1703146961672},{"_id":"public/categories/javascript/vue/index.html","hash":"60d86f9388c83f5b7b13b322a501e2bb304cb5f4","modified":1703146961672},{"_id":"public/categories/less/index.html","hash":"e94dc1841004c7d5760ac7262f1abc62edd26024","modified":1703146961672},{"_id":"public/categories/javascript/react/index.html","hash":"e10133c3c495faf55cdba9e5332032658fe6b85f","modified":1703146961672},{"_id":"public/categories/javascript/index.html","hash":"940ba4c1cee43d3d965cf03004141733d9e063da","modified":1703146961672},{"_id":"public/img/logo.svg","hash":"75341fbd657844a29dc5e217f67c71295ad1239c","modified":1703146961672},{"_id":"public/uploads/wechat-qcode.png","hash":"c46829642e2877ed7914a6134aec8dca51e93185","modified":1703146961672},{"_id":"public/favicon.ico","hash":"8ede8a7e8edefbd78bb978d781a502f696c32be9","modified":1703146961672},{"_id":"public/images/logo.svg","hash":"1b7a73d948e593dcec7549d63e5ac60ad6db6a8f","modified":1703146961672},{"_id":"public/css/highlight.css","hash":"58217c19313bd9b12b768a4fcd09e66a980fea2c","modified":1703146961672},{"_id":"public/css/main.css","hash":"491b1f7d6819c342ff280ea1e7e80c6d545670fc","modified":1703146961672},{"_id":"public/js/main.js","hash":"c06a89f631ac37cc3acde2ce0979f6ebf6f6e6d6","modified":1703146961672},{"_id":"public/lib/clipboard.min.js","hash":"f48e9bfeca83e5057cc751e8c44fc07e9d976c06","modified":1703146961672},{"_id":"public/lib/fancybox/fancybox.min.css","hash":"1564bb6a6b930a61875610c05001c4f7bfe9939a","modified":1703146961672},{"_id":"public/lib/nprogress/nprogress.css","hash":"d8a2825a6fb35a3eeb3743e09184c18be9dbfcdc","modified":1703146961672},{"_id":"public/lib/nprogress/nprogress.js","hash":"e328b676f7e93bd78cd5d31cd0899cba2a423097","modified":1703146961672},{"_id":"public/lib/tocbot/tocbot.min.js","hash":"4f1b40a6818fe6e955f2ce7de3b79aec4dcd0a7c","modified":1703146961672},{"_id":"public/lib/tocbot/tocbot.min.css","hash":"0029d92ce7f1a59c7c57feb6d5f80649daba3db8","modified":1703146961672},{"_id":"public/lib/iconify-icon.min.js","hash":"7526cf2b54b9e657f377083129cc00c5aa4dc110","modified":1703146961672},{"_id":"public/lib/jquery.min.js","hash":"69bb69e25ca7d5ef0935317584e6153f3fd9a88c","modified":1703146961672},{"_id":"public/lib/fancybox/fancybox.umd.min.js","hash":"e766e468e4f017b51a643648f6b4f05187c41d6b","modified":1703146961672},{"_id":"public/images/avatar.jpg","hash":"0eb2de59901a55c792898ddf5d1da3ed96f2e2d8","modified":1703146961672},{"_id":"public/img/avatar.jpg","hash":"0eb2de59901a55c792898ddf5d1da3ed96f2e2d8","modified":1703146961672}],"Category":[{"name":"javascript","_id":"clqexq6bj0004qn7v0fevhyad"},{"name":"ThreeJs","_id":"clqexq6bn000gqn7vccjuat95"},{"name":"css","_id":"clqexq6bo000oqn7v9u36e5mx"},{"name":"react","parent":"clqexq6bj0004qn7v0fevhyad","_id":"clqexq6bp000wqn7v15h0ewp3"},{"name":"vue","parent":"clqexq6bj0004qn7v0fevhyad","_id":"clqexq6br001bqn7v1lw5bqhn"},{"name":"less","_id":"clqexq6bs001sqn7veolwe94v"}],"Data":[],"Page":[{"title":"Categories","date":"2023-12-23T06:00:01.000Z","layout":"category","_content":"\n","source":"categories/index.md","raw":"---\ntitle: 'Categories'\ndate: \"2023-12-23 14:00:01\"\nlayout: category\n---\n\n","updated":"2023-12-21T08:22:25.283Z","path":"categories/index.html","comments":1,"_id":"clqexq6bf0000qn7vhpte78pv","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tag","date":"2023-12-23T06:00:01.000Z","layout":"tag","_content":"\n","source":"tags/index.md","raw":"---\ntitle: 'tag'\ndate: \"2023-12-23 14:00:01\"\nlayout: tag\n---\n\n","updated":"2023-12-21T08:22:38.085Z","path":"tags/index.html","comments":1,"_id":"clqexq6bi0002qn7v0xja1e3q","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"JS new 运算符的使用和原理剖析","date":"2020-11-04T15:48:23.000Z","_content":"\n# JS new 运算符的使用和原理剖析\n\n\n\n> new 运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象类型之一\n\n\n\n<!-- more -->\n\n### new的基本使用\n\n\n\n```javascript\nlet fn = function(hobby) {\n\t this.name = 'lili'\n   this.age = 22\n   console.log('hobby is:', hobby)\n}\n\nfn.prototype.say = function() {\n  console.log('hello')\n}\n\nlet person = new fn('guitar')\t// hobby is: guitar\n\nconsole.log(person.name);\t// lili\nconsole.log(person.age);\t// 22\n\nperson.say()\t// hello\n```\n\n\n\n\n\n#### 当构造函数 `fn` 有返回值时\n\n\n\n```javascript\nlet fn = function() {\n\t this.name = 'lili'\n   this.age = 22\n   return {\n     sex: 'man',\n     city: 'cq'\n   }\n}\n\nlet person = new fn()\t\n\nconsole.log(person.name);\t// undefined\nconsole.log(person.age);\t// undefined\nconsole.log(person.sex);\t// man\nconsole.log(person.city);\t// cq\n```\n\n\n\n\n\n#### 当构造函数 `fn` 返回值**不是对象**或是null时\n\n\n\n```javascript\nlet fn = function() {\n\t this.name = 'lili'\n   this.age = 22\n   return 'test'\n}\n\nlet person = new fn()\n\nconsole.log(person.name);\t// lili\nconsole.log(person.age);\t// 22\n\n// 返回null\nlet fn = function() {\n\t this.name = 'lili'\n   this.age = 22\n   return null\n}\n\nlet person = new fn()\n\nconsole.log(person.name);\t// lili\nconsole.log(person.age);\t// 22\n```\n\n\n\n> 从以上 new 的使用中我们可以总结如下几点：\n>\n> 1. new出的实例将会继承构造函数的属性和构造函数原型上的属性\n> 2. 将会返回一个新对象\n> 3. 如果构造函数返回新的对象，那么在实例中只能访问返回的新对象\n> 4. 如果构造函数返回基本类型或者null，那么实例可以访问构造函数中的属性\n\n\n\n针对如上几点，我们开始实现 new\n\n\n\n### new 的实现\n\n\n\n```javascript\nlet fn = function(hobby) {\n\t this.name = 'lili'\n   this.age = 22\n   console.log('hobby is:', hobby)\n}\n\nfn.prototype.say = function() {\n  console.log('hello')\n}\n\nlet objFactory = function() {\n  let obj = new Object()\n  Constructor = [].shift.call(arguments);\t// 取出第一个参数(构造函数)\n  obj.__proto__ = Constructor.prototype;\t// 将构造函数原型指向实例对象原型\n  let res = Constructor.apply(obj, arguments)\t// 将构造函数 this 指向实例对象，以便实例对象可以访问构造函数自身的属性\n  return typeof res === 'object' ? res || obj : obj // 如果构造函数返回的是对象(非null), 则返回该对象，否则返回obj\n}\n\n\nlet newFn = objFactory(fn, 'guitar') // hobby is: guitar\nconsole.log(newFn.name); // lili\nconsole.log(newFn.age); // 22\nnewFn.say(); // hello\n\n```\n\n\n\n","source":"_posts/JS new 运算符的使用和原理剖析.md","raw":"---\ntitle: JS new 运算符的使用和原理剖析\ndate: 2020-11-04 23:48:23\ncategories:\n - javascript\ntags:\n - javascript\n---\n\n# JS new 运算符的使用和原理剖析\n\n\n\n> new 运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象类型之一\n\n\n\n<!-- more -->\n\n### new的基本使用\n\n\n\n```javascript\nlet fn = function(hobby) {\n\t this.name = 'lili'\n   this.age = 22\n   console.log('hobby is:', hobby)\n}\n\nfn.prototype.say = function() {\n  console.log('hello')\n}\n\nlet person = new fn('guitar')\t// hobby is: guitar\n\nconsole.log(person.name);\t// lili\nconsole.log(person.age);\t// 22\n\nperson.say()\t// hello\n```\n\n\n\n\n\n#### 当构造函数 `fn` 有返回值时\n\n\n\n```javascript\nlet fn = function() {\n\t this.name = 'lili'\n   this.age = 22\n   return {\n     sex: 'man',\n     city: 'cq'\n   }\n}\n\nlet person = new fn()\t\n\nconsole.log(person.name);\t// undefined\nconsole.log(person.age);\t// undefined\nconsole.log(person.sex);\t// man\nconsole.log(person.city);\t// cq\n```\n\n\n\n\n\n#### 当构造函数 `fn` 返回值**不是对象**或是null时\n\n\n\n```javascript\nlet fn = function() {\n\t this.name = 'lili'\n   this.age = 22\n   return 'test'\n}\n\nlet person = new fn()\n\nconsole.log(person.name);\t// lili\nconsole.log(person.age);\t// 22\n\n// 返回null\nlet fn = function() {\n\t this.name = 'lili'\n   this.age = 22\n   return null\n}\n\nlet person = new fn()\n\nconsole.log(person.name);\t// lili\nconsole.log(person.age);\t// 22\n```\n\n\n\n> 从以上 new 的使用中我们可以总结如下几点：\n>\n> 1. new出的实例将会继承构造函数的属性和构造函数原型上的属性\n> 2. 将会返回一个新对象\n> 3. 如果构造函数返回新的对象，那么在实例中只能访问返回的新对象\n> 4. 如果构造函数返回基本类型或者null，那么实例可以访问构造函数中的属性\n\n\n\n针对如上几点，我们开始实现 new\n\n\n\n### new 的实现\n\n\n\n```javascript\nlet fn = function(hobby) {\n\t this.name = 'lili'\n   this.age = 22\n   console.log('hobby is:', hobby)\n}\n\nfn.prototype.say = function() {\n  console.log('hello')\n}\n\nlet objFactory = function() {\n  let obj = new Object()\n  Constructor = [].shift.call(arguments);\t// 取出第一个参数(构造函数)\n  obj.__proto__ = Constructor.prototype;\t// 将构造函数原型指向实例对象原型\n  let res = Constructor.apply(obj, arguments)\t// 将构造函数 this 指向实例对象，以便实例对象可以访问构造函数自身的属性\n  return typeof res === 'object' ? res || obj : obj // 如果构造函数返回的是对象(非null), 则返回该对象，否则返回obj\n}\n\n\nlet newFn = objFactory(fn, 'guitar') // hobby is: guitar\nconsole.log(newFn.name); // lili\nconsole.log(newFn.age); // 22\nnewFn.say(); // hello\n\n```\n\n\n\n","slug":"JS new 运算符的使用和原理剖析","published":1,"updated":"2021-03-30T06:56:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqexq6bh0001qn7vd3ih052x","content":"<h1 id=\"JS-new-运算符的使用和原理剖析\"><a href=\"#JS-new-运算符的使用和原理剖析\" class=\"headerlink\" title=\"JS new 运算符的使用和原理剖析\"></a>JS new 运算符的使用和原理剖析</h1><blockquote>\n<p>new 运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象类型之一</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h3 id=\"new的基本使用\"><a href=\"#new的基本使用\" class=\"headerlink\" title=\"new的基本使用\"></a>new的基本使用</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"keyword\">function</span>(<span class=\"params\">hobby</span>) &#123;</span><br><span class=\"line\">\t <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&#x27;lili&#x27;</span></span><br><span class=\"line\">   <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = <span class=\"number\">22</span></span><br><span class=\"line\">   <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hobby is:&#x27;</span>, hobby)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">say</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hello&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> person = <span class=\"keyword\">new</span> <span class=\"title function_\">fn</span>(<span class=\"string\">&#x27;guitar&#x27;</span>)\t<span class=\"comment\">// hobby is: guitar</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(person.<span class=\"property\">name</span>);\t<span class=\"comment\">// lili</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(person.<span class=\"property\">age</span>);\t<span class=\"comment\">// 22</span></span><br><span class=\"line\"></span><br><span class=\"line\">person.<span class=\"title function_\">say</span>()\t<span class=\"comment\">// hello</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"当构造函数-fn-有返回值时\"><a href=\"#当构造函数-fn-有返回值时\" class=\"headerlink\" title=\"当构造函数 fn 有返回值时\"></a>当构造函数 <code>fn</code> 有返回值时</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&#x27;lili&#x27;</span></span><br><span class=\"line\">   <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = <span class=\"number\">22</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">     <span class=\"attr\">sex</span>: <span class=\"string\">&#x27;man&#x27;</span>,</span><br><span class=\"line\">     <span class=\"attr\">city</span>: <span class=\"string\">&#x27;cq&#x27;</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> person = <span class=\"keyword\">new</span> <span class=\"title function_\">fn</span>()\t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(person.<span class=\"property\">name</span>);\t<span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(person.<span class=\"property\">age</span>);\t<span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(person.<span class=\"property\">sex</span>);\t<span class=\"comment\">// man</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(person.<span class=\"property\">city</span>);\t<span class=\"comment\">// cq</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"当构造函数-fn-返回值不是对象或是null时\"><a href=\"#当构造函数-fn-返回值不是对象或是null时\" class=\"headerlink\" title=\"当构造函数 fn 返回值不是对象或是null时\"></a>当构造函数 <code>fn</code> 返回值<strong>不是对象</strong>或是null时</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&#x27;lili&#x27;</span></span><br><span class=\"line\">   <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = <span class=\"number\">22</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"string\">&#x27;test&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> person = <span class=\"keyword\">new</span> <span class=\"title function_\">fn</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(person.<span class=\"property\">name</span>);\t<span class=\"comment\">// lili</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(person.<span class=\"property\">age</span>);\t<span class=\"comment\">// 22</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回null</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&#x27;lili&#x27;</span></span><br><span class=\"line\">   <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = <span class=\"number\">22</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> person = <span class=\"keyword\">new</span> <span class=\"title function_\">fn</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(person.<span class=\"property\">name</span>);\t<span class=\"comment\">// lili</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(person.<span class=\"property\">age</span>);\t<span class=\"comment\">// 22</span></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>从以上 new 的使用中我们可以总结如下几点：</p>\n<ol>\n<li>new出的实例将会继承构造函数的属性和构造函数原型上的属性</li>\n<li>将会返回一个新对象</li>\n<li>如果构造函数返回新的对象，那么在实例中只能访问返回的新对象</li>\n<li>如果构造函数返回基本类型或者null，那么实例可以访问构造函数中的属性</li>\n</ol>\n</blockquote>\n<p>针对如上几点，我们开始实现 new</p>\n<h3 id=\"new-的实现\"><a href=\"#new-的实现\" class=\"headerlink\" title=\"new 的实现\"></a>new 的实现</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"keyword\">function</span>(<span class=\"params\">hobby</span>) &#123;</span><br><span class=\"line\">\t <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&#x27;lili&#x27;</span></span><br><span class=\"line\">   <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = <span class=\"number\">22</span></span><br><span class=\"line\">   <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hobby is:&#x27;</span>, hobby)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">say</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hello&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> objFactory = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> obj = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>()</span><br><span class=\"line\">  <span class=\"title class_\">Constructor</span> = [].<span class=\"property\">shift</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>);\t<span class=\"comment\">// 取出第一个参数(构造函数)</span></span><br><span class=\"line\">  obj.<span class=\"property\">__proto__</span> = <span class=\"title class_\">Constructor</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>;\t<span class=\"comment\">// 将构造函数原型指向实例对象原型</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = <span class=\"title class_\">Constructor</span>.<span class=\"title function_\">apply</span>(obj, <span class=\"variable language_\">arguments</span>)\t<span class=\"comment\">// 将构造函数 this 指向实例对象，以便实例对象可以访问构造函数自身的属性</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> res === <span class=\"string\">&#x27;object&#x27;</span> ? res || obj : obj <span class=\"comment\">// 如果构造函数返回的是对象(非null), 则返回该对象，否则返回obj</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> newFn = <span class=\"title function_\">objFactory</span>(fn, <span class=\"string\">&#x27;guitar&#x27;</span>) <span class=\"comment\">// hobby is: guitar</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newFn.<span class=\"property\">name</span>); <span class=\"comment\">// lili</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newFn.<span class=\"property\">age</span>); <span class=\"comment\">// 22</span></span><br><span class=\"line\">newFn.<span class=\"title function_\">say</span>(); <span class=\"comment\">// hello</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"<h1 id=\"JS-new-运算符的使用和原理剖析\"><a href=\"#JS-new-运算符的使用和原理剖析\" class=\"headerlink\" title=\"JS new 运算符的使用和原理剖析\"></a>JS new 运算符的使用和原理剖析</h1><blockquote>\n<p>new 运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象类型之一</p>\n</blockquote>","more":"<h3 id=\"new的基本使用\"><a href=\"#new的基本使用\" class=\"headerlink\" title=\"new的基本使用\"></a>new的基本使用</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"keyword\">function</span>(<span class=\"params\">hobby</span>) &#123;</span><br><span class=\"line\">\t <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&#x27;lili&#x27;</span></span><br><span class=\"line\">   <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = <span class=\"number\">22</span></span><br><span class=\"line\">   <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hobby is:&#x27;</span>, hobby)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">say</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hello&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> person = <span class=\"keyword\">new</span> <span class=\"title function_\">fn</span>(<span class=\"string\">&#x27;guitar&#x27;</span>)\t<span class=\"comment\">// hobby is: guitar</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(person.<span class=\"property\">name</span>);\t<span class=\"comment\">// lili</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(person.<span class=\"property\">age</span>);\t<span class=\"comment\">// 22</span></span><br><span class=\"line\"></span><br><span class=\"line\">person.<span class=\"title function_\">say</span>()\t<span class=\"comment\">// hello</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"当构造函数-fn-有返回值时\"><a href=\"#当构造函数-fn-有返回值时\" class=\"headerlink\" title=\"当构造函数 fn 有返回值时\"></a>当构造函数 <code>fn</code> 有返回值时</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&#x27;lili&#x27;</span></span><br><span class=\"line\">   <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = <span class=\"number\">22</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">     <span class=\"attr\">sex</span>: <span class=\"string\">&#x27;man&#x27;</span>,</span><br><span class=\"line\">     <span class=\"attr\">city</span>: <span class=\"string\">&#x27;cq&#x27;</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> person = <span class=\"keyword\">new</span> <span class=\"title function_\">fn</span>()\t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(person.<span class=\"property\">name</span>);\t<span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(person.<span class=\"property\">age</span>);\t<span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(person.<span class=\"property\">sex</span>);\t<span class=\"comment\">// man</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(person.<span class=\"property\">city</span>);\t<span class=\"comment\">// cq</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"当构造函数-fn-返回值不是对象或是null时\"><a href=\"#当构造函数-fn-返回值不是对象或是null时\" class=\"headerlink\" title=\"当构造函数 fn 返回值不是对象或是null时\"></a>当构造函数 <code>fn</code> 返回值<strong>不是对象</strong>或是null时</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&#x27;lili&#x27;</span></span><br><span class=\"line\">   <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = <span class=\"number\">22</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"string\">&#x27;test&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> person = <span class=\"keyword\">new</span> <span class=\"title function_\">fn</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(person.<span class=\"property\">name</span>);\t<span class=\"comment\">// lili</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(person.<span class=\"property\">age</span>);\t<span class=\"comment\">// 22</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回null</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&#x27;lili&#x27;</span></span><br><span class=\"line\">   <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = <span class=\"number\">22</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> person = <span class=\"keyword\">new</span> <span class=\"title function_\">fn</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(person.<span class=\"property\">name</span>);\t<span class=\"comment\">// lili</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(person.<span class=\"property\">age</span>);\t<span class=\"comment\">// 22</span></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>从以上 new 的使用中我们可以总结如下几点：</p>\n<ol>\n<li>new出的实例将会继承构造函数的属性和构造函数原型上的属性</li>\n<li>将会返回一个新对象</li>\n<li>如果构造函数返回新的对象，那么在实例中只能访问返回的新对象</li>\n<li>如果构造函数返回基本类型或者null，那么实例可以访问构造函数中的属性</li>\n</ol>\n</blockquote>\n<p>针对如上几点，我们开始实现 new</p>\n<h3 id=\"new-的实现\"><a href=\"#new-的实现\" class=\"headerlink\" title=\"new 的实现\"></a>new 的实现</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"keyword\">function</span>(<span class=\"params\">hobby</span>) &#123;</span><br><span class=\"line\">\t <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&#x27;lili&#x27;</span></span><br><span class=\"line\">   <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = <span class=\"number\">22</span></span><br><span class=\"line\">   <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hobby is:&#x27;</span>, hobby)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">say</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hello&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> objFactory = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> obj = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>()</span><br><span class=\"line\">  <span class=\"title class_\">Constructor</span> = [].<span class=\"property\">shift</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>);\t<span class=\"comment\">// 取出第一个参数(构造函数)</span></span><br><span class=\"line\">  obj.<span class=\"property\">__proto__</span> = <span class=\"title class_\">Constructor</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>;\t<span class=\"comment\">// 将构造函数原型指向实例对象原型</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = <span class=\"title class_\">Constructor</span>.<span class=\"title function_\">apply</span>(obj, <span class=\"variable language_\">arguments</span>)\t<span class=\"comment\">// 将构造函数 this 指向实例对象，以便实例对象可以访问构造函数自身的属性</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> res === <span class=\"string\">&#x27;object&#x27;</span> ? res || obj : obj <span class=\"comment\">// 如果构造函数返回的是对象(非null), 则返回该对象，否则返回obj</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> newFn = <span class=\"title function_\">objFactory</span>(fn, <span class=\"string\">&#x27;guitar&#x27;</span>) <span class=\"comment\">// hobby is: guitar</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newFn.<span class=\"property\">name</span>); <span class=\"comment\">// lili</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newFn.<span class=\"property\">age</span>); <span class=\"comment\">// 22</span></span><br><span class=\"line\">newFn.<span class=\"title function_\">say</span>(); <span class=\"comment\">// hello</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"Nuxt i18n国际化","date":"2019-03-31T14:17:15.000Z","_content":"\n\n\n# Nuxt.js集成国际化\n\n\n\n##  前言\n\n​\t公司官网需求要加上国际化， 之前官网使用的是vue的 nuxt框架，然后generate生成的静态页面，看了一下，nuxt官方有集成i18n的示例就跟着弄了一下，期间也踩了一些坑。\n\n\n\n<!-- more -->\n\n## 准备工作\n\n### 安装\n\n​\t<code>npm install vue-i18n --save</code>\n\n\n\n### 在nuxt.config.js 中配置\n\n​\t\n\n```javascript\n  plugins: ['~/plugins/i18n.js'],\n\n  router: {\n    middleware: ['i18n']\n  }\n```\n\n### 在plugins文件夹下新建i18n.js\n\n​\t\n\n```javascript\nimport Vue from 'vue'\nimport VueI18n from 'vue-i18n'\n\nVue.use(VueI18n)\n\nexport default ({ app, store }) => {\n  // Set i18n instance on app\n  // This way we can use it in middleware and pages asyncData/fetch\n  app.i18n = new VueI18n({\n    locale: store.state.locale,\n    fallbackLocale: 'cn',\n    messages: {\n      en: require('~/locales/en.json'),\n      cn: require('~/locales/cn.json')\n    }\n  })\n\n  app.i18n.path = link => {\n    if (app.i18n.locale === app.i18n.fallbackLocale) {\n      return `/${link}`\n    }\n\n    return `/${app.i18n.locale}/${link}`\n  }\n}\n\n```\n\n### 在middleware文件夹下新建 i18n.js\n\n​\t \n\n```javascript\nexport default function ({ isHMR, app, store, route, params, error, redirect }) {\n  const defaultLocale = app.i18n.fallbackLocale\n  // If middleware is called from hot module replacement, ignore it\n  if (isHMR) return\n  // Get locale from params\n  // const locale = params.lang || defaultLocale\n  const locale = params.lang || defaultLocale\n  if (store.state.locales.indexOf(locale) === -1) {\n    return error({ message: 'This page could not be found.', statusCode: 404 })\n  }\n  // Set locale\n  store.commit('SET_LANG', locale)\n  app.i18n.locale = store.state.locale\n  // If route is /<defaultLocale>/... -> redirect to /...\n  if (locale === defaultLocale && route.fullPath.indexOf('/' + defaultLocale) === 0) {\n    const toReplace = '^/' + defaultLocale + (route.fullPath.indexOf('/' + defaultLocale + '/') === 0 ? '/' : '')\n    const re = new RegExp(toReplace)\n    return redirect(\n      route.fullPath.replace(re, '/')\n    )\n  }\n}\n\n```\n\n## 创建本地语言库\n\n​\t在根目录下新建文件夹locales， 然后在文件夹下添加你要翻译的语言的json文件 。\n\n### 在store文件夹下新建index.js\n\n​\t\n\n```javascript\nexport const state = () => ({\n  locales: ['en', 'cn'],\n  locale: 'cn'\n})\n\nexport const mutations = {\n  SET_LANG(state, locale) {\n    if (state.locales.indexOf(locale) !== -1) {\n      state.locale = locale\n    }\n  }\n}\n\n```\n\n### 踩坑……\n\n​\t好了，照着官方把该加的都加了，这下就能实现国际化的切换了吧。 然后参考了几篇文章， 通过 <code>**this**.$i18n.locale = Langname</code> 或是\n\n <code>this.$store.commit('SET_LANG', lang)</code> 切换语言。 结果要不就是404， 要不就是一个页面切换了，然后换个页面，也就是切换了路由又变回原来的语言了。。。   \n\n\n\n​\t结果找了好久发现是路由的问题，主要是middleware中的这一段代码:\n\n```javascript\nconst locale = params.lang || defaultLocale\n  if (store.state.locales.indexOf(locale) === -1) {\n    return error({ message: 'This page could not be found.', statusCode: 404 })\n  }\n  // Set locale\n  store.commit('SET_LANG', locale)\n  app.i18n.locale = store.state.locale\n```\n\n每次我们切换页面的时候都会调用这个中间件，然后会去判断路由中的params 如果lang参数有值就将语言设置为对应的值。\n\n​\t 比如我的地址是  \"http://localhost/zn/\" 那么中间件就会将当前的lang设置为zn  如果就是\"http://localhost/\" 就会设置为默认的值.\n\n​\t所以之前我们手动设置了store中的值，切换了路由就会变回原样是因为每次中间件都会把locale设置成默认值(因为我们路由中没有带参数)。\n\n​\t可是当我们路由带上参数后切出现找不到页面的情况，这是因为当前路径下，比如 \"http://localhost/zn/\" 找不到我们的页面。 这是我们就要用到nuxt提供给我们的一个 **动态路由**的功能。 \n\n​\t[动态路由](https://zh.nuxtjs.org/guide/routing#%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1)根据官方可如下配置，因为nuxt是根据page下目录生成路由，可如下组织目录:\n\n![A8CB811A-9DC9-4BB8-8C19-9EFB4ADDA033](https://ws4.sinaimg.cn/large/006tKfTcgy1g1mdn9yi7fj30e40n6jsd.jpg)\n\n_lang 就是动态路由下的参数项，这样不管是带不带参数都能找到页面了。","source":"_posts/Nuxt.js  i18n国际化.md","raw":"---\ntitle: Nuxt i18n国际化\ndate: 2019-03-31 22:17:15\ncategories:\n - javascript\ntags:\n - i18n\n - nuxt\n\n---\n\n\n\n# Nuxt.js集成国际化\n\n\n\n##  前言\n\n​\t公司官网需求要加上国际化， 之前官网使用的是vue的 nuxt框架，然后generate生成的静态页面，看了一下，nuxt官方有集成i18n的示例就跟着弄了一下，期间也踩了一些坑。\n\n\n\n<!-- more -->\n\n## 准备工作\n\n### 安装\n\n​\t<code>npm install vue-i18n --save</code>\n\n\n\n### 在nuxt.config.js 中配置\n\n​\t\n\n```javascript\n  plugins: ['~/plugins/i18n.js'],\n\n  router: {\n    middleware: ['i18n']\n  }\n```\n\n### 在plugins文件夹下新建i18n.js\n\n​\t\n\n```javascript\nimport Vue from 'vue'\nimport VueI18n from 'vue-i18n'\n\nVue.use(VueI18n)\n\nexport default ({ app, store }) => {\n  // Set i18n instance on app\n  // This way we can use it in middleware and pages asyncData/fetch\n  app.i18n = new VueI18n({\n    locale: store.state.locale,\n    fallbackLocale: 'cn',\n    messages: {\n      en: require('~/locales/en.json'),\n      cn: require('~/locales/cn.json')\n    }\n  })\n\n  app.i18n.path = link => {\n    if (app.i18n.locale === app.i18n.fallbackLocale) {\n      return `/${link}`\n    }\n\n    return `/${app.i18n.locale}/${link}`\n  }\n}\n\n```\n\n### 在middleware文件夹下新建 i18n.js\n\n​\t \n\n```javascript\nexport default function ({ isHMR, app, store, route, params, error, redirect }) {\n  const defaultLocale = app.i18n.fallbackLocale\n  // If middleware is called from hot module replacement, ignore it\n  if (isHMR) return\n  // Get locale from params\n  // const locale = params.lang || defaultLocale\n  const locale = params.lang || defaultLocale\n  if (store.state.locales.indexOf(locale) === -1) {\n    return error({ message: 'This page could not be found.', statusCode: 404 })\n  }\n  // Set locale\n  store.commit('SET_LANG', locale)\n  app.i18n.locale = store.state.locale\n  // If route is /<defaultLocale>/... -> redirect to /...\n  if (locale === defaultLocale && route.fullPath.indexOf('/' + defaultLocale) === 0) {\n    const toReplace = '^/' + defaultLocale + (route.fullPath.indexOf('/' + defaultLocale + '/') === 0 ? '/' : '')\n    const re = new RegExp(toReplace)\n    return redirect(\n      route.fullPath.replace(re, '/')\n    )\n  }\n}\n\n```\n\n## 创建本地语言库\n\n​\t在根目录下新建文件夹locales， 然后在文件夹下添加你要翻译的语言的json文件 。\n\n### 在store文件夹下新建index.js\n\n​\t\n\n```javascript\nexport const state = () => ({\n  locales: ['en', 'cn'],\n  locale: 'cn'\n})\n\nexport const mutations = {\n  SET_LANG(state, locale) {\n    if (state.locales.indexOf(locale) !== -1) {\n      state.locale = locale\n    }\n  }\n}\n\n```\n\n### 踩坑……\n\n​\t好了，照着官方把该加的都加了，这下就能实现国际化的切换了吧。 然后参考了几篇文章， 通过 <code>**this**.$i18n.locale = Langname</code> 或是\n\n <code>this.$store.commit('SET_LANG', lang)</code> 切换语言。 结果要不就是404， 要不就是一个页面切换了，然后换个页面，也就是切换了路由又变回原来的语言了。。。   \n\n\n\n​\t结果找了好久发现是路由的问题，主要是middleware中的这一段代码:\n\n```javascript\nconst locale = params.lang || defaultLocale\n  if (store.state.locales.indexOf(locale) === -1) {\n    return error({ message: 'This page could not be found.', statusCode: 404 })\n  }\n  // Set locale\n  store.commit('SET_LANG', locale)\n  app.i18n.locale = store.state.locale\n```\n\n每次我们切换页面的时候都会调用这个中间件，然后会去判断路由中的params 如果lang参数有值就将语言设置为对应的值。\n\n​\t 比如我的地址是  \"http://localhost/zn/\" 那么中间件就会将当前的lang设置为zn  如果就是\"http://localhost/\" 就会设置为默认的值.\n\n​\t所以之前我们手动设置了store中的值，切换了路由就会变回原样是因为每次中间件都会把locale设置成默认值(因为我们路由中没有带参数)。\n\n​\t可是当我们路由带上参数后切出现找不到页面的情况，这是因为当前路径下，比如 \"http://localhost/zn/\" 找不到我们的页面。 这是我们就要用到nuxt提供给我们的一个 **动态路由**的功能。 \n\n​\t[动态路由](https://zh.nuxtjs.org/guide/routing#%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1)根据官方可如下配置，因为nuxt是根据page下目录生成路由，可如下组织目录:\n\n![A8CB811A-9DC9-4BB8-8C19-9EFB4ADDA033](https://ws4.sinaimg.cn/large/006tKfTcgy1g1mdn9yi7fj30e40n6jsd.jpg)\n\n_lang 就是动态路由下的参数项，这样不管是带不带参数都能找到页面了。","slug":"Nuxt.js  i18n国际化","published":1,"updated":"2019-03-31T15:08:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqexq6bi0003qn7vdacr2eb0","content":"<h1 id=\"Nuxt-js集成国际化\"><a href=\"#Nuxt-js集成国际化\" class=\"headerlink\" title=\"Nuxt.js集成国际化\"></a>Nuxt.js集成国际化</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>​\t公司官网需求要加上国际化， 之前官网使用的是vue的 nuxt框架，然后generate生成的静态页面，看了一下，nuxt官方有集成i18n的示例就跟着弄了一下，期间也踩了一些坑。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>​\t<code>npm install vue-i18n --save</code></p>\n<h3 id=\"在nuxt-config-js-中配置\"><a href=\"#在nuxt-config-js-中配置\" class=\"headerlink\" title=\"在nuxt.config.js 中配置\"></a>在nuxt.config.js 中配置</h3><p>​\t</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">plugins</span>: [<span class=\"string\">&#x27;~/plugins/i18n.js&#x27;</span>],</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">router</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">middleware</span>: [<span class=\"string\">&#x27;i18n&#x27;</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在plugins文件夹下新建i18n-js\"><a href=\"#在plugins文件夹下新建i18n-js\" class=\"headerlink\" title=\"在plugins文件夹下新建i18n.js\"></a>在plugins文件夹下新建i18n.js</h3><p>​\t</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Vue</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">VueI18</span>n <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue-i18n&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"title function_\">use</span>(<span class=\"title class_\">VueI18</span>n)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> (&#123; app, store &#125;) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Set i18n instance on app</span></span><br><span class=\"line\">  <span class=\"comment\">// This way we can use it in middleware and pages asyncData/fetch</span></span><br><span class=\"line\">  app.<span class=\"property\">i18n</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">VueI18</span>n(&#123;</span><br><span class=\"line\">    <span class=\"attr\">locale</span>: store.<span class=\"property\">state</span>.<span class=\"property\">locale</span>,</span><br><span class=\"line\">    <span class=\"attr\">fallbackLocale</span>: <span class=\"string\">&#x27;cn&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">messages</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">en</span>: <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;~/locales/en.json&#x27;</span>),</span><br><span class=\"line\">      <span class=\"attr\">cn</span>: <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;~/locales/cn.json&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  app.<span class=\"property\">i18n</span>.<span class=\"property\">path</span> = <span class=\"function\"><span class=\"params\">link</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (app.<span class=\"property\">i18n</span>.<span class=\"property\">locale</span> === app.<span class=\"property\">i18n</span>.<span class=\"property\">fallbackLocale</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">`/<span class=\"subst\">$&#123;link&#125;</span>`</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`/<span class=\"subst\">$&#123;app.i18n.locale&#125;</span>/<span class=\"subst\">$&#123;link&#125;</span>`</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在middleware文件夹下新建-i18n-js\"><a href=\"#在middleware文件夹下新建-i18n-js\" class=\"headerlink\" title=\"在middleware文件夹下新建 i18n.js\"></a>在middleware文件夹下新建 i18n.js</h3><p>​\t </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> (<span class=\"params\">&#123; isHMR, app, store, route, params, error, redirect &#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> defaultLocale = app.<span class=\"property\">i18n</span>.<span class=\"property\">fallbackLocale</span></span><br><span class=\"line\">  <span class=\"comment\">// If middleware is called from hot module replacement, ignore it</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isHMR) <span class=\"keyword\">return</span></span><br><span class=\"line\">  <span class=\"comment\">// Get locale from params</span></span><br><span class=\"line\">  <span class=\"comment\">// const locale = params.lang || defaultLocale</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> locale = params.<span class=\"property\">lang</span> || defaultLocale</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (store.<span class=\"property\">state</span>.<span class=\"property\">locales</span>.<span class=\"title function_\">indexOf</span>(locale) === -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">error</span>(&#123; <span class=\"attr\">message</span>: <span class=\"string\">&#x27;This page could not be found.&#x27;</span>, <span class=\"attr\">statusCode</span>: <span class=\"number\">404</span> &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// Set locale</span></span><br><span class=\"line\">  store.<span class=\"title function_\">commit</span>(<span class=\"string\">&#x27;SET_LANG&#x27;</span>, locale)</span><br><span class=\"line\">  app.<span class=\"property\">i18n</span>.<span class=\"property\">locale</span> = store.<span class=\"property\">state</span>.<span class=\"property\">locale</span></span><br><span class=\"line\">  <span class=\"comment\">// If route is /&lt;defaultLocale&gt;/... -&gt; redirect to /...</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (locale === defaultLocale &amp;&amp; route.<span class=\"property\">fullPath</span>.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;/&#x27;</span> + defaultLocale) === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> toReplace = <span class=\"string\">&#x27;^/&#x27;</span> + defaultLocale + (route.<span class=\"property\">fullPath</span>.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;/&#x27;</span> + defaultLocale + <span class=\"string\">&#x27;/&#x27;</span>) === <span class=\"number\">0</span> ? <span class=\"string\">&#x27;/&#x27;</span> : <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> re = <span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(toReplace)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">redirect</span>(</span><br><span class=\"line\">      route.<span class=\"property\">fullPath</span>.<span class=\"title function_\">replace</span>(re, <span class=\"string\">&#x27;/&#x27;</span>)</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建本地语言库\"><a href=\"#创建本地语言库\" class=\"headerlink\" title=\"创建本地语言库\"></a>创建本地语言库</h2><p>​\t在根目录下新建文件夹locales， 然后在文件夹下添加你要翻译的语言的json文件 。</p>\n<h3 id=\"在store文件夹下新建index-js\"><a href=\"#在store文件夹下新建index-js\" class=\"headerlink\" title=\"在store文件夹下新建index.js\"></a>在store文件夹下新建index.js</h3><p>​\t</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">state</span> = (<span class=\"params\"></span>) =&gt; (&#123;</span><br><span class=\"line\">  <span class=\"attr\">locales</span>: [<span class=\"string\">&#x27;en&#x27;</span>, <span class=\"string\">&#x27;cn&#x27;</span>],</span><br><span class=\"line\">  <span class=\"attr\">locale</span>: <span class=\"string\">&#x27;cn&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> mutations = &#123;</span><br><span class=\"line\">  <span class=\"title function_\">SET_LANG</span>(<span class=\"params\">state, locale</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (state.<span class=\"property\">locales</span>.<span class=\"title function_\">indexOf</span>(locale) !== -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      state.<span class=\"property\">locale</span> = locale</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"踩坑……\"><a href=\"#踩坑……\" class=\"headerlink\" title=\"踩坑……\"></a>踩坑……</h3><p>​\t好了，照着官方把该加的都加了，这下就能实现国际化的切换了吧。 然后参考了几篇文章， 通过 <code><strong>this</strong>.$i18n.locale = Langname</code> 或是</p>\n<p> <code>this.$store.commit('SET_LANG', lang)</code> 切换语言。 结果要不就是404， 要不就是一个页面切换了，然后换个页面，也就是切换了路由又变回原来的语言了。。。   </p>\n<p>​\t结果找了好久发现是路由的问题，主要是middleware中的这一段代码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> locale = params.<span class=\"property\">lang</span> || defaultLocale</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (store.<span class=\"property\">state</span>.<span class=\"property\">locales</span>.<span class=\"title function_\">indexOf</span>(locale) === -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">error</span>(&#123; <span class=\"attr\">message</span>: <span class=\"string\">&#x27;This page could not be found.&#x27;</span>, <span class=\"attr\">statusCode</span>: <span class=\"number\">404</span> &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// Set locale</span></span><br><span class=\"line\">  store.<span class=\"title function_\">commit</span>(<span class=\"string\">&#x27;SET_LANG&#x27;</span>, locale)</span><br><span class=\"line\">  app.<span class=\"property\">i18n</span>.<span class=\"property\">locale</span> = store.<span class=\"property\">state</span>.<span class=\"property\">locale</span></span><br></pre></td></tr></table></figure>\n\n<p>每次我们切换页面的时候都会调用这个中间件，然后会去判断路由中的params 如果lang参数有值就将语言设置为对应的值。</p>\n<p>​\t 比如我的地址是  “<a href=\"http://localhost/zn/\">http://localhost/zn/</a>“ 那么中间件就会将当前的lang设置为zn  如果就是”<a href=\"http://localhost/\">http://localhost/</a>“ 就会设置为默认的值.</p>\n<p>​\t所以之前我们手动设置了store中的值，切换了路由就会变回原样是因为每次中间件都会把locale设置成默认值(因为我们路由中没有带参数)。</p>\n<p>​\t可是当我们路由带上参数后切出现找不到页面的情况，这是因为当前路径下，比如 “<a href=\"http://localhost/zn/\">http://localhost/zn/</a>“ 找不到我们的页面。 这是我们就要用到nuxt提供给我们的一个 <strong>动态路由</strong>的功能。 </p>\n<p>​\t<a href=\"https://zh.nuxtjs.org/guide/routing#%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1\">动态路由</a>根据官方可如下配置，因为nuxt是根据page下目录生成路由，可如下组织目录:</p>\n<p><img src=\"https://ws4.sinaimg.cn/large/006tKfTcgy1g1mdn9yi7fj30e40n6jsd.jpg\" alt=\"A8CB811A-9DC9-4BB8-8C19-9EFB4ADDA033\"></p>\n<p>_lang 就是动态路由下的参数项，这样不管是带不带参数都能找到页面了。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Nuxt-js集成国际化\"><a href=\"#Nuxt-js集成国际化\" class=\"headerlink\" title=\"Nuxt.js集成国际化\"></a>Nuxt.js集成国际化</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>​\t公司官网需求要加上国际化， 之前官网使用的是vue的 nuxt框架，然后generate生成的静态页面，看了一下，nuxt官方有集成i18n的示例就跟着弄了一下，期间也踩了一些坑。</p>","more":"<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>​\t<code>npm install vue-i18n --save</code></p>\n<h3 id=\"在nuxt-config-js-中配置\"><a href=\"#在nuxt-config-js-中配置\" class=\"headerlink\" title=\"在nuxt.config.js 中配置\"></a>在nuxt.config.js 中配置</h3><p>​\t</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">plugins</span>: [<span class=\"string\">&#x27;~/plugins/i18n.js&#x27;</span>],</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">router</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">middleware</span>: [<span class=\"string\">&#x27;i18n&#x27;</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在plugins文件夹下新建i18n-js\"><a href=\"#在plugins文件夹下新建i18n-js\" class=\"headerlink\" title=\"在plugins文件夹下新建i18n.js\"></a>在plugins文件夹下新建i18n.js</h3><p>​\t</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Vue</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">VueI18</span>n <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue-i18n&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"title function_\">use</span>(<span class=\"title class_\">VueI18</span>n)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> (&#123; app, store &#125;) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Set i18n instance on app</span></span><br><span class=\"line\">  <span class=\"comment\">// This way we can use it in middleware and pages asyncData/fetch</span></span><br><span class=\"line\">  app.<span class=\"property\">i18n</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">VueI18</span>n(&#123;</span><br><span class=\"line\">    <span class=\"attr\">locale</span>: store.<span class=\"property\">state</span>.<span class=\"property\">locale</span>,</span><br><span class=\"line\">    <span class=\"attr\">fallbackLocale</span>: <span class=\"string\">&#x27;cn&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">messages</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">en</span>: <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;~/locales/en.json&#x27;</span>),</span><br><span class=\"line\">      <span class=\"attr\">cn</span>: <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;~/locales/cn.json&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  app.<span class=\"property\">i18n</span>.<span class=\"property\">path</span> = <span class=\"function\"><span class=\"params\">link</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (app.<span class=\"property\">i18n</span>.<span class=\"property\">locale</span> === app.<span class=\"property\">i18n</span>.<span class=\"property\">fallbackLocale</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">`/<span class=\"subst\">$&#123;link&#125;</span>`</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`/<span class=\"subst\">$&#123;app.i18n.locale&#125;</span>/<span class=\"subst\">$&#123;link&#125;</span>`</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在middleware文件夹下新建-i18n-js\"><a href=\"#在middleware文件夹下新建-i18n-js\" class=\"headerlink\" title=\"在middleware文件夹下新建 i18n.js\"></a>在middleware文件夹下新建 i18n.js</h3><p>​\t </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> (<span class=\"params\">&#123; isHMR, app, store, route, params, error, redirect &#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> defaultLocale = app.<span class=\"property\">i18n</span>.<span class=\"property\">fallbackLocale</span></span><br><span class=\"line\">  <span class=\"comment\">// If middleware is called from hot module replacement, ignore it</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isHMR) <span class=\"keyword\">return</span></span><br><span class=\"line\">  <span class=\"comment\">// Get locale from params</span></span><br><span class=\"line\">  <span class=\"comment\">// const locale = params.lang || defaultLocale</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> locale = params.<span class=\"property\">lang</span> || defaultLocale</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (store.<span class=\"property\">state</span>.<span class=\"property\">locales</span>.<span class=\"title function_\">indexOf</span>(locale) === -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">error</span>(&#123; <span class=\"attr\">message</span>: <span class=\"string\">&#x27;This page could not be found.&#x27;</span>, <span class=\"attr\">statusCode</span>: <span class=\"number\">404</span> &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// Set locale</span></span><br><span class=\"line\">  store.<span class=\"title function_\">commit</span>(<span class=\"string\">&#x27;SET_LANG&#x27;</span>, locale)</span><br><span class=\"line\">  app.<span class=\"property\">i18n</span>.<span class=\"property\">locale</span> = store.<span class=\"property\">state</span>.<span class=\"property\">locale</span></span><br><span class=\"line\">  <span class=\"comment\">// If route is /&lt;defaultLocale&gt;/... -&gt; redirect to /...</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (locale === defaultLocale &amp;&amp; route.<span class=\"property\">fullPath</span>.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;/&#x27;</span> + defaultLocale) === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> toReplace = <span class=\"string\">&#x27;^/&#x27;</span> + defaultLocale + (route.<span class=\"property\">fullPath</span>.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;/&#x27;</span> + defaultLocale + <span class=\"string\">&#x27;/&#x27;</span>) === <span class=\"number\">0</span> ? <span class=\"string\">&#x27;/&#x27;</span> : <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> re = <span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(toReplace)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">redirect</span>(</span><br><span class=\"line\">      route.<span class=\"property\">fullPath</span>.<span class=\"title function_\">replace</span>(re, <span class=\"string\">&#x27;/&#x27;</span>)</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建本地语言库\"><a href=\"#创建本地语言库\" class=\"headerlink\" title=\"创建本地语言库\"></a>创建本地语言库</h2><p>​\t在根目录下新建文件夹locales， 然后在文件夹下添加你要翻译的语言的json文件 。</p>\n<h3 id=\"在store文件夹下新建index-js\"><a href=\"#在store文件夹下新建index-js\" class=\"headerlink\" title=\"在store文件夹下新建index.js\"></a>在store文件夹下新建index.js</h3><p>​\t</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">state</span> = (<span class=\"params\"></span>) =&gt; (&#123;</span><br><span class=\"line\">  <span class=\"attr\">locales</span>: [<span class=\"string\">&#x27;en&#x27;</span>, <span class=\"string\">&#x27;cn&#x27;</span>],</span><br><span class=\"line\">  <span class=\"attr\">locale</span>: <span class=\"string\">&#x27;cn&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> mutations = &#123;</span><br><span class=\"line\">  <span class=\"title function_\">SET_LANG</span>(<span class=\"params\">state, locale</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (state.<span class=\"property\">locales</span>.<span class=\"title function_\">indexOf</span>(locale) !== -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      state.<span class=\"property\">locale</span> = locale</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"踩坑……\"><a href=\"#踩坑……\" class=\"headerlink\" title=\"踩坑……\"></a>踩坑……</h3><p>​\t好了，照着官方把该加的都加了，这下就能实现国际化的切换了吧。 然后参考了几篇文章， 通过 <code><strong>this</strong>.$i18n.locale = Langname</code> 或是</p>\n<p> <code>this.$store.commit('SET_LANG', lang)</code> 切换语言。 结果要不就是404， 要不就是一个页面切换了，然后换个页面，也就是切换了路由又变回原来的语言了。。。   </p>\n<p>​\t结果找了好久发现是路由的问题，主要是middleware中的这一段代码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> locale = params.<span class=\"property\">lang</span> || defaultLocale</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (store.<span class=\"property\">state</span>.<span class=\"property\">locales</span>.<span class=\"title function_\">indexOf</span>(locale) === -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">error</span>(&#123; <span class=\"attr\">message</span>: <span class=\"string\">&#x27;This page could not be found.&#x27;</span>, <span class=\"attr\">statusCode</span>: <span class=\"number\">404</span> &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// Set locale</span></span><br><span class=\"line\">  store.<span class=\"title function_\">commit</span>(<span class=\"string\">&#x27;SET_LANG&#x27;</span>, locale)</span><br><span class=\"line\">  app.<span class=\"property\">i18n</span>.<span class=\"property\">locale</span> = store.<span class=\"property\">state</span>.<span class=\"property\">locale</span></span><br></pre></td></tr></table></figure>\n\n<p>每次我们切换页面的时候都会调用这个中间件，然后会去判断路由中的params 如果lang参数有值就将语言设置为对应的值。</p>\n<p>​\t 比如我的地址是  “<a href=\"http://localhost/zn/\">http://localhost/zn/</a>“ 那么中间件就会将当前的lang设置为zn  如果就是”<a href=\"http://localhost/\">http://localhost/</a>“ 就会设置为默认的值.</p>\n<p>​\t所以之前我们手动设置了store中的值，切换了路由就会变回原样是因为每次中间件都会把locale设置成默认值(因为我们路由中没有带参数)。</p>\n<p>​\t可是当我们路由带上参数后切出现找不到页面的情况，这是因为当前路径下，比如 “<a href=\"http://localhost/zn/\">http://localhost/zn/</a>“ 找不到我们的页面。 这是我们就要用到nuxt提供给我们的一个 <strong>动态路由</strong>的功能。 </p>\n<p>​\t<a href=\"https://zh.nuxtjs.org/guide/routing#%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1\">动态路由</a>根据官方可如下配置，因为nuxt是根据page下目录生成路由，可如下组织目录:</p>\n<p><img src=\"https://ws4.sinaimg.cn/large/006tKfTcgy1g1mdn9yi7fj30e40n6jsd.jpg\" alt=\"A8CB811A-9DC9-4BB8-8C19-9EFB4ADDA033\"></p>\n<p>_lang 就是动态路由下的参数项，这样不管是带不带参数都能找到页面了。</p>"},{"layout":"threejs","title":"ThreeJs基础概念","date":"2021-03-30T03:53:10.000Z","_content":"\n\n\n# three.js  基础概念\n\n\n\n> Three.js 是基于webgl的二次封装。将webgl繁杂的api封装成较为简洁、面向对象的方式。threejs提供了几个基本对象让我们很方便的构建一个3D应用，分别是 **场景** 、 **相机**、 **渲染器** 。\n>\n> 场景就是呈现图形画面的空间、相机可以理解为观察拍摄图形画面的方式、渲染器则是将画面渲染到屏幕上。\n>\n> 我们将从以上三个对象出发，了解threejs如何绘制一个基础的3D图形\n\n\n\n<!-- more -->\n\n### 场景、相机\n\n\n\n```javascript\nconst scene = new THREE.Scene();\nconst camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );\n```\n\n\n\n以上代码新建了一个场景和透视相机，主要看下相机这一部分。\n\n\n\n#### 相机详解\n\n​\tthree.js 内置了多种相机，使用最普遍的是透视相机（PerspectiveCamera）和正交相机 （OrthographicCamera）\n\n​\t相机都是使用右手坐标系：\n\n​\t![](https://bkimg.cdn.bcebos.com/pic/08f790529822720e84007b1870cb0a46f31fab02?x-bce-process=image/resize,m_lfit,w_640,limit_1)\n\n\n\n##### 透视相机\n\n透视相机观察的效果更人眼一样，观察物体时是 **近大远小** 的效果， 如下图所示：\n\n![](https://user-gold-cdn.xitu.io/2018/12/25/167e5f89cca8dd1f?imageView2/0/w/1280/h/960/format/)\n\n\n\n`new THREE.PerspectiveCamera(fov, aspect, near, far)` 该api为新建一个透视相机，相应的参数分别代表\n\n- `fov`表示视角；\n- `aspect`表示裁切面宽高比；\n- `near`表示近平面距离；\n- `far`表示远平面距离；\n\n\n\n> 只有离相机的距离大于`near`且小于`far`，另外还得在相机视角(fov)内的物体，才能被相机观察到从而被渲染器渲染出来；\n\n\n\n##### 正交相机\n\n正交相机观测的物体不管离物体距离远近，渲染出来都是一个大小\n\n\n\n![](https://www.ituring.com.cn/download/01YiZI4zr57Q.small)\n\n\n\n`THREE.OrthographicCamera(left, right, top, bottom, near, far)`\n\n这六个参数分别代表正交投影照相机拍摄到的空间的六个面的位置，这六个面围成一个长方体，我们称其为**视景体**（Frustum）。只有在视景体内部（下图中的灰色部分）的物体才可能显示在屏幕上，而视景体外的物体会在显示之前被裁减掉。\n\n为了保持照相机的横竖比例，需要保证`(right - left)`与`(top - bottom)`的比例与Canvas宽度与高度的比例一致。\n\n同时`near`与`far`都是指到照相机位置在深度平面的位置。\n\n\n\n##### 相机位置\n\n相机的`position`属性决定其位置, 参数分别为 x、y、z。   `camera.position.set(x, y, z)`\n\n\n\n相机的up属性决定相机的正视方向，三个参数分别为x、y、z三个维度的向量。   `camera.up.set(0, 1, 0)`  // y轴正向，人正立观察对象\n\n\n\n`Vector3`对象。   `Vector3( x : Float, y : Float, z : Float )`  这个属性既可以表示三维空间中的`点`也可以表示`向量`\n\n\n\n相机还有很重要的一个属性`视点`需要设置，也就是人眼的`焦点`，调用`lookAt`方法即可，参数为`Vector3`对象，`点(0, 0, 0)`表示`坐标系原点`。\n\n\n\n\n\n### 渲染器\n\n`视网膜`的作用是`成像`，在 ThreeJS 框架中的`渲染器`起到相同的作用\n\nThreejs提供了几种渲染器，最常用的是 `WebGLRenderer` , 其他的视情况看兼容性而定。\n\n```javascript\nconst renderer = new THREE.WebGLRenderer();\nrenderer.setSize(window.innerWidth, window.innerHeight); //设置渲染器宽度和高度\ndocument.body.appendChild(renderer.domElement); // 将渲染器防止到body容器下\n```\n\n\n\n\n\n### 物体\n\nThreejs封装了多种几何体，以 `BoxGeometry` 举例，可以创建正方体或者长方体\n\n```javascript\nvar geometry = new THREE.BoxGeometry( 100, 100, 100);\nvar material = new THREE.MeshLambertMaterial( {color: 0xff0000} );\ncube = new THREE.Mesh( geometry, material );\ncube.position.set(0,0,0);\n```\n\n\n\n`BoxGeometry`对象时只用了前三个参数，分别表示`长`、`宽`、`高`；但其实该对象还有三个参数\n\n```javascript\nBoxGeometry(width, height, depth, widthSegments, heightSegments, depthSegments)\n```\n\n分别表示每个面由多少三角形组成。在webGL中，最基础的就是`点`、`线`、`三角形` ，threejs中负责的图形都是由这些组成的。上述生成的`三角形网格` 组成整个正方体轮廓，此时我们还需要给正方体表面添加`材质` 。\n\n上面例子中使用的是 `MeshLambertMaterial`  兰伯特材质, 然后设置颜色为 `0xff0000`\n\n\n\n接着将`材质`和`轮廓` 结合在一起就生成了正方体，并设置其中心点在坐标系原点。\n\n然后将物体添加到场景中 `scene.add(cube)`\n\n\n\n### 总结\n\n\n\nthreejs 主要由渲染器、场景、相机组成。通过配置好场景、相机，然后将生成的物体放置在场景中，最后通过渲染器生成到屏幕上，就完成一个3D图形了。\n\n下面是threejs完整代码\n\n```javascript\nconst scene = new THREE.Scene(); // 创建场景\nconst camera = new THREE.PerspectiveCamera(75,  window.innerWidth / window.innerHeight,  0.1,  1000); // 创建相机\n\n// 创建渲染器\nconst renderer = new THREE.WebGLRenderer();\nrenderer.setSize(window.innerWidth, window.innerHeight); //设置渲染器宽度和高度\ndocument.body.appendChild(renderer.domElement);\n\n// 设置相机\nvar origPoint = new THREE.Vector3(0, 0, 0); //原点\ncamera.position.set(20, 40, 60); //设置相机位置\ncamera.up.set(0, 1, 0); //设置相机正方向 y正方向向量\ncamera.lookAt(origPoint);//设置相机视点\n\n// 设置物体\nconst geometry = new THREE.BoxGeometry(); // 生成几何体轮廓\nconst material = new THREE.MeshBasicMaterial({ color: 0x66ccff }); // 生成几何体材质\nconst cube = new THREE.Mesh(geometry, material); // 轮廓、材质生成立方体\nscene.add(cube); // 添加到场景中\n\n// 渲染\nrenderer.render(scene, camera);\n```\n\n","source":"_posts/ThreeJs基础概念.md","raw":"---\nlayout: threejs\ntitle: ThreeJs基础概念\ndate: 2021-03-30 11:53:10\ntags:\n - ThreeJs\n - JavaScript\ncategories:\n - ThreeJs\n---\n\n\n\n# three.js  基础概念\n\n\n\n> Three.js 是基于webgl的二次封装。将webgl繁杂的api封装成较为简洁、面向对象的方式。threejs提供了几个基本对象让我们很方便的构建一个3D应用，分别是 **场景** 、 **相机**、 **渲染器** 。\n>\n> 场景就是呈现图形画面的空间、相机可以理解为观察拍摄图形画面的方式、渲染器则是将画面渲染到屏幕上。\n>\n> 我们将从以上三个对象出发，了解threejs如何绘制一个基础的3D图形\n\n\n\n<!-- more -->\n\n### 场景、相机\n\n\n\n```javascript\nconst scene = new THREE.Scene();\nconst camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );\n```\n\n\n\n以上代码新建了一个场景和透视相机，主要看下相机这一部分。\n\n\n\n#### 相机详解\n\n​\tthree.js 内置了多种相机，使用最普遍的是透视相机（PerspectiveCamera）和正交相机 （OrthographicCamera）\n\n​\t相机都是使用右手坐标系：\n\n​\t![](https://bkimg.cdn.bcebos.com/pic/08f790529822720e84007b1870cb0a46f31fab02?x-bce-process=image/resize,m_lfit,w_640,limit_1)\n\n\n\n##### 透视相机\n\n透视相机观察的效果更人眼一样，观察物体时是 **近大远小** 的效果， 如下图所示：\n\n![](https://user-gold-cdn.xitu.io/2018/12/25/167e5f89cca8dd1f?imageView2/0/w/1280/h/960/format/)\n\n\n\n`new THREE.PerspectiveCamera(fov, aspect, near, far)` 该api为新建一个透视相机，相应的参数分别代表\n\n- `fov`表示视角；\n- `aspect`表示裁切面宽高比；\n- `near`表示近平面距离；\n- `far`表示远平面距离；\n\n\n\n> 只有离相机的距离大于`near`且小于`far`，另外还得在相机视角(fov)内的物体，才能被相机观察到从而被渲染器渲染出来；\n\n\n\n##### 正交相机\n\n正交相机观测的物体不管离物体距离远近，渲染出来都是一个大小\n\n\n\n![](https://www.ituring.com.cn/download/01YiZI4zr57Q.small)\n\n\n\n`THREE.OrthographicCamera(left, right, top, bottom, near, far)`\n\n这六个参数分别代表正交投影照相机拍摄到的空间的六个面的位置，这六个面围成一个长方体，我们称其为**视景体**（Frustum）。只有在视景体内部（下图中的灰色部分）的物体才可能显示在屏幕上，而视景体外的物体会在显示之前被裁减掉。\n\n为了保持照相机的横竖比例，需要保证`(right - left)`与`(top - bottom)`的比例与Canvas宽度与高度的比例一致。\n\n同时`near`与`far`都是指到照相机位置在深度平面的位置。\n\n\n\n##### 相机位置\n\n相机的`position`属性决定其位置, 参数分别为 x、y、z。   `camera.position.set(x, y, z)`\n\n\n\n相机的up属性决定相机的正视方向，三个参数分别为x、y、z三个维度的向量。   `camera.up.set(0, 1, 0)`  // y轴正向，人正立观察对象\n\n\n\n`Vector3`对象。   `Vector3( x : Float, y : Float, z : Float )`  这个属性既可以表示三维空间中的`点`也可以表示`向量`\n\n\n\n相机还有很重要的一个属性`视点`需要设置，也就是人眼的`焦点`，调用`lookAt`方法即可，参数为`Vector3`对象，`点(0, 0, 0)`表示`坐标系原点`。\n\n\n\n\n\n### 渲染器\n\n`视网膜`的作用是`成像`，在 ThreeJS 框架中的`渲染器`起到相同的作用\n\nThreejs提供了几种渲染器，最常用的是 `WebGLRenderer` , 其他的视情况看兼容性而定。\n\n```javascript\nconst renderer = new THREE.WebGLRenderer();\nrenderer.setSize(window.innerWidth, window.innerHeight); //设置渲染器宽度和高度\ndocument.body.appendChild(renderer.domElement); // 将渲染器防止到body容器下\n```\n\n\n\n\n\n### 物体\n\nThreejs封装了多种几何体，以 `BoxGeometry` 举例，可以创建正方体或者长方体\n\n```javascript\nvar geometry = new THREE.BoxGeometry( 100, 100, 100);\nvar material = new THREE.MeshLambertMaterial( {color: 0xff0000} );\ncube = new THREE.Mesh( geometry, material );\ncube.position.set(0,0,0);\n```\n\n\n\n`BoxGeometry`对象时只用了前三个参数，分别表示`长`、`宽`、`高`；但其实该对象还有三个参数\n\n```javascript\nBoxGeometry(width, height, depth, widthSegments, heightSegments, depthSegments)\n```\n\n分别表示每个面由多少三角形组成。在webGL中，最基础的就是`点`、`线`、`三角形` ，threejs中负责的图形都是由这些组成的。上述生成的`三角形网格` 组成整个正方体轮廓，此时我们还需要给正方体表面添加`材质` 。\n\n上面例子中使用的是 `MeshLambertMaterial`  兰伯特材质, 然后设置颜色为 `0xff0000`\n\n\n\n接着将`材质`和`轮廓` 结合在一起就生成了正方体，并设置其中心点在坐标系原点。\n\n然后将物体添加到场景中 `scene.add(cube)`\n\n\n\n### 总结\n\n\n\nthreejs 主要由渲染器、场景、相机组成。通过配置好场景、相机，然后将生成的物体放置在场景中，最后通过渲染器生成到屏幕上，就完成一个3D图形了。\n\n下面是threejs完整代码\n\n```javascript\nconst scene = new THREE.Scene(); // 创建场景\nconst camera = new THREE.PerspectiveCamera(75,  window.innerWidth / window.innerHeight,  0.1,  1000); // 创建相机\n\n// 创建渲染器\nconst renderer = new THREE.WebGLRenderer();\nrenderer.setSize(window.innerWidth, window.innerHeight); //设置渲染器宽度和高度\ndocument.body.appendChild(renderer.domElement);\n\n// 设置相机\nvar origPoint = new THREE.Vector3(0, 0, 0); //原点\ncamera.position.set(20, 40, 60); //设置相机位置\ncamera.up.set(0, 1, 0); //设置相机正方向 y正方向向量\ncamera.lookAt(origPoint);//设置相机视点\n\n// 设置物体\nconst geometry = new THREE.BoxGeometry(); // 生成几何体轮廓\nconst material = new THREE.MeshBasicMaterial({ color: 0x66ccff }); // 生成几何体材质\nconst cube = new THREE.Mesh(geometry, material); // 轮廓、材质生成立方体\nscene.add(cube); // 添加到场景中\n\n// 渲染\nrenderer.render(scene, camera);\n```\n\n","slug":"ThreeJs基础概念","published":1,"updated":"2021-03-30T06:57:27.000Z","comments":1,"photos":[],"link":"","_id":"clqexq6bk0006qn7vapix1s4p","content":"<h1 id=\"three-js-基础概念\"><a href=\"#three-js-基础概念\" class=\"headerlink\" title=\"three.js  基础概念\"></a>three.js  基础概念</h1><blockquote>\n<p>Three.js 是基于webgl的二次封装。将webgl繁杂的api封装成较为简洁、面向对象的方式。threejs提供了几个基本对象让我们很方便的构建一个3D应用，分别是 <strong>场景</strong> 、 <strong>相机</strong>、 <strong>渲染器</strong> 。</p>\n<p>场景就是呈现图形画面的空间、相机可以理解为观察拍摄图形画面的方式、渲染器则是将画面渲染到屏幕上。</p>\n<p>我们将从以上三个对象出发，了解threejs如何绘制一个基础的3D图形</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h3 id=\"场景、相机\"><a href=\"#场景、相机\" class=\"headerlink\" title=\"场景、相机\"></a>场景、相机</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> scene = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">Scene</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> camera = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">PerspectiveCamera</span>( <span class=\"number\">75</span>, <span class=\"variable language_\">window</span>.<span class=\"property\">innerWidth</span> / <span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span>, <span class=\"number\">0.1</span>, <span class=\"number\">1000</span> );</span><br></pre></td></tr></table></figure>\n\n\n\n<p>以上代码新建了一个场景和透视相机，主要看下相机这一部分。</p>\n<h4 id=\"相机详解\"><a href=\"#相机详解\" class=\"headerlink\" title=\"相机详解\"></a>相机详解</h4><p>​\tthree.js 内置了多种相机，使用最普遍的是透视相机（PerspectiveCamera）和正交相机 （OrthographicCamera）</p>\n<p>​\t相机都是使用右手坐标系：</p>\n<p>​\t<img src=\"https://bkimg.cdn.bcebos.com/pic/08f790529822720e84007b1870cb0a46f31fab02?x-bce-process=image/resize,m_lfit,w_640,limit_1\"></p>\n<h5 id=\"透视相机\"><a href=\"#透视相机\" class=\"headerlink\" title=\"透视相机\"></a>透视相机</h5><p>透视相机观察的效果更人眼一样，观察物体时是 <strong>近大远小</strong> 的效果， 如下图所示：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/12/25/167e5f89cca8dd1f?imageView2/0/w/1280/h/960/format/\"></p>\n<p><code>new THREE.PerspectiveCamera(fov, aspect, near, far)</code> 该api为新建一个透视相机，相应的参数分别代表</p>\n<ul>\n<li><code>fov</code>表示视角；</li>\n<li><code>aspect</code>表示裁切面宽高比；</li>\n<li><code>near</code>表示近平面距离；</li>\n<li><code>far</code>表示远平面距离；</li>\n</ul>\n<blockquote>\n<p>只有离相机的距离大于<code>near</code>且小于<code>far</code>，另外还得在相机视角(fov)内的物体，才能被相机观察到从而被渲染器渲染出来；</p>\n</blockquote>\n<h5 id=\"正交相机\"><a href=\"#正交相机\" class=\"headerlink\" title=\"正交相机\"></a>正交相机</h5><p>正交相机观测的物体不管离物体距离远近，渲染出来都是一个大小</p>\n<p><img src=\"https://www.ituring.com.cn/download/01YiZI4zr57Q.small\"></p>\n<p><code>THREE.OrthographicCamera(left, right, top, bottom, near, far)</code></p>\n<p>这六个参数分别代表正交投影照相机拍摄到的空间的六个面的位置，这六个面围成一个长方体，我们称其为<strong>视景体</strong>（Frustum）。只有在视景体内部（下图中的灰色部分）的物体才可能显示在屏幕上，而视景体外的物体会在显示之前被裁减掉。</p>\n<p>为了保持照相机的横竖比例，需要保证<code>(right - left)</code>与<code>(top - bottom)</code>的比例与Canvas宽度与高度的比例一致。</p>\n<p>同时<code>near</code>与<code>far</code>都是指到照相机位置在深度平面的位置。</p>\n<h5 id=\"相机位置\"><a href=\"#相机位置\" class=\"headerlink\" title=\"相机位置\"></a>相机位置</h5><p>相机的<code>position</code>属性决定其位置, 参数分别为 x、y、z。   <code>camera.position.set(x, y, z)</code></p>\n<p>相机的up属性决定相机的正视方向，三个参数分别为x、y、z三个维度的向量。   <code>camera.up.set(0, 1, 0)</code>  &#x2F;&#x2F; y轴正向，人正立观察对象</p>\n<p><code>Vector3</code>对象。   <code>Vector3( x : Float, y : Float, z : Float )</code>  这个属性既可以表示三维空间中的<code>点</code>也可以表示<code>向量</code></p>\n<p>相机还有很重要的一个属性<code>视点</code>需要设置，也就是人眼的<code>焦点</code>，调用<code>lookAt</code>方法即可，参数为<code>Vector3</code>对象，<code>点(0, 0, 0)</code>表示<code>坐标系原点</code>。</p>\n<h3 id=\"渲染器\"><a href=\"#渲染器\" class=\"headerlink\" title=\"渲染器\"></a>渲染器</h3><p><code>视网膜</code>的作用是<code>成像</code>，在 ThreeJS 框架中的<code>渲染器</code>起到相同的作用</p>\n<p>Threejs提供了几种渲染器，最常用的是 <code>WebGLRenderer</code> , 其他的视情况看兼容性而定。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> renderer = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">WebGLRenderer</span>();</span><br><span class=\"line\">renderer.<span class=\"title function_\">setSize</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">innerWidth</span>, <span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span>); <span class=\"comment\">//设置渲染器宽度和高度</span></span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(renderer.<span class=\"property\">domElement</span>); <span class=\"comment\">// 将渲染器防止到body容器下</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"物体\"><a href=\"#物体\" class=\"headerlink\" title=\"物体\"></a>物体</h3><p>Threejs封装了多种几何体，以 <code>BoxGeometry</code> 举例，可以创建正方体或者长方体</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> geometry = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">BoxGeometry</span>( <span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> material = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">MeshLambertMaterial</span>( &#123;<span class=\"attr\">color</span>: <span class=\"number\">0xff0000</span>&#125; );</span><br><span class=\"line\">cube = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">Mesh</span>( geometry, material );</span><br><span class=\"line\">cube.<span class=\"property\">position</span>.<span class=\"title function_\">set</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>BoxGeometry</code>对象时只用了前三个参数，分别表示<code>长</code>、<code>宽</code>、<code>高</code>；但其实该对象还有三个参数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">BoxGeometry</span>(width, height, depth, widthSegments, heightSegments, depthSegments)</span><br></pre></td></tr></table></figure>\n\n<p>分别表示每个面由多少三角形组成。在webGL中，最基础的就是<code>点</code>、<code>线</code>、<code>三角形</code> ，threejs中负责的图形都是由这些组成的。上述生成的<code>三角形网格</code> 组成整个正方体轮廓，此时我们还需要给正方体表面添加<code>材质</code> 。</p>\n<p>上面例子中使用的是 <code>MeshLambertMaterial</code>  兰伯特材质, 然后设置颜色为 <code>0xff0000</code></p>\n<p>接着将<code>材质</code>和<code>轮廓</code> 结合在一起就生成了正方体，并设置其中心点在坐标系原点。</p>\n<p>然后将物体添加到场景中 <code>scene.add(cube)</code></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>threejs 主要由渲染器、场景、相机组成。通过配置好场景、相机，然后将生成的物体放置在场景中，最后通过渲染器生成到屏幕上，就完成一个3D图形了。</p>\n<p>下面是threejs完整代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> scene = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">Scene</span>(); <span class=\"comment\">// 创建场景</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> camera = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">PerspectiveCamera</span>(<span class=\"number\">75</span>,  <span class=\"variable language_\">window</span>.<span class=\"property\">innerWidth</span> / <span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span>,  <span class=\"number\">0.1</span>,  <span class=\"number\">1000</span>); <span class=\"comment\">// 创建相机</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建渲染器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> renderer = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">WebGLRenderer</span>();</span><br><span class=\"line\">renderer.<span class=\"title function_\">setSize</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">innerWidth</span>, <span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span>); <span class=\"comment\">//设置渲染器宽度和高度</span></span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(renderer.<span class=\"property\">domElement</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置相机</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> origPoint = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">Vector3</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>); <span class=\"comment\">//原点</span></span><br><span class=\"line\">camera.<span class=\"property\">position</span>.<span class=\"title function_\">set</span>(<span class=\"number\">20</span>, <span class=\"number\">40</span>, <span class=\"number\">60</span>); <span class=\"comment\">//设置相机位置</span></span><br><span class=\"line\">camera.<span class=\"property\">up</span>.<span class=\"title function_\">set</span>(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>); <span class=\"comment\">//设置相机正方向 y正方向向量</span></span><br><span class=\"line\">camera.<span class=\"title function_\">lookAt</span>(origPoint);<span class=\"comment\">//设置相机视点</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置物体</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> geometry = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">BoxGeometry</span>(); <span class=\"comment\">// 生成几何体轮廓</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> material = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">MeshBasicMaterial</span>(&#123; <span class=\"attr\">color</span>: <span class=\"number\">0x66ccff</span> &#125;); <span class=\"comment\">// 生成几何体材质</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> cube = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">Mesh</span>(geometry, material); <span class=\"comment\">// 轮廓、材质生成立方体</span></span><br><span class=\"line\">scene.<span class=\"title function_\">add</span>(cube); <span class=\"comment\">// 添加到场景中</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 渲染</span></span><br><span class=\"line\">renderer.<span class=\"title function_\">render</span>(scene, camera);</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h1 id=\"three-js-基础概念\"><a href=\"#three-js-基础概念\" class=\"headerlink\" title=\"three.js  基础概念\"></a>three.js  基础概念</h1><blockquote>\n<p>Three.js 是基于webgl的二次封装。将webgl繁杂的api封装成较为简洁、面向对象的方式。threejs提供了几个基本对象让我们很方便的构建一个3D应用，分别是 <strong>场景</strong> 、 <strong>相机</strong>、 <strong>渲染器</strong> 。</p>\n<p>场景就是呈现图形画面的空间、相机可以理解为观察拍摄图形画面的方式、渲染器则是将画面渲染到屏幕上。</p>\n<p>我们将从以上三个对象出发，了解threejs如何绘制一个基础的3D图形</p>\n</blockquote>","more":"<h3 id=\"场景、相机\"><a href=\"#场景、相机\" class=\"headerlink\" title=\"场景、相机\"></a>场景、相机</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> scene = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">Scene</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> camera = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">PerspectiveCamera</span>( <span class=\"number\">75</span>, <span class=\"variable language_\">window</span>.<span class=\"property\">innerWidth</span> / <span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span>, <span class=\"number\">0.1</span>, <span class=\"number\">1000</span> );</span><br></pre></td></tr></table></figure>\n\n\n\n<p>以上代码新建了一个场景和透视相机，主要看下相机这一部分。</p>\n<h4 id=\"相机详解\"><a href=\"#相机详解\" class=\"headerlink\" title=\"相机详解\"></a>相机详解</h4><p>​\tthree.js 内置了多种相机，使用最普遍的是透视相机（PerspectiveCamera）和正交相机 （OrthographicCamera）</p>\n<p>​\t相机都是使用右手坐标系：</p>\n<p>​\t<img src=\"https://bkimg.cdn.bcebos.com/pic/08f790529822720e84007b1870cb0a46f31fab02?x-bce-process=image/resize,m_lfit,w_640,limit_1\"></p>\n<h5 id=\"透视相机\"><a href=\"#透视相机\" class=\"headerlink\" title=\"透视相机\"></a>透视相机</h5><p>透视相机观察的效果更人眼一样，观察物体时是 <strong>近大远小</strong> 的效果， 如下图所示：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/12/25/167e5f89cca8dd1f?imageView2/0/w/1280/h/960/format/\"></p>\n<p><code>new THREE.PerspectiveCamera(fov, aspect, near, far)</code> 该api为新建一个透视相机，相应的参数分别代表</p>\n<ul>\n<li><code>fov</code>表示视角；</li>\n<li><code>aspect</code>表示裁切面宽高比；</li>\n<li><code>near</code>表示近平面距离；</li>\n<li><code>far</code>表示远平面距离；</li>\n</ul>\n<blockquote>\n<p>只有离相机的距离大于<code>near</code>且小于<code>far</code>，另外还得在相机视角(fov)内的物体，才能被相机观察到从而被渲染器渲染出来；</p>\n</blockquote>\n<h5 id=\"正交相机\"><a href=\"#正交相机\" class=\"headerlink\" title=\"正交相机\"></a>正交相机</h5><p>正交相机观测的物体不管离物体距离远近，渲染出来都是一个大小</p>\n<p><img src=\"https://www.ituring.com.cn/download/01YiZI4zr57Q.small\"></p>\n<p><code>THREE.OrthographicCamera(left, right, top, bottom, near, far)</code></p>\n<p>这六个参数分别代表正交投影照相机拍摄到的空间的六个面的位置，这六个面围成一个长方体，我们称其为<strong>视景体</strong>（Frustum）。只有在视景体内部（下图中的灰色部分）的物体才可能显示在屏幕上，而视景体外的物体会在显示之前被裁减掉。</p>\n<p>为了保持照相机的横竖比例，需要保证<code>(right - left)</code>与<code>(top - bottom)</code>的比例与Canvas宽度与高度的比例一致。</p>\n<p>同时<code>near</code>与<code>far</code>都是指到照相机位置在深度平面的位置。</p>\n<h5 id=\"相机位置\"><a href=\"#相机位置\" class=\"headerlink\" title=\"相机位置\"></a>相机位置</h5><p>相机的<code>position</code>属性决定其位置, 参数分别为 x、y、z。   <code>camera.position.set(x, y, z)</code></p>\n<p>相机的up属性决定相机的正视方向，三个参数分别为x、y、z三个维度的向量。   <code>camera.up.set(0, 1, 0)</code>  &#x2F;&#x2F; y轴正向，人正立观察对象</p>\n<p><code>Vector3</code>对象。   <code>Vector3( x : Float, y : Float, z : Float )</code>  这个属性既可以表示三维空间中的<code>点</code>也可以表示<code>向量</code></p>\n<p>相机还有很重要的一个属性<code>视点</code>需要设置，也就是人眼的<code>焦点</code>，调用<code>lookAt</code>方法即可，参数为<code>Vector3</code>对象，<code>点(0, 0, 0)</code>表示<code>坐标系原点</code>。</p>\n<h3 id=\"渲染器\"><a href=\"#渲染器\" class=\"headerlink\" title=\"渲染器\"></a>渲染器</h3><p><code>视网膜</code>的作用是<code>成像</code>，在 ThreeJS 框架中的<code>渲染器</code>起到相同的作用</p>\n<p>Threejs提供了几种渲染器，最常用的是 <code>WebGLRenderer</code> , 其他的视情况看兼容性而定。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> renderer = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">WebGLRenderer</span>();</span><br><span class=\"line\">renderer.<span class=\"title function_\">setSize</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">innerWidth</span>, <span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span>); <span class=\"comment\">//设置渲染器宽度和高度</span></span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(renderer.<span class=\"property\">domElement</span>); <span class=\"comment\">// 将渲染器防止到body容器下</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"物体\"><a href=\"#物体\" class=\"headerlink\" title=\"物体\"></a>物体</h3><p>Threejs封装了多种几何体，以 <code>BoxGeometry</code> 举例，可以创建正方体或者长方体</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> geometry = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">BoxGeometry</span>( <span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> material = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">MeshLambertMaterial</span>( &#123;<span class=\"attr\">color</span>: <span class=\"number\">0xff0000</span>&#125; );</span><br><span class=\"line\">cube = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">Mesh</span>( geometry, material );</span><br><span class=\"line\">cube.<span class=\"property\">position</span>.<span class=\"title function_\">set</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>BoxGeometry</code>对象时只用了前三个参数，分别表示<code>长</code>、<code>宽</code>、<code>高</code>；但其实该对象还有三个参数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">BoxGeometry</span>(width, height, depth, widthSegments, heightSegments, depthSegments)</span><br></pre></td></tr></table></figure>\n\n<p>分别表示每个面由多少三角形组成。在webGL中，最基础的就是<code>点</code>、<code>线</code>、<code>三角形</code> ，threejs中负责的图形都是由这些组成的。上述生成的<code>三角形网格</code> 组成整个正方体轮廓，此时我们还需要给正方体表面添加<code>材质</code> 。</p>\n<p>上面例子中使用的是 <code>MeshLambertMaterial</code>  兰伯特材质, 然后设置颜色为 <code>0xff0000</code></p>\n<p>接着将<code>材质</code>和<code>轮廓</code> 结合在一起就生成了正方体，并设置其中心点在坐标系原点。</p>\n<p>然后将物体添加到场景中 <code>scene.add(cube)</code></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>threejs 主要由渲染器、场景、相机组成。通过配置好场景、相机，然后将生成的物体放置在场景中，最后通过渲染器生成到屏幕上，就完成一个3D图形了。</p>\n<p>下面是threejs完整代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> scene = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">Scene</span>(); <span class=\"comment\">// 创建场景</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> camera = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">PerspectiveCamera</span>(<span class=\"number\">75</span>,  <span class=\"variable language_\">window</span>.<span class=\"property\">innerWidth</span> / <span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span>,  <span class=\"number\">0.1</span>,  <span class=\"number\">1000</span>); <span class=\"comment\">// 创建相机</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建渲染器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> renderer = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">WebGLRenderer</span>();</span><br><span class=\"line\">renderer.<span class=\"title function_\">setSize</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">innerWidth</span>, <span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span>); <span class=\"comment\">//设置渲染器宽度和高度</span></span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(renderer.<span class=\"property\">domElement</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置相机</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> origPoint = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">Vector3</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>); <span class=\"comment\">//原点</span></span><br><span class=\"line\">camera.<span class=\"property\">position</span>.<span class=\"title function_\">set</span>(<span class=\"number\">20</span>, <span class=\"number\">40</span>, <span class=\"number\">60</span>); <span class=\"comment\">//设置相机位置</span></span><br><span class=\"line\">camera.<span class=\"property\">up</span>.<span class=\"title function_\">set</span>(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>); <span class=\"comment\">//设置相机正方向 y正方向向量</span></span><br><span class=\"line\">camera.<span class=\"title function_\">lookAt</span>(origPoint);<span class=\"comment\">//设置相机视点</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置物体</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> geometry = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">BoxGeometry</span>(); <span class=\"comment\">// 生成几何体轮廓</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> material = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">MeshBasicMaterial</span>(&#123; <span class=\"attr\">color</span>: <span class=\"number\">0x66ccff</span> &#125;); <span class=\"comment\">// 生成几何体材质</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> cube = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">Mesh</span>(geometry, material); <span class=\"comment\">// 轮廓、材质生成立方体</span></span><br><span class=\"line\">scene.<span class=\"title function_\">add</span>(cube); <span class=\"comment\">// 添加到场景中</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 渲染</span></span><br><span class=\"line\">renderer.<span class=\"title function_\">render</span>(scene, camera);</span><br></pre></td></tr></table></figure>"},{"title":"JS bind的使用和实现原理剖析","date":"2020-11-04T15:37:23.000Z","_content":"\n# JS bind的使用和实现原理剖析\n\n\n\n```javascript\nvar obj = {name: 'jeff'}\n\nvar fn = function(arg1, arg2) {\n  console.log('args==>', [arg1, arg2], 'name==>', this.name)\n}\n\nvar bindFn = fn.bind(obj, 'arg1')\t\n\nbindFn('arg2') // args==> (2) [\"arg1\", \"arg2\"] name==> jeff\n```\n\n\n\n以上是bind的一个使用场景, 从上面代码中可以发现bind主要有以下几个作用:\n\n1. 改变了函数`fn`的 `this` 指向；\n2. 通过bind将参数传递给函数`fn`\n3. 返回一个新函数\n\n<!-- more -->\n\n*通过 `fn.bind(obj, 'arg1')\t` 将函数`fn`的this指向obj， 同时将 ‘arg1’ 作为 bind 的第二个参数传递给函数 `fn`， 并返回新函数 `bindFn`   。 此时调用 `bindFn`  并传入参数作为 fn 的第二个参数，执行结果依次是打印 arg1 、 arg2、jeff*\n\n\n\n### 实现一个bind\n\n\n\n如果要实现bind， 我们根据其使用方式总结出如下几点：\n\n1. 改变函数 this 的指向\n2. 返回一个新的函数\n3. 将传给 bind 的参传递给函数\n\n\n\n#### 改变this指向并返回新函数\n\n```javascript\nFunction.prototype.mybind = function (context) {\n\n    var self = this;\n    // 获取函数从第二个参数到最后一个参数\n    var args = Array.prototype.slice.call(arguments, 1);\n\n    return function () {\n        // 这个时候的arguments是指bind返回的函数传入的参数\n        var bindArgs = Array.prototype.slice.call(arguments);\n        return self.apply(context, args.concat(bindArgs));\n    }\n}\n\nvar obj = {name: 'zzw'}\n\nvar fn = function(arg1, arg2) {\n  console.log(this.name, 'args==>', arg1, arg2)\n}\n\n// 使用 mybind绑定函数 fn 到 obj对象 并传入第一个参数 'firstarg' 给函数 \nvar bindFn = fn.mybind(obj, 'firstarg')\n\n// 调用返回的函数 bindFn， 并传入参数 'secondarg'\nbindFn();\t// zzwargs==>firstargsecondarg\n```\n\n\n\n\n\n> ! -->  bind 返回的函数不仅可以直接执行， 还可以用作构造函数，同时还能传递参数，例如\n\n\n\n```javascript\nlet obj = {name: 'zzz'}\n\nvar fn = function(arg1, arg2) {\n  console.log(this.name)\n  console.log(arg1)\n  console.log(arg2)\n} \n\nfn.prototype.age = 20\n\nvar bindFn = fn.bind(obj)\n\n// 调用 new时, bind 的 this会失效. 传入的参数\nvar newFn = new bindFn('argnew')\t// undefined argnew undefined\n\nconsole.log(newFn.age) // 20\n\n\n```\n\n\n\n\n\n我们针对这个问题对之前的 `mybind` 函数进行一下优化\n\n如果调用构造函数的话， this会指向构造出来的对象， 对应上面的就是 `newFn`\n\n\n\n```javascript\nFunction.prototype.mybind = function (context) {\n\n    var self = this;\n    // 获取函数从第二个参数到最后一个参数\n    var args = Array.prototype.slice.call(arguments, 1);\n\t\t\n  \tvar fBound = function () {\n        // 这个时候的arguments是指bind返回的函数传入的参数\n        var bindArgs = Array.prototype.slice.call(arguments);\n      \t// 如果this指向fBound，则作为构造函数指向本身， 如果不是则作为普通函数指向要绑定的对象\n        return self.apply(this instanceof fBound ? this : context, args.concat(bindArgs));\n    }\n    // 继承 绑定函数 的原型\n    fBound.prototype = this.prototype\n    return fBound\n}\n\n// !优化一下  ⬇️⬇️ 防止修改原型时将原函数原型影响了\nFunction.prototype.mybind = function (context) {\n\n    var self = this;\n    // 获取函数从第二个参数到最后一个参数\n    var args = Array.prototype.slice.call(arguments, 1);\n\t\tvar fNOP = function () {};\n  \tvar fBound = function () {\n        // 这个时候的arguments是指bind返回的函数传入的参数\n        var bindArgs = Array.prototype.slice.call(arguments);\n        return self.apply(this instanceof fBound ? this : context, args.concat(bindArgs));\n    }\n    // 继承绑定函数的原型\n    fNOP.prototype = this.prototype;\n    fBound.prototype = new fNOP();\n    return fBound\n}\n\n```\n\n\n\n\n\n","source":"_posts/JS bind的使用和实现原理剖析.md","raw":"---\ntitle: JS bind的使用和实现原理剖析\ndate: 2020-11-04 23:37:23\ncategories:\n - javascript\ntags:\n - javascript\n---\n\n# JS bind的使用和实现原理剖析\n\n\n\n```javascript\nvar obj = {name: 'jeff'}\n\nvar fn = function(arg1, arg2) {\n  console.log('args==>', [arg1, arg2], 'name==>', this.name)\n}\n\nvar bindFn = fn.bind(obj, 'arg1')\t\n\nbindFn('arg2') // args==> (2) [\"arg1\", \"arg2\"] name==> jeff\n```\n\n\n\n以上是bind的一个使用场景, 从上面代码中可以发现bind主要有以下几个作用:\n\n1. 改变了函数`fn`的 `this` 指向；\n2. 通过bind将参数传递给函数`fn`\n3. 返回一个新函数\n\n<!-- more -->\n\n*通过 `fn.bind(obj, 'arg1')\t` 将函数`fn`的this指向obj， 同时将 ‘arg1’ 作为 bind 的第二个参数传递给函数 `fn`， 并返回新函数 `bindFn`   。 此时调用 `bindFn`  并传入参数作为 fn 的第二个参数，执行结果依次是打印 arg1 、 arg2、jeff*\n\n\n\n### 实现一个bind\n\n\n\n如果要实现bind， 我们根据其使用方式总结出如下几点：\n\n1. 改变函数 this 的指向\n2. 返回一个新的函数\n3. 将传给 bind 的参传递给函数\n\n\n\n#### 改变this指向并返回新函数\n\n```javascript\nFunction.prototype.mybind = function (context) {\n\n    var self = this;\n    // 获取函数从第二个参数到最后一个参数\n    var args = Array.prototype.slice.call(arguments, 1);\n\n    return function () {\n        // 这个时候的arguments是指bind返回的函数传入的参数\n        var bindArgs = Array.prototype.slice.call(arguments);\n        return self.apply(context, args.concat(bindArgs));\n    }\n}\n\nvar obj = {name: 'zzw'}\n\nvar fn = function(arg1, arg2) {\n  console.log(this.name, 'args==>', arg1, arg2)\n}\n\n// 使用 mybind绑定函数 fn 到 obj对象 并传入第一个参数 'firstarg' 给函数 \nvar bindFn = fn.mybind(obj, 'firstarg')\n\n// 调用返回的函数 bindFn， 并传入参数 'secondarg'\nbindFn();\t// zzwargs==>firstargsecondarg\n```\n\n\n\n\n\n> ! -->  bind 返回的函数不仅可以直接执行， 还可以用作构造函数，同时还能传递参数，例如\n\n\n\n```javascript\nlet obj = {name: 'zzz'}\n\nvar fn = function(arg1, arg2) {\n  console.log(this.name)\n  console.log(arg1)\n  console.log(arg2)\n} \n\nfn.prototype.age = 20\n\nvar bindFn = fn.bind(obj)\n\n// 调用 new时, bind 的 this会失效. 传入的参数\nvar newFn = new bindFn('argnew')\t// undefined argnew undefined\n\nconsole.log(newFn.age) // 20\n\n\n```\n\n\n\n\n\n我们针对这个问题对之前的 `mybind` 函数进行一下优化\n\n如果调用构造函数的话， this会指向构造出来的对象， 对应上面的就是 `newFn`\n\n\n\n```javascript\nFunction.prototype.mybind = function (context) {\n\n    var self = this;\n    // 获取函数从第二个参数到最后一个参数\n    var args = Array.prototype.slice.call(arguments, 1);\n\t\t\n  \tvar fBound = function () {\n        // 这个时候的arguments是指bind返回的函数传入的参数\n        var bindArgs = Array.prototype.slice.call(arguments);\n      \t// 如果this指向fBound，则作为构造函数指向本身， 如果不是则作为普通函数指向要绑定的对象\n        return self.apply(this instanceof fBound ? this : context, args.concat(bindArgs));\n    }\n    // 继承 绑定函数 的原型\n    fBound.prototype = this.prototype\n    return fBound\n}\n\n// !优化一下  ⬇️⬇️ 防止修改原型时将原函数原型影响了\nFunction.prototype.mybind = function (context) {\n\n    var self = this;\n    // 获取函数从第二个参数到最后一个参数\n    var args = Array.prototype.slice.call(arguments, 1);\n\t\tvar fNOP = function () {};\n  \tvar fBound = function () {\n        // 这个时候的arguments是指bind返回的函数传入的参数\n        var bindArgs = Array.prototype.slice.call(arguments);\n        return self.apply(this instanceof fBound ? this : context, args.concat(bindArgs));\n    }\n    // 继承绑定函数的原型\n    fNOP.prototype = this.prototype;\n    fBound.prototype = new fNOP();\n    return fBound\n}\n\n```\n\n\n\n\n\n","slug":"JS bind的使用和实现原理剖析","published":1,"updated":"2021-03-30T06:56:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqexq6bl0007qn7vgu13h3y1","content":"<h1 id=\"JS-bind的使用和实现原理剖析\"><a href=\"#JS-bind的使用和实现原理剖析\" class=\"headerlink\" title=\"JS bind的使用和实现原理剖析\"></a>JS bind的使用和实现原理剖析</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;jeff&#x27;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"keyword\">function</span>(<span class=\"params\">arg1, arg2</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;args==&gt;&#x27;</span>, [arg1, arg2], <span class=\"string\">&#x27;name==&gt;&#x27;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">name</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> bindFn = fn.<span class=\"title function_\">bind</span>(obj, <span class=\"string\">&#x27;arg1&#x27;</span>)\t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">bindFn</span>(<span class=\"string\">&#x27;arg2&#x27;</span>) <span class=\"comment\">// args==&gt; (2) [&quot;arg1&quot;, &quot;arg2&quot;] name==&gt; jeff</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>以上是bind的一个使用场景, 从上面代码中可以发现bind主要有以下几个作用:</p>\n<ol>\n<li>改变了函数<code>fn</code>的 <code>this</code> 指向；</li>\n<li>通过bind将参数传递给函数<code>fn</code></li>\n<li>返回一个新函数</li>\n</ol>\n<span id=\"more\"></span>\n\n<p><em>通过 <code>fn.bind(obj, &#39;arg1&#39;)\t</code> 将函数<code>fn</code>的this指向obj， 同时将 ‘arg1’ 作为 bind 的第二个参数传递给函数 <code>fn</code>， 并返回新函数 <code>bindFn</code>   。 此时调用 <code>bindFn</code>  并传入参数作为 fn 的第二个参数，执行结果依次是打印 arg1 、 arg2、jeff</em></p>\n<h3 id=\"实现一个bind\"><a href=\"#实现一个bind\" class=\"headerlink\" title=\"实现一个bind\"></a>实现一个bind</h3><p>如果要实现bind， 我们根据其使用方式总结出如下几点：</p>\n<ol>\n<li>改变函数 this 的指向</li>\n<li>返回一个新的函数</li>\n<li>将传给 bind 的参传递给函数</li>\n</ol>\n<h4 id=\"改变this指向并返回新函数\"><a href=\"#改变this指向并返回新函数\" class=\"headerlink\" title=\"改变this指向并返回新函数\"></a>改变this指向并返回新函数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">mybind</span> = <span class=\"keyword\">function</span> (<span class=\"params\">context</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 获取函数从第二个参数到最后一个参数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> args = <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">slice</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这个时候的arguments是指bind返回的函数传入的参数</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> bindArgs = <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">slice</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.<span class=\"title function_\">apply</span>(context, args.<span class=\"title function_\">concat</span>(bindArgs));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;zzw&#x27;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"keyword\">function</span>(<span class=\"params\">arg1, arg2</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>, <span class=\"string\">&#x27;args==&gt;&#x27;</span>, arg1, arg2)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 mybind绑定函数 fn 到 obj对象 并传入第一个参数 &#x27;firstarg&#x27; 给函数 </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> bindFn = fn.<span class=\"title function_\">mybind</span>(obj, <span class=\"string\">&#x27;firstarg&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用返回的函数 bindFn， 并传入参数 &#x27;secondarg&#x27;</span></span><br><span class=\"line\"><span class=\"title function_\">bindFn</span>();\t<span class=\"comment\">// zzwargs==&gt;firstargsecondarg</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<blockquote>\n<p>! –&gt;  bind 返回的函数不仅可以直接执行， 还可以用作构造函数，同时还能传递参数，例如</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;zzz&#x27;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"keyword\">function</span>(<span class=\"params\">arg1, arg2</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arg1)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arg2)</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">fn.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">age</span> = <span class=\"number\">20</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> bindFn = fn.<span class=\"title function_\">bind</span>(obj)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用 new时, bind 的 this会失效. 传入的参数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> newFn = <span class=\"keyword\">new</span> <span class=\"title function_\">bindFn</span>(<span class=\"string\">&#x27;argnew&#x27;</span>)\t<span class=\"comment\">// undefined argnew undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newFn.<span class=\"property\">age</span>) <span class=\"comment\">// 20</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>我们针对这个问题对之前的 <code>mybind</code> 函数进行一下优化</p>\n<p>如果调用构造函数的话， this会指向构造出来的对象， 对应上面的就是 <code>newFn</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">mybind</span> = <span class=\"keyword\">function</span> (<span class=\"params\">context</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 获取函数从第二个参数到最后一个参数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> args = <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">slice</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">  \t<span class=\"keyword\">var</span> fBound = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这个时候的arguments是指bind返回的函数传入的参数</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> bindArgs = <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">slice</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">      \t<span class=\"comment\">// 如果this指向fBound，则作为构造函数指向本身， 如果不是则作为普通函数指向要绑定的对象</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span> <span class=\"keyword\">instanceof</span> fBound ? <span class=\"variable language_\">this</span> : context, args.<span class=\"title function_\">concat</span>(bindArgs));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 继承 绑定函数 的原型</span></span><br><span class=\"line\">    fBound.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"variable language_\">this</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> fBound</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// !优化一下  ⬇️⬇️ 防止修改原型时将原函数原型影响了</span></span><br><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">mybind</span> = <span class=\"keyword\">function</span> (<span class=\"params\">context</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 获取函数从第二个参数到最后一个参数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> args = <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">slice</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> fNOP = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;&#125;;</span><br><span class=\"line\">  \t<span class=\"keyword\">var</span> fBound = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这个时候的arguments是指bind返回的函数传入的参数</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> bindArgs = <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">slice</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span> <span class=\"keyword\">instanceof</span> fBound ? <span class=\"variable language_\">this</span> : context, args.<span class=\"title function_\">concat</span>(bindArgs));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 继承绑定函数的原型</span></span><br><span class=\"line\">    fNOP.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"variable language_\">this</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>;</span><br><span class=\"line\">    fBound.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"keyword\">new</span> <span class=\"title function_\">fNOP</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fBound</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n","site":{"data":{}},"excerpt":"<h1 id=\"JS-bind的使用和实现原理剖析\"><a href=\"#JS-bind的使用和实现原理剖析\" class=\"headerlink\" title=\"JS bind的使用和实现原理剖析\"></a>JS bind的使用和实现原理剖析</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;jeff&#x27;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"keyword\">function</span>(<span class=\"params\">arg1, arg2</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;args==&gt;&#x27;</span>, [arg1, arg2], <span class=\"string\">&#x27;name==&gt;&#x27;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">name</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> bindFn = fn.<span class=\"title function_\">bind</span>(obj, <span class=\"string\">&#x27;arg1&#x27;</span>)\t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">bindFn</span>(<span class=\"string\">&#x27;arg2&#x27;</span>) <span class=\"comment\">// args==&gt; (2) [&quot;arg1&quot;, &quot;arg2&quot;] name==&gt; jeff</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>以上是bind的一个使用场景, 从上面代码中可以发现bind主要有以下几个作用:</p>\n<ol>\n<li>改变了函数<code>fn</code>的 <code>this</code> 指向；</li>\n<li>通过bind将参数传递给函数<code>fn</code></li>\n<li>返回一个新函数</li>\n</ol>","more":"<p><em>通过 <code>fn.bind(obj, &#39;arg1&#39;)\t</code> 将函数<code>fn</code>的this指向obj， 同时将 ‘arg1’ 作为 bind 的第二个参数传递给函数 <code>fn</code>， 并返回新函数 <code>bindFn</code>   。 此时调用 <code>bindFn</code>  并传入参数作为 fn 的第二个参数，执行结果依次是打印 arg1 、 arg2、jeff</em></p>\n<h3 id=\"实现一个bind\"><a href=\"#实现一个bind\" class=\"headerlink\" title=\"实现一个bind\"></a>实现一个bind</h3><p>如果要实现bind， 我们根据其使用方式总结出如下几点：</p>\n<ol>\n<li>改变函数 this 的指向</li>\n<li>返回一个新的函数</li>\n<li>将传给 bind 的参传递给函数</li>\n</ol>\n<h4 id=\"改变this指向并返回新函数\"><a href=\"#改变this指向并返回新函数\" class=\"headerlink\" title=\"改变this指向并返回新函数\"></a>改变this指向并返回新函数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">mybind</span> = <span class=\"keyword\">function</span> (<span class=\"params\">context</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 获取函数从第二个参数到最后一个参数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> args = <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">slice</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这个时候的arguments是指bind返回的函数传入的参数</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> bindArgs = <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">slice</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.<span class=\"title function_\">apply</span>(context, args.<span class=\"title function_\">concat</span>(bindArgs));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;zzw&#x27;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"keyword\">function</span>(<span class=\"params\">arg1, arg2</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>, <span class=\"string\">&#x27;args==&gt;&#x27;</span>, arg1, arg2)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 mybind绑定函数 fn 到 obj对象 并传入第一个参数 &#x27;firstarg&#x27; 给函数 </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> bindFn = fn.<span class=\"title function_\">mybind</span>(obj, <span class=\"string\">&#x27;firstarg&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用返回的函数 bindFn， 并传入参数 &#x27;secondarg&#x27;</span></span><br><span class=\"line\"><span class=\"title function_\">bindFn</span>();\t<span class=\"comment\">// zzwargs==&gt;firstargsecondarg</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<blockquote>\n<p>! –&gt;  bind 返回的函数不仅可以直接执行， 还可以用作构造函数，同时还能传递参数，例如</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;zzz&#x27;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"keyword\">function</span>(<span class=\"params\">arg1, arg2</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arg1)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arg2)</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">fn.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">age</span> = <span class=\"number\">20</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> bindFn = fn.<span class=\"title function_\">bind</span>(obj)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用 new时, bind 的 this会失效. 传入的参数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> newFn = <span class=\"keyword\">new</span> <span class=\"title function_\">bindFn</span>(<span class=\"string\">&#x27;argnew&#x27;</span>)\t<span class=\"comment\">// undefined argnew undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newFn.<span class=\"property\">age</span>) <span class=\"comment\">// 20</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>我们针对这个问题对之前的 <code>mybind</code> 函数进行一下优化</p>\n<p>如果调用构造函数的话， this会指向构造出来的对象， 对应上面的就是 <code>newFn</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">mybind</span> = <span class=\"keyword\">function</span> (<span class=\"params\">context</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 获取函数从第二个参数到最后一个参数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> args = <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">slice</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">  \t<span class=\"keyword\">var</span> fBound = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这个时候的arguments是指bind返回的函数传入的参数</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> bindArgs = <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">slice</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">      \t<span class=\"comment\">// 如果this指向fBound，则作为构造函数指向本身， 如果不是则作为普通函数指向要绑定的对象</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span> <span class=\"keyword\">instanceof</span> fBound ? <span class=\"variable language_\">this</span> : context, args.<span class=\"title function_\">concat</span>(bindArgs));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 继承 绑定函数 的原型</span></span><br><span class=\"line\">    fBound.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"variable language_\">this</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> fBound</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// !优化一下  ⬇️⬇️ 防止修改原型时将原函数原型影响了</span></span><br><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">mybind</span> = <span class=\"keyword\">function</span> (<span class=\"params\">context</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 获取函数从第二个参数到最后一个参数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> args = <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">slice</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> fNOP = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;&#125;;</span><br><span class=\"line\">  \t<span class=\"keyword\">var</span> fBound = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这个时候的arguments是指bind返回的函数传入的参数</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> bindArgs = <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">slice</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span> <span class=\"keyword\">instanceof</span> fBound ? <span class=\"variable language_\">this</span> : context, args.<span class=\"title function_\">concat</span>(bindArgs));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 继承绑定函数的原型</span></span><br><span class=\"line\">    fNOP.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"variable language_\">this</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>;</span><br><span class=\"line\">    fBound.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"keyword\">new</span> <span class=\"title function_\">fNOP</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fBound</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"css多行文本省略号","date":"2019-03-21T05:03:41.000Z","_content":"\n# CSS多行文本设置省略号\n\n\n\n## 单行文本省略号\n\n  如果要设置单行文本超出容器末尾显示省略号是非常简单的，通过:\n\n```css\noverflow: hidden;\ntext-overflow: ellipsis;\n```\n\n即可实现单行文本的省略号。\n\n## 多行文本的省略号\n\n​\t下面就是本文主要讨论的点了，如何实现多行文本超出区域显示省略号，或者说可以设置最多显示几行。\n\n<!-- more -->\n\n​\t实现的方式有多种，可以用css，也可以用js。 其中css也有多种方法, 但一些方法或多或少都有点hack的味道，下面我们介绍一种浏览器原生的多行文本显示的方法。\n\n在包含文本的标签中添加如下css样式:\n\n```css\np {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 4;\n}\n```\n\n> Tips:  1. 只有中文内容在到达最大宽度时才会自动换行\n>\n> 2. 如果要英文支持的话需要添加  `word-break: break-all` 文本才会换行。\n> 3. 经测试  此css样式在chrome、safari浏览器上能正常生效，但在Firefox上好像并不起效果。\n\n\n\n## 踩坑\n\n​\t单独尝试添加上面的样式可以实现多行省略号，但我在Vue以及nuxt框架下开发，几经尝试都不起效果，一直认为是不是浏览器不支持这个样式。结果倒腾许久才发现是 autoprefixer这个插件干的\"好事\"。\n\n在原来的css中我们添加了`-webkit-box-orient: vertical` 这个样式。 但是经过 autoprefixer 处理之后，元素中竟然没有了！！  好吧。。。 手动加上之后就可以实现多行文本省略号的效果了。\n\n​\t那怎么解决 autoprefixer去掉 `-webkit-box-orient: vertical` 这个样式的问题呢？  很简单，在该样式样多加一条注释   `/*! autoprefixer: off */`   。\n\n​\t哦了，这下我们就能愉快的使用多行文本设置省略号了～\n\n\n\n\n\n\n\n","source":"_posts/css多行文本省略号.md","raw":"---\ntitle: css多行文本省略号\ndate: 2019-03-21 13:03:41\ncategories:\n - css\ntags:\n - 前端\n - css技巧\n\n---\n\n# CSS多行文本设置省略号\n\n\n\n## 单行文本省略号\n\n  如果要设置单行文本超出容器末尾显示省略号是非常简单的，通过:\n\n```css\noverflow: hidden;\ntext-overflow: ellipsis;\n```\n\n即可实现单行文本的省略号。\n\n## 多行文本的省略号\n\n​\t下面就是本文主要讨论的点了，如何实现多行文本超出区域显示省略号，或者说可以设置最多显示几行。\n\n<!-- more -->\n\n​\t实现的方式有多种，可以用css，也可以用js。 其中css也有多种方法, 但一些方法或多或少都有点hack的味道，下面我们介绍一种浏览器原生的多行文本显示的方法。\n\n在包含文本的标签中添加如下css样式:\n\n```css\np {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 4;\n}\n```\n\n> Tips:  1. 只有中文内容在到达最大宽度时才会自动换行\n>\n> 2. 如果要英文支持的话需要添加  `word-break: break-all` 文本才会换行。\n> 3. 经测试  此css样式在chrome、safari浏览器上能正常生效，但在Firefox上好像并不起效果。\n\n\n\n## 踩坑\n\n​\t单独尝试添加上面的样式可以实现多行省略号，但我在Vue以及nuxt框架下开发，几经尝试都不起效果，一直认为是不是浏览器不支持这个样式。结果倒腾许久才发现是 autoprefixer这个插件干的\"好事\"。\n\n在原来的css中我们添加了`-webkit-box-orient: vertical` 这个样式。 但是经过 autoprefixer 处理之后，元素中竟然没有了！！  好吧。。。 手动加上之后就可以实现多行文本省略号的效果了。\n\n​\t那怎么解决 autoprefixer去掉 `-webkit-box-orient: vertical` 这个样式的问题呢？  很简单，在该样式样多加一条注释   `/*! autoprefixer: off */`   。\n\n​\t哦了，这下我们就能愉快的使用多行文本设置省略号了～\n\n\n\n\n\n\n\n","slug":"css多行文本省略号","published":1,"updated":"2019-03-21T05:19:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqexq6bl0008qn7veqyf99zy","content":"<h1 id=\"CSS多行文本设置省略号\"><a href=\"#CSS多行文本设置省略号\" class=\"headerlink\" title=\"CSS多行文本设置省略号\"></a>CSS多行文本设置省略号</h1><h2 id=\"单行文本省略号\"><a href=\"#单行文本省略号\" class=\"headerlink\" title=\"单行文本省略号\"></a>单行文本省略号</h2><p>  如果要设置单行文本超出容器末尾显示省略号是非常简单的，通过:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\"><span class=\"attribute\">text-overflow</span>: ellipsis;</span><br></pre></td></tr></table></figure>\n\n<p>即可实现单行文本的省略号。</p>\n<h2 id=\"多行文本的省略号\"><a href=\"#多行文本的省略号\" class=\"headerlink\" title=\"多行文本的省略号\"></a>多行文本的省略号</h2><p>​\t下面就是本文主要讨论的点了，如何实现多行文本超出区域显示省略号，或者说可以设置最多显示几行。</p>\n<span id=\"more\"></span>\n\n<p>​\t实现的方式有多种，可以用css，也可以用js。 其中css也有多种方法, 但一些方法或多或少都有点hack的味道，下面我们介绍一种浏览器原生的多行文本显示的方法。</p>\n<p>在包含文本的标签中添加如下css样式:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">    <span class=\"attribute\">text-overflow</span>: ellipsis;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: -webkit-box;</span><br><span class=\"line\">    -webkit-box-orient: vertical;</span><br><span class=\"line\">    -webkit-line-clamp: <span class=\"number\">4</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Tips:  1. 只有中文内容在到达最大宽度时才会自动换行</p>\n<ol start=\"2\">\n<li>如果要英文支持的话需要添加  <code>word-break: break-all</code> 文本才会换行。</li>\n<li>经测试  此css样式在chrome、safari浏览器上能正常生效，但在Firefox上好像并不起效果。</li>\n</ol>\n</blockquote>\n<h2 id=\"踩坑\"><a href=\"#踩坑\" class=\"headerlink\" title=\"踩坑\"></a>踩坑</h2><p>​\t单独尝试添加上面的样式可以实现多行省略号，但我在Vue以及nuxt框架下开发，几经尝试都不起效果，一直认为是不是浏览器不支持这个样式。结果倒腾许久才发现是 autoprefixer这个插件干的”好事”。</p>\n<p>在原来的css中我们添加了<code>-webkit-box-orient: vertical</code> 这个样式。 但是经过 autoprefixer 处理之后，元素中竟然没有了！！  好吧。。。 手动加上之后就可以实现多行文本省略号的效果了。</p>\n<p>​\t那怎么解决 autoprefixer去掉 <code>-webkit-box-orient: vertical</code> 这个样式的问题呢？  很简单，在该样式样多加一条注释   <code>/*! autoprefixer: off */</code>   。</p>\n<p>​\t哦了，这下我们就能愉快的使用多行文本设置省略号了～</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"CSS多行文本设置省略号\"><a href=\"#CSS多行文本设置省略号\" class=\"headerlink\" title=\"CSS多行文本设置省略号\"></a>CSS多行文本设置省略号</h1><h2 id=\"单行文本省略号\"><a href=\"#单行文本省略号\" class=\"headerlink\" title=\"单行文本省略号\"></a>单行文本省略号</h2><p>  如果要设置单行文本超出容器末尾显示省略号是非常简单的，通过:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\"><span class=\"attribute\">text-overflow</span>: ellipsis;</span><br></pre></td></tr></table></figure>\n\n<p>即可实现单行文本的省略号。</p>\n<h2 id=\"多行文本的省略号\"><a href=\"#多行文本的省略号\" class=\"headerlink\" title=\"多行文本的省略号\"></a>多行文本的省略号</h2><p>​\t下面就是本文主要讨论的点了，如何实现多行文本超出区域显示省略号，或者说可以设置最多显示几行。</p>","more":"<p>​\t实现的方式有多种，可以用css，也可以用js。 其中css也有多种方法, 但一些方法或多或少都有点hack的味道，下面我们介绍一种浏览器原生的多行文本显示的方法。</p>\n<p>在包含文本的标签中添加如下css样式:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">    <span class=\"attribute\">text-overflow</span>: ellipsis;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: -webkit-box;</span><br><span class=\"line\">    -webkit-box-orient: vertical;</span><br><span class=\"line\">    -webkit-line-clamp: <span class=\"number\">4</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Tips:  1. 只有中文内容在到达最大宽度时才会自动换行</p>\n<ol start=\"2\">\n<li>如果要英文支持的话需要添加  <code>word-break: break-all</code> 文本才会换行。</li>\n<li>经测试  此css样式在chrome、safari浏览器上能正常生效，但在Firefox上好像并不起效果。</li>\n</ol>\n</blockquote>\n<h2 id=\"踩坑\"><a href=\"#踩坑\" class=\"headerlink\" title=\"踩坑\"></a>踩坑</h2><p>​\t单独尝试添加上面的样式可以实现多行省略号，但我在Vue以及nuxt框架下开发，几经尝试都不起效果，一直认为是不是浏览器不支持这个样式。结果倒腾许久才发现是 autoprefixer这个插件干的”好事”。</p>\n<p>在原来的css中我们添加了<code>-webkit-box-orient: vertical</code> 这个样式。 但是经过 autoprefixer 处理之后，元素中竟然没有了！！  好吧。。。 手动加上之后就可以实现多行文本省略号的效果了。</p>\n<p>​\t那怎么解决 autoprefixer去掉 <code>-webkit-box-orient: vertical</code> 这个样式的问题呢？  很简单，在该样式样多加一条注释   <code>/*! autoprefixer: off */</code>   。</p>\n<p>​\t哦了，这下我们就能愉快的使用多行文本设置省略号了～</p>"},{"title":"Js 如何实现函数只执行一次","date":"2020-11-04T15:28:23.000Z","_content":"\n# Js 如何实现函数只执行一次\n\n\n\n有时候我们会遇到某个函数在多次执行中只运行一次的情况，那么如何实现呢？ 下面直接上代码\n\n\n\n```javascript\nlet once = function(fn) {\n    let caller = true;\n    return function() {\n        if(caller) {\n            caller = false\n            fn.apply(this, arguments)\n        }\n    }\n    \n}\n```\n\n\n\n通过调用上面的函数\n\n\n\n```javascript\nlet onlyOneFn = once(function() {\n\tconsole.log('once')\n})\n\nfunction runLoopFn() {\n  let i = 100\n  while(i--) {\n    console.log('loop run')\n    onlyOneFn()\n  }\n}\n\nrunLoopFn() // once * 1     loop run * 100\n```\n\n\n\n\n\n上面的执行结果可以看出， 循环执行100次， 打印了100次 loop run， 但是只执行了一次打印 once\n\n通过封装的`once` 函数， 利用闭包我们可以实现函数只执行一次.","source":"_posts/Js 如何实现函数只执行一次.md","raw":"---\ntitle: Js 如何实现函数只执行一次\ndate: 2020-11-04 23:28:23\ncategories:\n - javascript\ntags:\n - javascript\n---\n\n# Js 如何实现函数只执行一次\n\n\n\n有时候我们会遇到某个函数在多次执行中只运行一次的情况，那么如何实现呢？ 下面直接上代码\n\n\n\n```javascript\nlet once = function(fn) {\n    let caller = true;\n    return function() {\n        if(caller) {\n            caller = false\n            fn.apply(this, arguments)\n        }\n    }\n    \n}\n```\n\n\n\n通过调用上面的函数\n\n\n\n```javascript\nlet onlyOneFn = once(function() {\n\tconsole.log('once')\n})\n\nfunction runLoopFn() {\n  let i = 100\n  while(i--) {\n    console.log('loop run')\n    onlyOneFn()\n  }\n}\n\nrunLoopFn() // once * 1     loop run * 100\n```\n\n\n\n\n\n上面的执行结果可以看出， 循环执行100次， 打印了100次 loop run， 但是只执行了一次打印 once\n\n通过封装的`once` 函数， 利用闭包我们可以实现函数只执行一次.","slug":"Js 如何实现函数只执行一次","published":1,"updated":"2020-11-04T15:19:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqexq6bm000cqn7vcn6zbh6c","content":"<h1 id=\"Js-如何实现函数只执行一次\"><a href=\"#Js-如何实现函数只执行一次\" class=\"headerlink\" title=\"Js 如何实现函数只执行一次\"></a>Js 如何实现函数只执行一次</h1><p>有时候我们会遇到某个函数在多次执行中只运行一次的情况，那么如何实现呢？ 下面直接上代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> once = <span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> caller = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(caller) &#123;</span><br><span class=\"line\">            caller = <span class=\"literal\">false</span></span><br><span class=\"line\">            fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, <span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>通过调用上面的函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> onlyOneFn = <span class=\"title function_\">once</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;once&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">runLoopFn</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">100</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(i--) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;loop run&#x27;</span>)</span><br><span class=\"line\">    <span class=\"title function_\">onlyOneFn</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">runLoopFn</span>() <span class=\"comment\">// once * 1     loop run * 100</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>上面的执行结果可以看出， 循环执行100次， 打印了100次 loop run， 但是只执行了一次打印 once</p>\n<p>通过封装的<code>once</code> 函数， 利用闭包我们可以实现函数只执行一次.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Js-如何实现函数只执行一次\"><a href=\"#Js-如何实现函数只执行一次\" class=\"headerlink\" title=\"Js 如何实现函数只执行一次\"></a>Js 如何实现函数只执行一次</h1><p>有时候我们会遇到某个函数在多次执行中只运行一次的情况，那么如何实现呢？ 下面直接上代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> once = <span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> caller = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(caller) &#123;</span><br><span class=\"line\">            caller = <span class=\"literal\">false</span></span><br><span class=\"line\">            fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, <span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>通过调用上面的函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> onlyOneFn = <span class=\"title function_\">once</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;once&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">runLoopFn</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">100</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(i--) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;loop run&#x27;</span>)</span><br><span class=\"line\">    <span class=\"title function_\">onlyOneFn</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">runLoopFn</span>() <span class=\"comment\">// once * 1     loop run * 100</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>上面的执行结果可以看出， 循环执行100次， 打印了100次 loop run， 但是只执行了一次打印 once</p>\n<p>通过封装的<code>once</code> 函数， 利用闭包我们可以实现函数只执行一次.</p>\n"},{"title":"js 的浅拷贝和深拷贝","date":"2020-11-04T15:32:23.000Z","_content":"\n# js 的浅拷贝和深拷贝\n\n\n\n### 深、浅拷贝的区别\n\n> 浅拷贝只能拷贝对象第一层，如果对象之中还嵌套有对象则不能实现深层对象的拷贝\n>\n> 深拷贝可以实现对象深层次的拷贝，怎样修改拷贝后的对象，原对象都不会改变\n\n\n\n\n\n\n#### 浅拷贝\n\n\n\n\n\n```javascript\n// 实现\nfunction clone(obj) {\n  let obj2 = Array.isArray(obj) ? [] : {}\n  if(obj && typeof obj === 'object') {\n  \tfor(let item in obj) {\n    \tobj2[item] = obj[item]\n  \t}  \n  } else {\n    obj2 = obj\n  }\n  return obj2\n}\n\n// 使用\nlet obj1 = {a: 1, b: {c: 123}}\nlet obj2 = clone(obj1)\nobj2.b.c = 6666\nobj1.b.c // 6666\t修改拷贝对象后，原对象深层的对象还是改变了\n```\n\n\n\n\n\n\n\n### 深拷贝\n\n\n\n\n\n```javascript\n// 实现\nfunction deepClone(obj) {\n  let obj2 = Array.isArray(obj) ? [] : {}\n  if(obj && typeof obj === 'object') {\n  \tfor(let item in obj) {\n    \tobj2[item] = deepClone(obj[item])\t// 递归遍历属性是否为对象\n  \t}  \n  } else {\n    obj2 = obj\n  }\n  return obj2\n}\n\n// 使用\nlet obj1 = {a: 1, b: {c: 123}}\nlet obj2 = clone(obj1)\nobj2.b.c = 6666\nobj1.b.c // 123\t修改拷贝对象后，原对象深层的对象没有改变，说明对深层的对象也进行了拷贝\n```\n\n\n\n","source":"_posts/js 的浅拷贝和深拷贝.md","raw":"---\ntitle: js 的浅拷贝和深拷贝\ndate: 2020-11-04 23:32:23\ncategories:\n - javascript\ntags:\n - javascript\n---\n\n# js 的浅拷贝和深拷贝\n\n\n\n### 深、浅拷贝的区别\n\n> 浅拷贝只能拷贝对象第一层，如果对象之中还嵌套有对象则不能实现深层对象的拷贝\n>\n> 深拷贝可以实现对象深层次的拷贝，怎样修改拷贝后的对象，原对象都不会改变\n\n\n\n\n\n\n#### 浅拷贝\n\n\n\n\n\n```javascript\n// 实现\nfunction clone(obj) {\n  let obj2 = Array.isArray(obj) ? [] : {}\n  if(obj && typeof obj === 'object') {\n  \tfor(let item in obj) {\n    \tobj2[item] = obj[item]\n  \t}  \n  } else {\n    obj2 = obj\n  }\n  return obj2\n}\n\n// 使用\nlet obj1 = {a: 1, b: {c: 123}}\nlet obj2 = clone(obj1)\nobj2.b.c = 6666\nobj1.b.c // 6666\t修改拷贝对象后，原对象深层的对象还是改变了\n```\n\n\n\n\n\n\n\n### 深拷贝\n\n\n\n\n\n```javascript\n// 实现\nfunction deepClone(obj) {\n  let obj2 = Array.isArray(obj) ? [] : {}\n  if(obj && typeof obj === 'object') {\n  \tfor(let item in obj) {\n    \tobj2[item] = deepClone(obj[item])\t// 递归遍历属性是否为对象\n  \t}  \n  } else {\n    obj2 = obj\n  }\n  return obj2\n}\n\n// 使用\nlet obj1 = {a: 1, b: {c: 123}}\nlet obj2 = clone(obj1)\nobj2.b.c = 6666\nobj1.b.c // 123\t修改拷贝对象后，原对象深层的对象没有改变，说明对深层的对象也进行了拷贝\n```\n\n\n\n","slug":"js 的浅拷贝和深拷贝","published":1,"updated":"2020-11-04T15:26:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqexq6bm000eqn7va4x1fjcu","content":"<h1 id=\"js-的浅拷贝和深拷贝\"><a href=\"#js-的浅拷贝和深拷贝\" class=\"headerlink\" title=\"js 的浅拷贝和深拷贝\"></a>js 的浅拷贝和深拷贝</h1><h3 id=\"深、浅拷贝的区别\"><a href=\"#深、浅拷贝的区别\" class=\"headerlink\" title=\"深、浅拷贝的区别\"></a>深、浅拷贝的区别</h3><blockquote>\n<p>浅拷贝只能拷贝对象第一层，如果对象之中还嵌套有对象则不能实现深层对象的拷贝</p>\n<p>深拷贝可以实现对象深层次的拷贝，怎样修改拷贝后的对象，原对象都不会改变</p>\n</blockquote>\n<h4 id=\"浅拷贝\"><a href=\"#浅拷贝\" class=\"headerlink\" title=\"浅拷贝\"></a>浅拷贝</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 实现</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">clone</span>(<span class=\"params\">obj</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> obj2 = <span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(obj) ? [] : &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(obj &amp;&amp; <span class=\"keyword\">typeof</span> obj === <span class=\"string\">&#x27;object&#x27;</span>) &#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> item <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    \tobj2[item] = obj[item]</span><br><span class=\"line\">  \t&#125;  </span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    obj2 = obj</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: &#123;<span class=\"attr\">c</span>: <span class=\"number\">123</span>&#125;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = <span class=\"title function_\">clone</span>(obj1)</span><br><span class=\"line\">obj2.<span class=\"property\">b</span>.<span class=\"property\">c</span> = <span class=\"number\">6666</span></span><br><span class=\"line\">obj1.<span class=\"property\">b</span>.<span class=\"property\">c</span> <span class=\"comment\">// 6666\t修改拷贝对象后，原对象深层的对象还是改变了</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h3 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 实现</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">deepClone</span>(<span class=\"params\">obj</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> obj2 = <span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(obj) ? [] : &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(obj &amp;&amp; <span class=\"keyword\">typeof</span> obj === <span class=\"string\">&#x27;object&#x27;</span>) &#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> item <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    \tobj2[item] = <span class=\"title function_\">deepClone</span>(obj[item])\t<span class=\"comment\">// 递归遍历属性是否为对象</span></span><br><span class=\"line\">  \t&#125;  </span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    obj2 = obj</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: &#123;<span class=\"attr\">c</span>: <span class=\"number\">123</span>&#125;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = <span class=\"title function_\">clone</span>(obj1)</span><br><span class=\"line\">obj2.<span class=\"property\">b</span>.<span class=\"property\">c</span> = <span class=\"number\">6666</span></span><br><span class=\"line\">obj1.<span class=\"property\">b</span>.<span class=\"property\">c</span> <span class=\"comment\">// 123\t修改拷贝对象后，原对象深层的对象没有改变，说明对深层的对象也进行了拷贝</span></span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"js-的浅拷贝和深拷贝\"><a href=\"#js-的浅拷贝和深拷贝\" class=\"headerlink\" title=\"js 的浅拷贝和深拷贝\"></a>js 的浅拷贝和深拷贝</h1><h3 id=\"深、浅拷贝的区别\"><a href=\"#深、浅拷贝的区别\" class=\"headerlink\" title=\"深、浅拷贝的区别\"></a>深、浅拷贝的区别</h3><blockquote>\n<p>浅拷贝只能拷贝对象第一层，如果对象之中还嵌套有对象则不能实现深层对象的拷贝</p>\n<p>深拷贝可以实现对象深层次的拷贝，怎样修改拷贝后的对象，原对象都不会改变</p>\n</blockquote>\n<h4 id=\"浅拷贝\"><a href=\"#浅拷贝\" class=\"headerlink\" title=\"浅拷贝\"></a>浅拷贝</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 实现</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">clone</span>(<span class=\"params\">obj</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> obj2 = <span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(obj) ? [] : &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(obj &amp;&amp; <span class=\"keyword\">typeof</span> obj === <span class=\"string\">&#x27;object&#x27;</span>) &#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> item <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    \tobj2[item] = obj[item]</span><br><span class=\"line\">  \t&#125;  </span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    obj2 = obj</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: &#123;<span class=\"attr\">c</span>: <span class=\"number\">123</span>&#125;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = <span class=\"title function_\">clone</span>(obj1)</span><br><span class=\"line\">obj2.<span class=\"property\">b</span>.<span class=\"property\">c</span> = <span class=\"number\">6666</span></span><br><span class=\"line\">obj1.<span class=\"property\">b</span>.<span class=\"property\">c</span> <span class=\"comment\">// 6666\t修改拷贝对象后，原对象深层的对象还是改变了</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h3 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 实现</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">deepClone</span>(<span class=\"params\">obj</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> obj2 = <span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(obj) ? [] : &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(obj &amp;&amp; <span class=\"keyword\">typeof</span> obj === <span class=\"string\">&#x27;object&#x27;</span>) &#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> item <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    \tobj2[item] = <span class=\"title function_\">deepClone</span>(obj[item])\t<span class=\"comment\">// 递归遍历属性是否为对象</span></span><br><span class=\"line\">  \t&#125;  </span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    obj2 = obj</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: &#123;<span class=\"attr\">c</span>: <span class=\"number\">123</span>&#125;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = <span class=\"title function_\">clone</span>(obj1)</span><br><span class=\"line\">obj2.<span class=\"property\">b</span>.<span class=\"property\">c</span> = <span class=\"number\">6666</span></span><br><span class=\"line\">obj1.<span class=\"property\">b</span>.<span class=\"property\">c</span> <span class=\"comment\">// 123\t修改拷贝对象后，原对象深层的对象没有改变，说明对深层的对象也进行了拷贝</span></span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"eslint,prettier,stylelint,commitlint配置","date":"2022-02-10T09:03:22.000Z","_content":"\n\n\n# 代码、项目规范，配置 eslint、prettier、stylelint、commitlint\n\n\n\n> 为了规范项目代码，统一代码风格，同时提升代码的提交规范，使用 **eslint** 进行代码规范化的检测和自动修改；使用  **prettier** 统一代码风格和自动格式化；使用  **stylelint** 统一 css 风格和自动格式化；使用 **commitlint**、**lint-staged**、**husky** 进行提交检查和提交自动格式化。 同时为了消除不同使用者 vscode 的差异，提供了 .vscode -- setting.json 的配置.\n\n<!-- more -->\n\n## Eslint\\prettier\\vscode 配置\n\n1. .vscode 配置:\n\n```json\n{\n  \"files.associations\": {\n    \"*.vue\": \"vue\"\n  },\n  \"editor.formatOnSave\": false, // prettier保存格式化\n  \"[javascript]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n  },\n  \"[json]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n  },\n  \"[html]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n  },\n  \"[jsonc]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n  },\n  \"[vue]\": {\n    \"editor.defaultFormatter\": \"octref.vetur\"\n  },\n  // vetur 配置\n  \"vetur.validation.template\": false,\n  \"vetur.format.defaultFormatter.html\": \"prettyhtml\",\n  \"vetur.format.defaultFormatter.css\": \"prettier\",\n  \"vetur.format.defaultFormatter.postcss\": \"prettier\",\n  \"vetur.format.defaultFormatter.scss\": \"prettier\",\n  \"vetur.format.defaultFormatter.less\": \"prettier\",\n  \"vetur.format.defaultFormatter.stylus\": \"stylus-supremacy\",\n  \"vetur.format.defaultFormatter.sass\": \"sass-formatter\",\n  \"vetur.format.defaultFormatter.js\": \"prettier-eslint\",\n  \"vetur.format.defaultFormatter.ts\": \"vscode-typescript\",\n  \"vetur.format.options.tabSize\": 2,\n  \"vetur.format.defaultFormatterOptions\": {\n   // \"js-beautify-html\": {\n   //   \"wrap_attributes\": \"force-expand-multiline\"\n   // },\n    \"prettyhtml\": {\n      \"printWidth\": 150,\n      \"singleQuote\": false,\n      \"wrapAttributes\": true,\n      \"sortAttributes\": false\n    },\n    \"prettier\": {\n      \"semi\": true,\n      \"singleQuote\": true\n    }\n  },\n  \"prettier.vueIndentScriptAndStyle\": true,\n  // eslint扩展设置\n  \"editor.codeActionsOnSave\": {\n    \"source.fixAll.eslint\": true\n  },\n  \"eslint.options\": {\n    \"extensions\": [\".js\", \".vue\"]\n  },\n  \"eslint.validate\": [\"javascript\", \"javascriptreact\", \"html\", \"typescript\", \"typescriptreact\", \"vue\"]\n}\n\n\n```\n\n2. 安装以下npm包\n\n```shell\nnpm install --save-dev eslint@7.28.x prettier eslint-config-prettier eslint-plugin-prettier eslint-formatter-pretty\n```\n\n> Tips: \n>\n> eslant 要求版本7.28以上，eslint-config-prettier eslint-plugin-prettier用于解决prettier和eslint规则的冲突.\n>\n> eslint-formatter-pretty （用于命令行美化）\n\n\n\n3. .eslintrc 配置如下\n\n```json\n{\n  root: true,\n  parserOptions: {\n    parser: 'babel-eslint',\n    sourceType: 'module',\n    ecmaVersion: 2020,\n  },\n  env: {\n    browser: true,\n    node: true,\n    es6: true,\n  },\n  extends: [\n    'plugin:vue/recommended',\n    'eslint:recommended',\n    'plugin:prettier/recommended', // 解决prettier和eslint的冲突\n  ]\n} \n```\n\n> prettier和eslint存在部分冲突的规则， 通过 eslint-config-prettier eslint-plugin-prettier 已经 能解决大部分冲突，剩下的比如  \"singleQuote\"、\"semi\" 手动配置 eslint 就能解决\n>\n> 配置的原则就是 eslint 负责代码检查和自动修复，prettier 负责自动格式化 \n\n\n\n## stylelint\n\n1. Npm 安装如下包\n\n```json\n{\n\t\t\"stylelint\": \"^14.3.0\",\n    \"stylelint-config-prettier\": \"^9.0.3\",\n    \"stylelint-config-recess-order\": \"^3.0.0\",\n    \"stylelint-config-recommended-vue\": \"^1.1.0\",\n    \"stylelint-config-standard\": \"^24.0.0\",\n    \"stylelint-config-standard-scss\": \"^3.0.0\",\n    \"stylelint-scss\": \"^4.1.0\",\n    \"stylelint-webpack-plugin\": \"^2.3.2\",\n}\n```\n\n2. 新建stylelint.config.js 文件并配置如下:\n\n```js\nmodule.exports = {\n  defaultSeverity: 'warning',\n  extends: ['stylelint-config-standard-scss', 'stylelint-config-recommended-vue/scss', 'stylelint-config-prettier', 'stylelint-config-recess-order'],\n  rules: {\n    'selector-class-pattern': [\n      // 命名规范 - kebab-case\n      '^([a-z][a-z0-9]*)(-+[a-z0-9]+)*$',\n      {\n        message: 'Expected class selector to be kebab-case',\n      },\n    ],\n    'rule-empty-line-before': null,\n    'declaration-block-no-duplicate-properties': true, // 禁止声明重复属性\n    'no-descending-specificity': true, // 禁止在具有较高优先级的选择器后出现被其覆盖的较低优先级的选择器。\n    // 最多允许嵌套20层，去掉默认的最多2层\n    'max-nesting-depth': 20,\n    // 颜色值要小写\n    'color-hex-case': 'lower',\n    // 颜色值能短则短\n    'color-hex-length': 'short',\n  },\n  ignoreFiles: ['**/*.js', '**/*.jsx', '**/*.tsx', '**/*.ts'],\n};\n\n```\n\n3. webpack StyleLintPlugin 配置如下：\n\n​\t\t\n\n```js\nnew StyleLintPlugin({\n        files: ['src/*.(s(c|a)ss|css|less|vue)'],\n        extensions: ['ccs', 'scss', 'sass', 'less', 'vue', 'html'],\n        fix: true,\n        cache: false,\n        emitErrors: true,\n        failOnError: false,\n      }),\n```\n\n\n\n\n\n4. vscode 配置如下\n\n```json\n{\n\"stylelint.validate\": [\"vue\", \"less\", \"css\", \"html\", \"scss\", \"sass\"],\n  \"editor.codeActionsOnSave\": {\n    \"source.fixAll.stylelint\": true\n  },\n}\n\n```\n\n## commitlint husky lint-staged\n\n1. > npm install --save-dev @commitlint/config-conventional @commitlint/cli  husky lint-staged\n\n   \n\n2. commitlint.config.js 配置如下:\n\n```js\n/**\n * init: 项目初始化\n * feat：新功能\n * fix：修补某功能的bug\n * refactor：重构某个功能\n * perf: 优化构建工具或运行时性能\n * style：仅样式改动\n * docs：仅文档新增/改动\n * chore：构建过程或辅助工具的变动\n * ci: ci配置相关，docker等配置文件修改\n */\nmodule.exports = {\n  extends: ['@commitlint/config-conventional'],\n  rules: {\n    'type-enum': [2, 'always', ['init', 'feat', 'fix', 'refactor', 'perf', 'style', 'docs', 'chore', 'ci']],\n    'type-case': [0],\n    'type-empty': [0],\n    'scope-empty': [0],\n    'scope-case': [0],\n    'subject-full-stop': [0, 'never'],\n    'subject-case': [0, 'never'],\n    'header-max-length': [0, 'always', 72],\n  },\n};\n\n```\n\n3. husky lint-staged\n\n> npm install husky lint-staged prettier --save-dev\n>\n> npx husky install  (启用)\n>\n> \"prepare\": \"husky install\" 【install后自动启用，这个配置在package.json中，否则下次新拉代码还需要手动启用】\n>\n> npx husky add .husky/pre-commit \"npm run lint-staged\" 【创建一个hook，执行完根目录回生成一个.husky目录】\n\n​\t\n\n4. husky 和 lint-staged 配置如下\n\n```json\n\"husky\": {\n    \"hooks\": {\n      \"pre-commit\": \"npm run lint-staged\"\n    }\n  },\n  \"lint-staged\": {\n    \"**/*.vue\": [\n      \"npm run lint:fix\",\n      \"npm run lint:style:fix\"\n    ],\n    \"**/*.{js,jsx,ts,tsx}\": [\n      \"npm run lint:fix\"\n    ],\n    \"**/*.{htm,html,css,sss,less,scss,sass}\": [\n      \"npm run lint:style:fix\",\n      \"git add\"\n    ]\n  }\n```\n\n## npm 脚本部分配置如下:\n\n```json\n{\n   \"lint\": \"eslint --ext .js,.vue src --ignore-path .gitignore .\",\n    \"lint:fix\": \"eslint --fix --ext .js,.vue --format=pretty ./src\",\n    \"lint:prettier\": \"prettier --check \\\"**/*\\\" --end-of-line auto\",\n    \"lint:style\": \"stylelint src/**/*.{vue,css,sass,scss,less} --allow-empty-input\",\n    \"lint:style:fix\": \"stylelint src/**/*.{vue,css,sass,scss,less} --fix\",\n    \"lint-staged\": \"lint-staged\",\n    \"prepare\": \"husky install\",\n}\n```\n\n## 用到的部分依赖及版本如下： \n\n```\n{\n\t\"devDependencies\": {\n\t\t\"@commitlint/cli\": \"^16.1.0\",\n    \"@commitlint/config-conventional\": \"^16.0.0\",\n     \"eslint\": \"^7.29.0\",\n    \"eslint-config-prettier\": \"^8.3.0\",\n    \"eslint-formatter-pretty\": \"^4.1.0\",\n    \"eslint-plugin-prettier\": \"^4.0.0\",\n    \"eslint-plugin-vue\": \"6.2.2\",\n    \"husky\": \"^7.0.4\",\n    \"lint-staged\": \"^12.3.2\",\n    \"postcss\": \"^8.4.5\",\n    \"postcss-html\": \"^1.3.0\",\n    \"postcss-scss\": \"^4.0.3\",\n    \"prettier\": \"2.5.1\",\n    \"stylelint\": \"^14.3.0\",\n    \"stylelint-config-prettier\": \"^9.0.3\",\n    \"stylelint-config-recess-order\": \"^3.0.0\",\n    \"stylelint-config-recommended-vue\": \"^1.1.0\",\n    \"stylelint-config-standard\": \"^24.0.0\",\n    \"stylelint-config-standard-scss\": \"^3.0.0\",\n    \"stylelint-scss\": \"^4.1.0\",\n    \"stylelint-webpack-plugin\": \"^2.3.2\",\n\t}\n}\n```\n\n","source":"_posts/eslint-prettier-stylelint-commitlint配置.md","raw":"---\ntitle: 'eslint,prettier,stylelint,commitlint配置'\ndate: 2022-02-10 17:03:22\ntags:\n  - Vue\n---\n\n\n\n# 代码、项目规范，配置 eslint、prettier、stylelint、commitlint\n\n\n\n> 为了规范项目代码，统一代码风格，同时提升代码的提交规范，使用 **eslint** 进行代码规范化的检测和自动修改；使用  **prettier** 统一代码风格和自动格式化；使用  **stylelint** 统一 css 风格和自动格式化；使用 **commitlint**、**lint-staged**、**husky** 进行提交检查和提交自动格式化。 同时为了消除不同使用者 vscode 的差异，提供了 .vscode -- setting.json 的配置.\n\n<!-- more -->\n\n## Eslint\\prettier\\vscode 配置\n\n1. .vscode 配置:\n\n```json\n{\n  \"files.associations\": {\n    \"*.vue\": \"vue\"\n  },\n  \"editor.formatOnSave\": false, // prettier保存格式化\n  \"[javascript]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n  },\n  \"[json]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n  },\n  \"[html]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n  },\n  \"[jsonc]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n  },\n  \"[vue]\": {\n    \"editor.defaultFormatter\": \"octref.vetur\"\n  },\n  // vetur 配置\n  \"vetur.validation.template\": false,\n  \"vetur.format.defaultFormatter.html\": \"prettyhtml\",\n  \"vetur.format.defaultFormatter.css\": \"prettier\",\n  \"vetur.format.defaultFormatter.postcss\": \"prettier\",\n  \"vetur.format.defaultFormatter.scss\": \"prettier\",\n  \"vetur.format.defaultFormatter.less\": \"prettier\",\n  \"vetur.format.defaultFormatter.stylus\": \"stylus-supremacy\",\n  \"vetur.format.defaultFormatter.sass\": \"sass-formatter\",\n  \"vetur.format.defaultFormatter.js\": \"prettier-eslint\",\n  \"vetur.format.defaultFormatter.ts\": \"vscode-typescript\",\n  \"vetur.format.options.tabSize\": 2,\n  \"vetur.format.defaultFormatterOptions\": {\n   // \"js-beautify-html\": {\n   //   \"wrap_attributes\": \"force-expand-multiline\"\n   // },\n    \"prettyhtml\": {\n      \"printWidth\": 150,\n      \"singleQuote\": false,\n      \"wrapAttributes\": true,\n      \"sortAttributes\": false\n    },\n    \"prettier\": {\n      \"semi\": true,\n      \"singleQuote\": true\n    }\n  },\n  \"prettier.vueIndentScriptAndStyle\": true,\n  // eslint扩展设置\n  \"editor.codeActionsOnSave\": {\n    \"source.fixAll.eslint\": true\n  },\n  \"eslint.options\": {\n    \"extensions\": [\".js\", \".vue\"]\n  },\n  \"eslint.validate\": [\"javascript\", \"javascriptreact\", \"html\", \"typescript\", \"typescriptreact\", \"vue\"]\n}\n\n\n```\n\n2. 安装以下npm包\n\n```shell\nnpm install --save-dev eslint@7.28.x prettier eslint-config-prettier eslint-plugin-prettier eslint-formatter-pretty\n```\n\n> Tips: \n>\n> eslant 要求版本7.28以上，eslint-config-prettier eslint-plugin-prettier用于解决prettier和eslint规则的冲突.\n>\n> eslint-formatter-pretty （用于命令行美化）\n\n\n\n3. .eslintrc 配置如下\n\n```json\n{\n  root: true,\n  parserOptions: {\n    parser: 'babel-eslint',\n    sourceType: 'module',\n    ecmaVersion: 2020,\n  },\n  env: {\n    browser: true,\n    node: true,\n    es6: true,\n  },\n  extends: [\n    'plugin:vue/recommended',\n    'eslint:recommended',\n    'plugin:prettier/recommended', // 解决prettier和eslint的冲突\n  ]\n} \n```\n\n> prettier和eslint存在部分冲突的规则， 通过 eslint-config-prettier eslint-plugin-prettier 已经 能解决大部分冲突，剩下的比如  \"singleQuote\"、\"semi\" 手动配置 eslint 就能解决\n>\n> 配置的原则就是 eslint 负责代码检查和自动修复，prettier 负责自动格式化 \n\n\n\n## stylelint\n\n1. Npm 安装如下包\n\n```json\n{\n\t\t\"stylelint\": \"^14.3.0\",\n    \"stylelint-config-prettier\": \"^9.0.3\",\n    \"stylelint-config-recess-order\": \"^3.0.0\",\n    \"stylelint-config-recommended-vue\": \"^1.1.0\",\n    \"stylelint-config-standard\": \"^24.0.0\",\n    \"stylelint-config-standard-scss\": \"^3.0.0\",\n    \"stylelint-scss\": \"^4.1.0\",\n    \"stylelint-webpack-plugin\": \"^2.3.2\",\n}\n```\n\n2. 新建stylelint.config.js 文件并配置如下:\n\n```js\nmodule.exports = {\n  defaultSeverity: 'warning',\n  extends: ['stylelint-config-standard-scss', 'stylelint-config-recommended-vue/scss', 'stylelint-config-prettier', 'stylelint-config-recess-order'],\n  rules: {\n    'selector-class-pattern': [\n      // 命名规范 - kebab-case\n      '^([a-z][a-z0-9]*)(-+[a-z0-9]+)*$',\n      {\n        message: 'Expected class selector to be kebab-case',\n      },\n    ],\n    'rule-empty-line-before': null,\n    'declaration-block-no-duplicate-properties': true, // 禁止声明重复属性\n    'no-descending-specificity': true, // 禁止在具有较高优先级的选择器后出现被其覆盖的较低优先级的选择器。\n    // 最多允许嵌套20层，去掉默认的最多2层\n    'max-nesting-depth': 20,\n    // 颜色值要小写\n    'color-hex-case': 'lower',\n    // 颜色值能短则短\n    'color-hex-length': 'short',\n  },\n  ignoreFiles: ['**/*.js', '**/*.jsx', '**/*.tsx', '**/*.ts'],\n};\n\n```\n\n3. webpack StyleLintPlugin 配置如下：\n\n​\t\t\n\n```js\nnew StyleLintPlugin({\n        files: ['src/*.(s(c|a)ss|css|less|vue)'],\n        extensions: ['ccs', 'scss', 'sass', 'less', 'vue', 'html'],\n        fix: true,\n        cache: false,\n        emitErrors: true,\n        failOnError: false,\n      }),\n```\n\n\n\n\n\n4. vscode 配置如下\n\n```json\n{\n\"stylelint.validate\": [\"vue\", \"less\", \"css\", \"html\", \"scss\", \"sass\"],\n  \"editor.codeActionsOnSave\": {\n    \"source.fixAll.stylelint\": true\n  },\n}\n\n```\n\n## commitlint husky lint-staged\n\n1. > npm install --save-dev @commitlint/config-conventional @commitlint/cli  husky lint-staged\n\n   \n\n2. commitlint.config.js 配置如下:\n\n```js\n/**\n * init: 项目初始化\n * feat：新功能\n * fix：修补某功能的bug\n * refactor：重构某个功能\n * perf: 优化构建工具或运行时性能\n * style：仅样式改动\n * docs：仅文档新增/改动\n * chore：构建过程或辅助工具的变动\n * ci: ci配置相关，docker等配置文件修改\n */\nmodule.exports = {\n  extends: ['@commitlint/config-conventional'],\n  rules: {\n    'type-enum': [2, 'always', ['init', 'feat', 'fix', 'refactor', 'perf', 'style', 'docs', 'chore', 'ci']],\n    'type-case': [0],\n    'type-empty': [0],\n    'scope-empty': [0],\n    'scope-case': [0],\n    'subject-full-stop': [0, 'never'],\n    'subject-case': [0, 'never'],\n    'header-max-length': [0, 'always', 72],\n  },\n};\n\n```\n\n3. husky lint-staged\n\n> npm install husky lint-staged prettier --save-dev\n>\n> npx husky install  (启用)\n>\n> \"prepare\": \"husky install\" 【install后自动启用，这个配置在package.json中，否则下次新拉代码还需要手动启用】\n>\n> npx husky add .husky/pre-commit \"npm run lint-staged\" 【创建一个hook，执行完根目录回生成一个.husky目录】\n\n​\t\n\n4. husky 和 lint-staged 配置如下\n\n```json\n\"husky\": {\n    \"hooks\": {\n      \"pre-commit\": \"npm run lint-staged\"\n    }\n  },\n  \"lint-staged\": {\n    \"**/*.vue\": [\n      \"npm run lint:fix\",\n      \"npm run lint:style:fix\"\n    ],\n    \"**/*.{js,jsx,ts,tsx}\": [\n      \"npm run lint:fix\"\n    ],\n    \"**/*.{htm,html,css,sss,less,scss,sass}\": [\n      \"npm run lint:style:fix\",\n      \"git add\"\n    ]\n  }\n```\n\n## npm 脚本部分配置如下:\n\n```json\n{\n   \"lint\": \"eslint --ext .js,.vue src --ignore-path .gitignore .\",\n    \"lint:fix\": \"eslint --fix --ext .js,.vue --format=pretty ./src\",\n    \"lint:prettier\": \"prettier --check \\\"**/*\\\" --end-of-line auto\",\n    \"lint:style\": \"stylelint src/**/*.{vue,css,sass,scss,less} --allow-empty-input\",\n    \"lint:style:fix\": \"stylelint src/**/*.{vue,css,sass,scss,less} --fix\",\n    \"lint-staged\": \"lint-staged\",\n    \"prepare\": \"husky install\",\n}\n```\n\n## 用到的部分依赖及版本如下： \n\n```\n{\n\t\"devDependencies\": {\n\t\t\"@commitlint/cli\": \"^16.1.0\",\n    \"@commitlint/config-conventional\": \"^16.0.0\",\n     \"eslint\": \"^7.29.0\",\n    \"eslint-config-prettier\": \"^8.3.0\",\n    \"eslint-formatter-pretty\": \"^4.1.0\",\n    \"eslint-plugin-prettier\": \"^4.0.0\",\n    \"eslint-plugin-vue\": \"6.2.2\",\n    \"husky\": \"^7.0.4\",\n    \"lint-staged\": \"^12.3.2\",\n    \"postcss\": \"^8.4.5\",\n    \"postcss-html\": \"^1.3.0\",\n    \"postcss-scss\": \"^4.0.3\",\n    \"prettier\": \"2.5.1\",\n    \"stylelint\": \"^14.3.0\",\n    \"stylelint-config-prettier\": \"^9.0.3\",\n    \"stylelint-config-recess-order\": \"^3.0.0\",\n    \"stylelint-config-recommended-vue\": \"^1.1.0\",\n    \"stylelint-config-standard\": \"^24.0.0\",\n    \"stylelint-config-standard-scss\": \"^3.0.0\",\n    \"stylelint-scss\": \"^4.1.0\",\n    \"stylelint-webpack-plugin\": \"^2.3.2\",\n\t}\n}\n```\n\n","slug":"eslint-prettier-stylelint-commitlint配置","published":1,"updated":"2022-02-11T03:13:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqexq6bn000jqn7vavgr2q4n","content":"<h1 id=\"代码、项目规范，配置-eslint、prettier、stylelint、commitlint\"><a href=\"#代码、项目规范，配置-eslint、prettier、stylelint、commitlint\" class=\"headerlink\" title=\"代码、项目规范，配置 eslint、prettier、stylelint、commitlint\"></a>代码、项目规范，配置 eslint、prettier、stylelint、commitlint</h1><blockquote>\n<p>为了规范项目代码，统一代码风格，同时提升代码的提交规范，使用 <strong>eslint</strong> 进行代码规范化的检测和自动修改；使用  <strong>prettier</strong> 统一代码风格和自动格式化；使用  <strong>stylelint</strong> 统一 css 风格和自动格式化；使用 <strong>commitlint</strong>、<strong>lint-staged</strong>、<strong>husky</strong> 进行提交检查和提交自动格式化。 同时为了消除不同使用者 vscode 的差异，提供了 .vscode – setting.json 的配置.</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"Eslint-prettier-vscode-配置\"><a href=\"#Eslint-prettier-vscode-配置\" class=\"headerlink\" title=\"Eslint\\prettier\\vscode 配置\"></a>Eslint\\prettier\\vscode 配置</h2><ol>\n<li>.vscode 配置:</li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;files.associations&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;*.vue&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vue&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;editor.formatOnSave&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span> <span class=\"comment\">// prettier保存格式化</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;[javascript]&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;editor.defaultFormatter&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;[json]&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;editor.defaultFormatter&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;[html]&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;editor.defaultFormatter&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;[jsonc]&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;editor.defaultFormatter&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;[vue]&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;editor.defaultFormatter&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;octref.vetur&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"comment\">// vetur 配置</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;vetur.validation.template&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;vetur.format.defaultFormatter.html&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;prettyhtml&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;vetur.format.defaultFormatter.css&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;prettier&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;vetur.format.defaultFormatter.postcss&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;prettier&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;vetur.format.defaultFormatter.scss&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;prettier&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;vetur.format.defaultFormatter.less&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;prettier&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;vetur.format.defaultFormatter.stylus&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;stylus-supremacy&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;vetur.format.defaultFormatter.sass&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;sass-formatter&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;vetur.format.defaultFormatter.js&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;prettier-eslint&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;vetur.format.defaultFormatter.ts&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vscode-typescript&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;vetur.format.options.tabSize&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;vetur.format.defaultFormatterOptions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">   <span class=\"comment\">// &quot;js-beautify-html&quot;: &#123;</span></span><br><span class=\"line\">   <span class=\"comment\">//   &quot;wrap_attributes&quot;: &quot;force-expand-multiline&quot;</span></span><br><span class=\"line\">   <span class=\"comment\">// &#125;,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;prettyhtml&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;printWidth&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">150</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;singleQuote&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;wrapAttributes&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;sortAttributes&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;prettier&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;semi&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;singleQuote&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;prettier.vueIndentScriptAndStyle&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"comment\">// eslint扩展设置</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;editor.codeActionsOnSave&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;source.fixAll.eslint&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;eslint.options&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;extensions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;.js&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;.vue&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;eslint.validate&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;javascript&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;javascriptreact&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;html&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;typescript&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;typescriptreact&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;vue&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>安装以下npm包</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev eslint@7.28.x prettier eslint-config-prettier eslint-plugin-prettier eslint-formatter-pretty</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Tips: </p>\n<p>eslant 要求版本7.28以上，eslint-config-prettier eslint-plugin-prettier用于解决prettier和eslint规则的冲突.</p>\n<p>eslint-formatter-pretty （用于命令行美化）</p>\n</blockquote>\n<ol start=\"3\">\n<li>.eslintrc 配置如下</li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  root<span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  parserOptions<span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    parser<span class=\"punctuation\">:</span> &#x27;babel-eslint&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">    sourceType<span class=\"punctuation\">:</span> &#x27;module&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">    ecmaVersion<span class=\"punctuation\">:</span> <span class=\"number\">2020</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  env<span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    browser<span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    node<span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    es6<span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  extends<span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    &#x27;plugin<span class=\"punctuation\">:</span>vue/recommended&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">    &#x27;eslint<span class=\"punctuation\">:</span>recommended&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">    &#x27;plugin<span class=\"punctuation\">:</span>prettier/recommended&#x27;<span class=\"punctuation\">,</span> <span class=\"comment\">// 解决prettier和eslint的冲突</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span> </span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>prettier和eslint存在部分冲突的规则， 通过 eslint-config-prettier eslint-plugin-prettier 已经 能解决大部分冲突，剩下的比如  “singleQuote”、”semi” 手动配置 eslint 就能解决</p>\n<p>配置的原则就是 eslint 负责代码检查和自动修复，prettier 负责自动格式化 </p>\n</blockquote>\n<h2 id=\"stylelint\"><a href=\"#stylelint\" class=\"headerlink\" title=\"stylelint\"></a>stylelint</h2><ol>\n<li>Npm 安装如下包</li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;stylelint&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^14.3.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;stylelint-config-prettier&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^9.0.3&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;stylelint-config-recess-order&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^3.0.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;stylelint-config-recommended-vue&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^1.1.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;stylelint-config-standard&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^24.0.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;stylelint-config-standard-scss&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^3.0.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;stylelint-scss&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^4.1.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;stylelint-webpack-plugin&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^2.3.2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>新建stylelint.config.js 文件并配置如下:</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">defaultSeverity</span>: <span class=\"string\">&#x27;warning&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">extends</span>: [<span class=\"string\">&#x27;stylelint-config-standard-scss&#x27;</span>, <span class=\"string\">&#x27;stylelint-config-recommended-vue/scss&#x27;</span>, <span class=\"string\">&#x27;stylelint-config-prettier&#x27;</span>, <span class=\"string\">&#x27;stylelint-config-recess-order&#x27;</span>],</span><br><span class=\"line\">  <span class=\"attr\">rules</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;selector-class-pattern&#x27;</span>: [</span><br><span class=\"line\">      <span class=\"comment\">// 命名规范 - kebab-case</span></span><br><span class=\"line\">      <span class=\"string\">&#x27;^([a-z][a-z0-9]*)(-+[a-z0-9]+)*$&#x27;</span>,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">message</span>: <span class=\"string\">&#x27;Expected class selector to be kebab-case&#x27;</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">&#x27;rule-empty-line-before&#x27;</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;declaration-block-no-duplicate-properties&#x27;</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 禁止声明重复属性</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;no-descending-specificity&#x27;</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 禁止在具有较高优先级的选择器后出现被其覆盖的较低优先级的选择器。</span></span><br><span class=\"line\">    <span class=\"comment\">// 最多允许嵌套20层，去掉默认的最多2层</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;max-nesting-depth&#x27;</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 颜色值要小写</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;color-hex-case&#x27;</span>: <span class=\"string\">&#x27;lower&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 颜色值能短则短</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;color-hex-length&#x27;</span>: <span class=\"string\">&#x27;short&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">ignoreFiles</span>: [<span class=\"string\">&#x27;**/*.js&#x27;</span>, <span class=\"string\">&#x27;**/*.jsx&#x27;</span>, <span class=\"string\">&#x27;**/*.tsx&#x27;</span>, <span class=\"string\">&#x27;**/*.ts&#x27;</span>],</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>webpack StyleLintPlugin 配置如下：</li>\n</ol>\n<p>​\t\t</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">StyleLintPlugin</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">files</span>: [<span class=\"string\">&#x27;src/*.(s(c|a)ss|css|less|vue)&#x27;</span>],</span><br><span class=\"line\">        <span class=\"attr\">extensions</span>: [<span class=\"string\">&#x27;ccs&#x27;</span>, <span class=\"string\">&#x27;scss&#x27;</span>, <span class=\"string\">&#x27;sass&#x27;</span>, <span class=\"string\">&#x27;less&#x27;</span>, <span class=\"string\">&#x27;vue&#x27;</span>, <span class=\"string\">&#x27;html&#x27;</span>],</span><br><span class=\"line\">        <span class=\"attr\">fix</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">cache</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"attr\">emitErrors</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">failOnError</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      &#125;),</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<ol start=\"4\">\n<li>vscode 配置如下</li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"><span class=\"attr\">&quot;stylelint.validate&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;vue&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;less&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;css&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;html&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;scss&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;sass&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;editor.codeActionsOnSave&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;source.fixAll.stylelint&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"commitlint-husky-lint-staged\"><a href=\"#commitlint-husky-lint-staged\" class=\"headerlink\" title=\"commitlint husky lint-staged\"></a>commitlint husky lint-staged</h2><ol>\n<li><blockquote>\n<p>npm install –save-dev @commitlint&#x2F;config-conventional @commitlint&#x2F;cli  husky lint-staged</p>\n</blockquote>\n</li>\n<li><p>commitlint.config.js 配置如下:</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * init: 项目初始化</span></span><br><span class=\"line\"><span class=\"comment\"> * feat：新功能</span></span><br><span class=\"line\"><span class=\"comment\"> * fix：修补某功能的bug</span></span><br><span class=\"line\"><span class=\"comment\"> * refactor：重构某个功能</span></span><br><span class=\"line\"><span class=\"comment\"> * perf: 优化构建工具或运行时性能</span></span><br><span class=\"line\"><span class=\"comment\"> * style：仅样式改动</span></span><br><span class=\"line\"><span class=\"comment\"> * docs：仅文档新增/改动</span></span><br><span class=\"line\"><span class=\"comment\"> * chore：构建过程或辅助工具的变动</span></span><br><span class=\"line\"><span class=\"comment\"> * ci: ci配置相关，docker等配置文件修改</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">extends</span>: [<span class=\"string\">&#x27;@commitlint/config-conventional&#x27;</span>],</span><br><span class=\"line\">  <span class=\"attr\">rules</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;type-enum&#x27;</span>: [<span class=\"number\">2</span>, <span class=\"string\">&#x27;always&#x27;</span>, [<span class=\"string\">&#x27;init&#x27;</span>, <span class=\"string\">&#x27;feat&#x27;</span>, <span class=\"string\">&#x27;fix&#x27;</span>, <span class=\"string\">&#x27;refactor&#x27;</span>, <span class=\"string\">&#x27;perf&#x27;</span>, <span class=\"string\">&#x27;style&#x27;</span>, <span class=\"string\">&#x27;docs&#x27;</span>, <span class=\"string\">&#x27;chore&#x27;</span>, <span class=\"string\">&#x27;ci&#x27;</span>]],</span><br><span class=\"line\">    <span class=\"string\">&#x27;type-case&#x27;</span>: [<span class=\"number\">0</span>],</span><br><span class=\"line\">    <span class=\"string\">&#x27;type-empty&#x27;</span>: [<span class=\"number\">0</span>],</span><br><span class=\"line\">    <span class=\"string\">&#x27;scope-empty&#x27;</span>: [<span class=\"number\">0</span>],</span><br><span class=\"line\">    <span class=\"string\">&#x27;scope-case&#x27;</span>: [<span class=\"number\">0</span>],</span><br><span class=\"line\">    <span class=\"string\">&#x27;subject-full-stop&#x27;</span>: [<span class=\"number\">0</span>, <span class=\"string\">&#x27;never&#x27;</span>],</span><br><span class=\"line\">    <span class=\"string\">&#x27;subject-case&#x27;</span>: [<span class=\"number\">0</span>, <span class=\"string\">&#x27;never&#x27;</span>],</span><br><span class=\"line\">    <span class=\"string\">&#x27;header-max-length&#x27;</span>: [<span class=\"number\">0</span>, <span class=\"string\">&#x27;always&#x27;</span>, <span class=\"number\">72</span>],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>husky lint-staged</li>\n</ol>\n<blockquote>\n<p>npm install husky lint-staged prettier –save-dev</p>\n<p>npx husky install  (启用)</p>\n<p>“prepare”: “husky install” 【install后自动启用，这个配置在package.json中，否则下次新拉代码还需要手动启用】</p>\n<p>npx husky add .husky&#x2F;pre-commit “npm run lint-staged” 【创建一个hook，执行完根目录回生成一个.husky目录】</p>\n</blockquote>\n<p>​\t</p>\n<ol start=\"4\">\n<li>husky 和 lint-staged 配置如下</li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;husky&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;hooks&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;pre-commit&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;npm run lint-staged&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;lint-staged&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;**/*.vue&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">      <span class=\"string\">&quot;npm run lint:fix&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;npm run lint:style:fix&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;**/*.&#123;js,jsx,ts,tsx&#125;&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">      <span class=\"string\">&quot;npm run lint:fix&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;**/*.&#123;htm,html,css,sss,less,scss,sass&#125;&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">      <span class=\"string\">&quot;npm run lint:style:fix&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;git add&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"npm-脚本部分配置如下\"><a href=\"#npm-脚本部分配置如下\" class=\"headerlink\" title=\"npm 脚本部分配置如下:\"></a>npm 脚本部分配置如下:</h2><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">   <span class=\"attr\">&quot;lint&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;eslint --ext .js,.vue src --ignore-path .gitignore .&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;lint:fix&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;eslint --fix --ext .js,.vue --format=pretty ./src&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;lint:prettier&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;prettier --check \\&quot;**/*\\&quot; --end-of-line auto&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;lint:style&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;stylelint src/**/*.&#123;vue,css,sass,scss,less&#125; --allow-empty-input&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;lint:style:fix&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;stylelint src/**/*.&#123;vue,css,sass,scss,less&#125; --fix&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;lint-staged&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;lint-staged&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;prepare&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;husky install&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"用到的部分依赖及版本如下：\"><a href=\"#用到的部分依赖及版本如下：\" class=\"headerlink\" title=\"用到的部分依赖及版本如下：\"></a>用到的部分依赖及版本如下：</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;devDependencies&quot;: &#123;</span><br><span class=\"line\">\t\t&quot;@commitlint/cli&quot;: &quot;^16.1.0&quot;,</span><br><span class=\"line\">    &quot;@commitlint/config-conventional&quot;: &quot;^16.0.0&quot;,</span><br><span class=\"line\">     &quot;eslint&quot;: &quot;^7.29.0&quot;,</span><br><span class=\"line\">    &quot;eslint-config-prettier&quot;: &quot;^8.3.0&quot;,</span><br><span class=\"line\">    &quot;eslint-formatter-pretty&quot;: &quot;^4.1.0&quot;,</span><br><span class=\"line\">    &quot;eslint-plugin-prettier&quot;: &quot;^4.0.0&quot;,</span><br><span class=\"line\">    &quot;eslint-plugin-vue&quot;: &quot;6.2.2&quot;,</span><br><span class=\"line\">    &quot;husky&quot;: &quot;^7.0.4&quot;,</span><br><span class=\"line\">    &quot;lint-staged&quot;: &quot;^12.3.2&quot;,</span><br><span class=\"line\">    &quot;postcss&quot;: &quot;^8.4.5&quot;,</span><br><span class=\"line\">    &quot;postcss-html&quot;: &quot;^1.3.0&quot;,</span><br><span class=\"line\">    &quot;postcss-scss&quot;: &quot;^4.0.3&quot;,</span><br><span class=\"line\">    &quot;prettier&quot;: &quot;2.5.1&quot;,</span><br><span class=\"line\">    &quot;stylelint&quot;: &quot;^14.3.0&quot;,</span><br><span class=\"line\">    &quot;stylelint-config-prettier&quot;: &quot;^9.0.3&quot;,</span><br><span class=\"line\">    &quot;stylelint-config-recess-order&quot;: &quot;^3.0.0&quot;,</span><br><span class=\"line\">    &quot;stylelint-config-recommended-vue&quot;: &quot;^1.1.0&quot;,</span><br><span class=\"line\">    &quot;stylelint-config-standard&quot;: &quot;^24.0.0&quot;,</span><br><span class=\"line\">    &quot;stylelint-config-standard-scss&quot;: &quot;^3.0.0&quot;,</span><br><span class=\"line\">    &quot;stylelint-scss&quot;: &quot;^4.1.0&quot;,</span><br><span class=\"line\">    &quot;stylelint-webpack-plugin&quot;: &quot;^2.3.2&quot;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h1 id=\"代码、项目规范，配置-eslint、prettier、stylelint、commitlint\"><a href=\"#代码、项目规范，配置-eslint、prettier、stylelint、commitlint\" class=\"headerlink\" title=\"代码、项目规范，配置 eslint、prettier、stylelint、commitlint\"></a>代码、项目规范，配置 eslint、prettier、stylelint、commitlint</h1><blockquote>\n<p>为了规范项目代码，统一代码风格，同时提升代码的提交规范，使用 <strong>eslint</strong> 进行代码规范化的检测和自动修改；使用  <strong>prettier</strong> 统一代码风格和自动格式化；使用  <strong>stylelint</strong> 统一 css 风格和自动格式化；使用 <strong>commitlint</strong>、<strong>lint-staged</strong>、<strong>husky</strong> 进行提交检查和提交自动格式化。 同时为了消除不同使用者 vscode 的差异，提供了 .vscode – setting.json 的配置.</p>\n</blockquote>","more":"<h2 id=\"Eslint-prettier-vscode-配置\"><a href=\"#Eslint-prettier-vscode-配置\" class=\"headerlink\" title=\"Eslint\\prettier\\vscode 配置\"></a>Eslint\\prettier\\vscode 配置</h2><ol>\n<li>.vscode 配置:</li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;files.associations&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;*.vue&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vue&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;editor.formatOnSave&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span> <span class=\"comment\">// prettier保存格式化</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;[javascript]&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;editor.defaultFormatter&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;[json]&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;editor.defaultFormatter&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;[html]&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;editor.defaultFormatter&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;[jsonc]&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;editor.defaultFormatter&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;[vue]&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;editor.defaultFormatter&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;octref.vetur&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"comment\">// vetur 配置</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;vetur.validation.template&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;vetur.format.defaultFormatter.html&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;prettyhtml&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;vetur.format.defaultFormatter.css&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;prettier&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;vetur.format.defaultFormatter.postcss&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;prettier&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;vetur.format.defaultFormatter.scss&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;prettier&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;vetur.format.defaultFormatter.less&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;prettier&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;vetur.format.defaultFormatter.stylus&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;stylus-supremacy&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;vetur.format.defaultFormatter.sass&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;sass-formatter&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;vetur.format.defaultFormatter.js&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;prettier-eslint&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;vetur.format.defaultFormatter.ts&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vscode-typescript&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;vetur.format.options.tabSize&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;vetur.format.defaultFormatterOptions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">   <span class=\"comment\">// &quot;js-beautify-html&quot;: &#123;</span></span><br><span class=\"line\">   <span class=\"comment\">//   &quot;wrap_attributes&quot;: &quot;force-expand-multiline&quot;</span></span><br><span class=\"line\">   <span class=\"comment\">// &#125;,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;prettyhtml&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;printWidth&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">150</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;singleQuote&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;wrapAttributes&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;sortAttributes&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;prettier&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;semi&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;singleQuote&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;prettier.vueIndentScriptAndStyle&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"comment\">// eslint扩展设置</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;editor.codeActionsOnSave&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;source.fixAll.eslint&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;eslint.options&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;extensions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;.js&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;.vue&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;eslint.validate&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;javascript&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;javascriptreact&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;html&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;typescript&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;typescriptreact&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;vue&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>安装以下npm包</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev eslint@7.28.x prettier eslint-config-prettier eslint-plugin-prettier eslint-formatter-pretty</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Tips: </p>\n<p>eslant 要求版本7.28以上，eslint-config-prettier eslint-plugin-prettier用于解决prettier和eslint规则的冲突.</p>\n<p>eslint-formatter-pretty （用于命令行美化）</p>\n</blockquote>\n<ol start=\"3\">\n<li>.eslintrc 配置如下</li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  root<span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  parserOptions<span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    parser<span class=\"punctuation\">:</span> &#x27;babel-eslint&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">    sourceType<span class=\"punctuation\">:</span> &#x27;module&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">    ecmaVersion<span class=\"punctuation\">:</span> <span class=\"number\">2020</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  env<span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    browser<span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    node<span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    es6<span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  extends<span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    &#x27;plugin<span class=\"punctuation\">:</span>vue/recommended&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">    &#x27;eslint<span class=\"punctuation\">:</span>recommended&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">    &#x27;plugin<span class=\"punctuation\">:</span>prettier/recommended&#x27;<span class=\"punctuation\">,</span> <span class=\"comment\">// 解决prettier和eslint的冲突</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span> </span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>prettier和eslint存在部分冲突的规则， 通过 eslint-config-prettier eslint-plugin-prettier 已经 能解决大部分冲突，剩下的比如  “singleQuote”、”semi” 手动配置 eslint 就能解决</p>\n<p>配置的原则就是 eslint 负责代码检查和自动修复，prettier 负责自动格式化 </p>\n</blockquote>\n<h2 id=\"stylelint\"><a href=\"#stylelint\" class=\"headerlink\" title=\"stylelint\"></a>stylelint</h2><ol>\n<li>Npm 安装如下包</li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;stylelint&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^14.3.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;stylelint-config-prettier&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^9.0.3&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;stylelint-config-recess-order&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^3.0.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;stylelint-config-recommended-vue&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^1.1.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;stylelint-config-standard&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^24.0.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;stylelint-config-standard-scss&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^3.0.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;stylelint-scss&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^4.1.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;stylelint-webpack-plugin&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^2.3.2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>新建stylelint.config.js 文件并配置如下:</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">defaultSeverity</span>: <span class=\"string\">&#x27;warning&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">extends</span>: [<span class=\"string\">&#x27;stylelint-config-standard-scss&#x27;</span>, <span class=\"string\">&#x27;stylelint-config-recommended-vue/scss&#x27;</span>, <span class=\"string\">&#x27;stylelint-config-prettier&#x27;</span>, <span class=\"string\">&#x27;stylelint-config-recess-order&#x27;</span>],</span><br><span class=\"line\">  <span class=\"attr\">rules</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;selector-class-pattern&#x27;</span>: [</span><br><span class=\"line\">      <span class=\"comment\">// 命名规范 - kebab-case</span></span><br><span class=\"line\">      <span class=\"string\">&#x27;^([a-z][a-z0-9]*)(-+[a-z0-9]+)*$&#x27;</span>,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">message</span>: <span class=\"string\">&#x27;Expected class selector to be kebab-case&#x27;</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">&#x27;rule-empty-line-before&#x27;</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;declaration-block-no-duplicate-properties&#x27;</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 禁止声明重复属性</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;no-descending-specificity&#x27;</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 禁止在具有较高优先级的选择器后出现被其覆盖的较低优先级的选择器。</span></span><br><span class=\"line\">    <span class=\"comment\">// 最多允许嵌套20层，去掉默认的最多2层</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;max-nesting-depth&#x27;</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 颜色值要小写</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;color-hex-case&#x27;</span>: <span class=\"string\">&#x27;lower&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 颜色值能短则短</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;color-hex-length&#x27;</span>: <span class=\"string\">&#x27;short&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">ignoreFiles</span>: [<span class=\"string\">&#x27;**/*.js&#x27;</span>, <span class=\"string\">&#x27;**/*.jsx&#x27;</span>, <span class=\"string\">&#x27;**/*.tsx&#x27;</span>, <span class=\"string\">&#x27;**/*.ts&#x27;</span>],</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>webpack StyleLintPlugin 配置如下：</li>\n</ol>\n<p>​\t\t</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">StyleLintPlugin</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">files</span>: [<span class=\"string\">&#x27;src/*.(s(c|a)ss|css|less|vue)&#x27;</span>],</span><br><span class=\"line\">        <span class=\"attr\">extensions</span>: [<span class=\"string\">&#x27;ccs&#x27;</span>, <span class=\"string\">&#x27;scss&#x27;</span>, <span class=\"string\">&#x27;sass&#x27;</span>, <span class=\"string\">&#x27;less&#x27;</span>, <span class=\"string\">&#x27;vue&#x27;</span>, <span class=\"string\">&#x27;html&#x27;</span>],</span><br><span class=\"line\">        <span class=\"attr\">fix</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">cache</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"attr\">emitErrors</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">failOnError</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      &#125;),</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<ol start=\"4\">\n<li>vscode 配置如下</li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"><span class=\"attr\">&quot;stylelint.validate&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;vue&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;less&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;css&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;html&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;scss&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;sass&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;editor.codeActionsOnSave&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;source.fixAll.stylelint&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"commitlint-husky-lint-staged\"><a href=\"#commitlint-husky-lint-staged\" class=\"headerlink\" title=\"commitlint husky lint-staged\"></a>commitlint husky lint-staged</h2><ol>\n<li><blockquote>\n<p>npm install –save-dev @commitlint&#x2F;config-conventional @commitlint&#x2F;cli  husky lint-staged</p>\n</blockquote>\n</li>\n<li><p>commitlint.config.js 配置如下:</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * init: 项目初始化</span></span><br><span class=\"line\"><span class=\"comment\"> * feat：新功能</span></span><br><span class=\"line\"><span class=\"comment\"> * fix：修补某功能的bug</span></span><br><span class=\"line\"><span class=\"comment\"> * refactor：重构某个功能</span></span><br><span class=\"line\"><span class=\"comment\"> * perf: 优化构建工具或运行时性能</span></span><br><span class=\"line\"><span class=\"comment\"> * style：仅样式改动</span></span><br><span class=\"line\"><span class=\"comment\"> * docs：仅文档新增/改动</span></span><br><span class=\"line\"><span class=\"comment\"> * chore：构建过程或辅助工具的变动</span></span><br><span class=\"line\"><span class=\"comment\"> * ci: ci配置相关，docker等配置文件修改</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">extends</span>: [<span class=\"string\">&#x27;@commitlint/config-conventional&#x27;</span>],</span><br><span class=\"line\">  <span class=\"attr\">rules</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;type-enum&#x27;</span>: [<span class=\"number\">2</span>, <span class=\"string\">&#x27;always&#x27;</span>, [<span class=\"string\">&#x27;init&#x27;</span>, <span class=\"string\">&#x27;feat&#x27;</span>, <span class=\"string\">&#x27;fix&#x27;</span>, <span class=\"string\">&#x27;refactor&#x27;</span>, <span class=\"string\">&#x27;perf&#x27;</span>, <span class=\"string\">&#x27;style&#x27;</span>, <span class=\"string\">&#x27;docs&#x27;</span>, <span class=\"string\">&#x27;chore&#x27;</span>, <span class=\"string\">&#x27;ci&#x27;</span>]],</span><br><span class=\"line\">    <span class=\"string\">&#x27;type-case&#x27;</span>: [<span class=\"number\">0</span>],</span><br><span class=\"line\">    <span class=\"string\">&#x27;type-empty&#x27;</span>: [<span class=\"number\">0</span>],</span><br><span class=\"line\">    <span class=\"string\">&#x27;scope-empty&#x27;</span>: [<span class=\"number\">0</span>],</span><br><span class=\"line\">    <span class=\"string\">&#x27;scope-case&#x27;</span>: [<span class=\"number\">0</span>],</span><br><span class=\"line\">    <span class=\"string\">&#x27;subject-full-stop&#x27;</span>: [<span class=\"number\">0</span>, <span class=\"string\">&#x27;never&#x27;</span>],</span><br><span class=\"line\">    <span class=\"string\">&#x27;subject-case&#x27;</span>: [<span class=\"number\">0</span>, <span class=\"string\">&#x27;never&#x27;</span>],</span><br><span class=\"line\">    <span class=\"string\">&#x27;header-max-length&#x27;</span>: [<span class=\"number\">0</span>, <span class=\"string\">&#x27;always&#x27;</span>, <span class=\"number\">72</span>],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>husky lint-staged</li>\n</ol>\n<blockquote>\n<p>npm install husky lint-staged prettier –save-dev</p>\n<p>npx husky install  (启用)</p>\n<p>“prepare”: “husky install” 【install后自动启用，这个配置在package.json中，否则下次新拉代码还需要手动启用】</p>\n<p>npx husky add .husky&#x2F;pre-commit “npm run lint-staged” 【创建一个hook，执行完根目录回生成一个.husky目录】</p>\n</blockquote>\n<p>​\t</p>\n<ol start=\"4\">\n<li>husky 和 lint-staged 配置如下</li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;husky&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;hooks&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;pre-commit&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;npm run lint-staged&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;lint-staged&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;**/*.vue&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">      <span class=\"string\">&quot;npm run lint:fix&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;npm run lint:style:fix&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;**/*.&#123;js,jsx,ts,tsx&#125;&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">      <span class=\"string\">&quot;npm run lint:fix&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;**/*.&#123;htm,html,css,sss,less,scss,sass&#125;&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">      <span class=\"string\">&quot;npm run lint:style:fix&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;git add&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"npm-脚本部分配置如下\"><a href=\"#npm-脚本部分配置如下\" class=\"headerlink\" title=\"npm 脚本部分配置如下:\"></a>npm 脚本部分配置如下:</h2><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">   <span class=\"attr\">&quot;lint&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;eslint --ext .js,.vue src --ignore-path .gitignore .&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;lint:fix&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;eslint --fix --ext .js,.vue --format=pretty ./src&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;lint:prettier&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;prettier --check \\&quot;**/*\\&quot; --end-of-line auto&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;lint:style&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;stylelint src/**/*.&#123;vue,css,sass,scss,less&#125; --allow-empty-input&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;lint:style:fix&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;stylelint src/**/*.&#123;vue,css,sass,scss,less&#125; --fix&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;lint-staged&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;lint-staged&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;prepare&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;husky install&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"用到的部分依赖及版本如下：\"><a href=\"#用到的部分依赖及版本如下：\" class=\"headerlink\" title=\"用到的部分依赖及版本如下：\"></a>用到的部分依赖及版本如下：</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;devDependencies&quot;: &#123;</span><br><span class=\"line\">\t\t&quot;@commitlint/cli&quot;: &quot;^16.1.0&quot;,</span><br><span class=\"line\">    &quot;@commitlint/config-conventional&quot;: &quot;^16.0.0&quot;,</span><br><span class=\"line\">     &quot;eslint&quot;: &quot;^7.29.0&quot;,</span><br><span class=\"line\">    &quot;eslint-config-prettier&quot;: &quot;^8.3.0&quot;,</span><br><span class=\"line\">    &quot;eslint-formatter-pretty&quot;: &quot;^4.1.0&quot;,</span><br><span class=\"line\">    &quot;eslint-plugin-prettier&quot;: &quot;^4.0.0&quot;,</span><br><span class=\"line\">    &quot;eslint-plugin-vue&quot;: &quot;6.2.2&quot;,</span><br><span class=\"line\">    &quot;husky&quot;: &quot;^7.0.4&quot;,</span><br><span class=\"line\">    &quot;lint-staged&quot;: &quot;^12.3.2&quot;,</span><br><span class=\"line\">    &quot;postcss&quot;: &quot;^8.4.5&quot;,</span><br><span class=\"line\">    &quot;postcss-html&quot;: &quot;^1.3.0&quot;,</span><br><span class=\"line\">    &quot;postcss-scss&quot;: &quot;^4.0.3&quot;,</span><br><span class=\"line\">    &quot;prettier&quot;: &quot;2.5.1&quot;,</span><br><span class=\"line\">    &quot;stylelint&quot;: &quot;^14.3.0&quot;,</span><br><span class=\"line\">    &quot;stylelint-config-prettier&quot;: &quot;^9.0.3&quot;,</span><br><span class=\"line\">    &quot;stylelint-config-recess-order&quot;: &quot;^3.0.0&quot;,</span><br><span class=\"line\">    &quot;stylelint-config-recommended-vue&quot;: &quot;^1.1.0&quot;,</span><br><span class=\"line\">    &quot;stylelint-config-standard&quot;: &quot;^24.0.0&quot;,</span><br><span class=\"line\">    &quot;stylelint-config-standard-scss&quot;: &quot;^3.0.0&quot;,</span><br><span class=\"line\">    &quot;stylelint-scss&quot;: &quot;^4.1.0&quot;,</span><br><span class=\"line\">    &quot;stylelint-webpack-plugin&quot;: &quot;^2.3.2&quot;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"react hooks知识点","date":"2020-07-01T15:48:23.000Z","_content":"\n## react  知识点(hooks, class)\n\n\n\n### 1. usecallback\n\n\n\n> 缓存函数，依赖项变化后再重新生成.\n>\n> [`useCallback`](https://react.docschina.org/docs/hooks-reference.html#usecallback) Hook 允许你在重新渲染之间保持对相同的回调引用以使得 `shouldComponentUpdate` 继续工作\n>\n> 当缓存的函数依赖项频繁变动的话，可以采用useRef的形式，在 `xxxRef.current` 上把所依赖的变量写入xxxref， usecallback依赖 xxxRef， 因为xxxref只会创建一次，且xxxref.current始终是最新的，所以可以解决依赖项频繁变更的问题并且可以完成函数的缓存。\n\n\n\n<!-- more -->\n\n### 2.memo\n\n\n\n> 子组件 props不变的情况下，父组件重新渲染子组件并**不会**重新渲染\n\n\n\n\n\n### 3. useMemo\n\n\n\n> 缓存值，当依赖项变化时，才会重新计算生成最新值\n\n\n\n\n\n### 4.PureComponent\n\n\n\n> 同memo， 通过class继承的方式实现子组件**不因为**父组件更新而进行不必要的渲染。，只依赖props\n\n\n\n#### 为什么不每个组件都用memo或者pureComponent包装呢？\n\n​\treact决定组件是否更新是根据 **前后props** 来比较的，但比较也仅仅只是**潜比较** ， 只能比较值的不同，如果是引用，比如对象、数组等就无能为力老。 所以，如果props是引用类型，父组件每次更新，传递的引用对象都是新生成的，地址空间已经变了，所以子组件经过潜比较判断前后的prop是不相等的，就会造成子组件重新渲染。 同样， 传递的箭头函数(匿名函数)也会造成相同的后果。 那我们如何规避这种情况呢？\n\n* 拆分props传入的应用对象，拆分为单个的值\n* 函数传入唯一声明的函数引用。 比如在class中传入 <code> xxxxfn.bind(this)</code>的函数\n* 控制更新。 使用class的 `shouldComponentUpdate(prevProps, prevState)`  或者memo的 第二个参数来对前后props进行更深层次的比较，从而控制更新。\n\n\n\n### 5. useReduce\n\n\n\n> [`useReducer`](https://react.docschina.org/docs/hooks-reference.html#usereducer) Hook 减少了对深层传递回调的依赖，\n\n\n\n\n\n\n\n\n\n### 6. useContext\n\n\n\n> 用于解决组件深层次嵌套的通信问题\n\n\n\n","source":"_posts/react  知识点.md","raw":"---\ntitle: react hooks知识点\ndate: 2020-07-01 23:48:23\ncategories:\n - javascript\n - react\ntags:\n - react\n---\n\n## react  知识点(hooks, class)\n\n\n\n### 1. usecallback\n\n\n\n> 缓存函数，依赖项变化后再重新生成.\n>\n> [`useCallback`](https://react.docschina.org/docs/hooks-reference.html#usecallback) Hook 允许你在重新渲染之间保持对相同的回调引用以使得 `shouldComponentUpdate` 继续工作\n>\n> 当缓存的函数依赖项频繁变动的话，可以采用useRef的形式，在 `xxxRef.current` 上把所依赖的变量写入xxxref， usecallback依赖 xxxRef， 因为xxxref只会创建一次，且xxxref.current始终是最新的，所以可以解决依赖项频繁变更的问题并且可以完成函数的缓存。\n\n\n\n<!-- more -->\n\n### 2.memo\n\n\n\n> 子组件 props不变的情况下，父组件重新渲染子组件并**不会**重新渲染\n\n\n\n\n\n### 3. useMemo\n\n\n\n> 缓存值，当依赖项变化时，才会重新计算生成最新值\n\n\n\n\n\n### 4.PureComponent\n\n\n\n> 同memo， 通过class继承的方式实现子组件**不因为**父组件更新而进行不必要的渲染。，只依赖props\n\n\n\n#### 为什么不每个组件都用memo或者pureComponent包装呢？\n\n​\treact决定组件是否更新是根据 **前后props** 来比较的，但比较也仅仅只是**潜比较** ， 只能比较值的不同，如果是引用，比如对象、数组等就无能为力老。 所以，如果props是引用类型，父组件每次更新，传递的引用对象都是新生成的，地址空间已经变了，所以子组件经过潜比较判断前后的prop是不相等的，就会造成子组件重新渲染。 同样， 传递的箭头函数(匿名函数)也会造成相同的后果。 那我们如何规避这种情况呢？\n\n* 拆分props传入的应用对象，拆分为单个的值\n* 函数传入唯一声明的函数引用。 比如在class中传入 <code> xxxxfn.bind(this)</code>的函数\n* 控制更新。 使用class的 `shouldComponentUpdate(prevProps, prevState)`  或者memo的 第二个参数来对前后props进行更深层次的比较，从而控制更新。\n\n\n\n### 5. useReduce\n\n\n\n> [`useReducer`](https://react.docschina.org/docs/hooks-reference.html#usereducer) Hook 减少了对深层传递回调的依赖，\n\n\n\n\n\n\n\n\n\n### 6. useContext\n\n\n\n> 用于解决组件深层次嵌套的通信问题\n\n\n\n","slug":"react  知识点","published":1,"updated":"2020-07-20T14:58:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqexq6bn000mqn7v6dmm5dps","content":"<h2 id=\"react-知识点-hooks-class\"><a href=\"#react-知识点-hooks-class\" class=\"headerlink\" title=\"react  知识点(hooks, class)\"></a>react  知识点(hooks, class)</h2><h3 id=\"1-usecallback\"><a href=\"#1-usecallback\" class=\"headerlink\" title=\"1. usecallback\"></a>1. usecallback</h3><blockquote>\n<p>缓存函数，依赖项变化后再重新生成.</p>\n<p><a href=\"https://react.docschina.org/docs/hooks-reference.html#usecallback\"><code>useCallback</code></a> Hook 允许你在重新渲染之间保持对相同的回调引用以使得 <code>shouldComponentUpdate</code> 继续工作</p>\n<p>当缓存的函数依赖项频繁变动的话，可以采用useRef的形式，在 <code>xxxRef.current</code> 上把所依赖的变量写入xxxref， usecallback依赖 xxxRef， 因为xxxref只会创建一次，且xxxref.current始终是最新的，所以可以解决依赖项频繁变更的问题并且可以完成函数的缓存。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h3 id=\"2-memo\"><a href=\"#2-memo\" class=\"headerlink\" title=\"2.memo\"></a>2.memo</h3><blockquote>\n<p>子组件 props不变的情况下，父组件重新渲染子组件并<strong>不会</strong>重新渲染</p>\n</blockquote>\n<h3 id=\"3-useMemo\"><a href=\"#3-useMemo\" class=\"headerlink\" title=\"3. useMemo\"></a>3. useMemo</h3><blockquote>\n<p>缓存值，当依赖项变化时，才会重新计算生成最新值</p>\n</blockquote>\n<h3 id=\"4-PureComponent\"><a href=\"#4-PureComponent\" class=\"headerlink\" title=\"4.PureComponent\"></a>4.PureComponent</h3><blockquote>\n<p>同memo， 通过class继承的方式实现子组件<strong>不因为</strong>父组件更新而进行不必要的渲染。，只依赖props</p>\n</blockquote>\n<h4 id=\"为什么不每个组件都用memo或者pureComponent包装呢？\"><a href=\"#为什么不每个组件都用memo或者pureComponent包装呢？\" class=\"headerlink\" title=\"为什么不每个组件都用memo或者pureComponent包装呢？\"></a>为什么不每个组件都用memo或者pureComponent包装呢？</h4><p>​\treact决定组件是否更新是根据 <strong>前后props</strong> 来比较的，但比较也仅仅只是<strong>潜比较</strong> ， 只能比较值的不同，如果是引用，比如对象、数组等就无能为力老。 所以，如果props是引用类型，父组件每次更新，传递的引用对象都是新生成的，地址空间已经变了，所以子组件经过潜比较判断前后的prop是不相等的，就会造成子组件重新渲染。 同样， 传递的箭头函数(匿名函数)也会造成相同的后果。 那我们如何规避这种情况呢？</p>\n<ul>\n<li>拆分props传入的应用对象，拆分为单个的值</li>\n<li>函数传入唯一声明的函数引用。 比如在class中传入 <code> xxxxfn.bind(this)</code>的函数</li>\n<li>控制更新。 使用class的 <code>shouldComponentUpdate(prevProps, prevState)</code>  或者memo的 第二个参数来对前后props进行更深层次的比较，从而控制更新。</li>\n</ul>\n<h3 id=\"5-useReduce\"><a href=\"#5-useReduce\" class=\"headerlink\" title=\"5. useReduce\"></a>5. useReduce</h3><blockquote>\n<p><a href=\"https://react.docschina.org/docs/hooks-reference.html#usereducer\"><code>useReducer</code></a> Hook 减少了对深层传递回调的依赖，</p>\n</blockquote>\n<h3 id=\"6-useContext\"><a href=\"#6-useContext\" class=\"headerlink\" title=\"6. useContext\"></a>6. useContext</h3><blockquote>\n<p>用于解决组件深层次嵌套的通信问题</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h2 id=\"react-知识点-hooks-class\"><a href=\"#react-知识点-hooks-class\" class=\"headerlink\" title=\"react  知识点(hooks, class)\"></a>react  知识点(hooks, class)</h2><h3 id=\"1-usecallback\"><a href=\"#1-usecallback\" class=\"headerlink\" title=\"1. usecallback\"></a>1. usecallback</h3><blockquote>\n<p>缓存函数，依赖项变化后再重新生成.</p>\n<p><a href=\"https://react.docschina.org/docs/hooks-reference.html#usecallback\"><code>useCallback</code></a> Hook 允许你在重新渲染之间保持对相同的回调引用以使得 <code>shouldComponentUpdate</code> 继续工作</p>\n<p>当缓存的函数依赖项频繁变动的话，可以采用useRef的形式，在 <code>xxxRef.current</code> 上把所依赖的变量写入xxxref， usecallback依赖 xxxRef， 因为xxxref只会创建一次，且xxxref.current始终是最新的，所以可以解决依赖项频繁变更的问题并且可以完成函数的缓存。</p>\n</blockquote>","more":"<h3 id=\"2-memo\"><a href=\"#2-memo\" class=\"headerlink\" title=\"2.memo\"></a>2.memo</h3><blockquote>\n<p>子组件 props不变的情况下，父组件重新渲染子组件并<strong>不会</strong>重新渲染</p>\n</blockquote>\n<h3 id=\"3-useMemo\"><a href=\"#3-useMemo\" class=\"headerlink\" title=\"3. useMemo\"></a>3. useMemo</h3><blockquote>\n<p>缓存值，当依赖项变化时，才会重新计算生成最新值</p>\n</blockquote>\n<h3 id=\"4-PureComponent\"><a href=\"#4-PureComponent\" class=\"headerlink\" title=\"4.PureComponent\"></a>4.PureComponent</h3><blockquote>\n<p>同memo， 通过class继承的方式实现子组件<strong>不因为</strong>父组件更新而进行不必要的渲染。，只依赖props</p>\n</blockquote>\n<h4 id=\"为什么不每个组件都用memo或者pureComponent包装呢？\"><a href=\"#为什么不每个组件都用memo或者pureComponent包装呢？\" class=\"headerlink\" title=\"为什么不每个组件都用memo或者pureComponent包装呢？\"></a>为什么不每个组件都用memo或者pureComponent包装呢？</h4><p>​\treact决定组件是否更新是根据 <strong>前后props</strong> 来比较的，但比较也仅仅只是<strong>潜比较</strong> ， 只能比较值的不同，如果是引用，比如对象、数组等就无能为力老。 所以，如果props是引用类型，父组件每次更新，传递的引用对象都是新生成的，地址空间已经变了，所以子组件经过潜比较判断前后的prop是不相等的，就会造成子组件重新渲染。 同样， 传递的箭头函数(匿名函数)也会造成相同的后果。 那我们如何规避这种情况呢？</p>\n<ul>\n<li>拆分props传入的应用对象，拆分为单个的值</li>\n<li>函数传入唯一声明的函数引用。 比如在class中传入 <code> xxxxfn.bind(this)</code>的函数</li>\n<li>控制更新。 使用class的 <code>shouldComponentUpdate(prevProps, prevState)</code>  或者memo的 第二个参数来对前后props进行更深层次的比较，从而控制更新。</li>\n</ul>\n<h3 id=\"5-useReduce\"><a href=\"#5-useReduce\" class=\"headerlink\" title=\"5. useReduce\"></a>5. useReduce</h3><blockquote>\n<p><a href=\"https://react.docschina.org/docs/hooks-reference.html#usereducer\"><code>useReducer</code></a> Hook 减少了对深层传递回调的依赖，</p>\n</blockquote>\n<h3 id=\"6-useContext\"><a href=\"#6-useContext\" class=\"headerlink\" title=\"6. useContext\"></a>6. useContext</h3><blockquote>\n<p>用于解决组件深层次嵌套的通信问题</p>\n</blockquote>"},{"title":"JS   call、apply的使用和剖析","date":"2020-11-04T15:35:23.000Z","_content":"\n# JS   call、apply的使用和剖析\n\n\n\n\n\n## call\n\n\n\n### 用法\n\n```javascript\nlet obj = {name: 'chou'}\n\nlet fn = function(first, last) {\n  console.log(this.name + first + last)\n}\n\nfn.call(obj, 'first', 'last')\t\t// choufirstlast\n\n```\n\n\n\n通过调用call方法，将函数`fn`的this指向传给call的第一个参数`obj`，同时将`call`方法的第二、第三……个参数作为`fn`函数的参数进行传递。 `fn`函数的this会指向obj，这样`this.name`就是obj中的name属性，`fn`的参数也就是call传入的参数。\n\n> 需要注意⚠️：1. 调用call方法后，fn函数会立即执行。\n>\n> ​\t\t\t\t\t\t 2. call方法传入函数参数的方式是通过参数列表传入，与后面apply通过数组方式这点不同。\n\n\n\n### 用途\n\n1. 最常见的用途就是改变调用函数`this`的指向\n2. 立即调用函数 (什么参数都不传)\n3. 借用别的对象的属性或方法\n\n\n\n### 实现\n\n\n\n思路： \n\ncall的原理是改变函数`this`指向，并传入参数，然后立即执行这个函数，我们可以顺着这个思路将要改变`this`指向的函数挂载到要指向的对象上，然后传入参数并执行(因为调用call后会立即执行)。\n\n\n\n```javascript\nFunction.prototype.mycall = function(context) {\n  if (typeof this !== 'function') {\n    throw new TypeError('not funciton')\n  }\n  context = context || window\n  context.fn = this // 要执行的函数 eg: fn.call(this)\n  let arg = [...arguments].slice(1) // call传入的参数 [this,1,2,3,4] ===> [1,2,3,4]\n  let result = context.fn(...arg) // 传入参数给fn，执行函数\n  delete context.fn\n  return result\n}\n\nlet obj = {name: 'chou'}\n\nlet fn = function(first, last) {\n  console.log(this.name + first + last)\n}\n\nfn.mycall(obj, 'first', 'last')\t\t// choufirstlast\n```\n\n\n\n\n\n## apply\n\n\n\n### 用法\n\n*apply的用法和call几乎一摸一样，只是传入参数的方式不一样*\n\n\n\n```javascript\nlet obj = {name: 'chou'}\n\nlet fn = function(first, last) {\n  console.log(this.name + first + last)\n}\n\nfn.apply(obj, ['first', 'last'])\t\t// choufirstlast\n```\n\n\n\n> apply传给函数`fn`参数是通过传入一个数组的方式，其他方面和call一摸一样。  具体解释参考call\n\n\n\n### 用途\n\n1. 最常见的用途就是改变调用函数`this`的指向\n2. 立即调用函数 (什么参数都不传)\n3. 借用别的对象的属性或方法\n\n\n\n### 实现\n\n思路： \n\napply的实现和call处理几乎一样，唯一需要注意的就是参数的处理方式不同，我们只需要针对apply(this, params) 着重`params`的处理就行了。\n\n\n\n```javascript\nFunction.prototype.myapply = function(context) {\n  if (typeof this !== 'function') {\n    throw new TypeError('not funciton')\n  }\n  context = context || window\n  context.fn = this // 要执行的函数 eg: fn.call(this)\n  let arg = [...arguments][1] // call传入的参数 [this, [1,2,3,4]] =====> [1,2,3,4]\n  let result = context.fn(...arg) // 传入参数给fn，执行函数\n  delete context.fn\n  return result\n}\n\nlet obj = {name: 'chou'}\n\nlet fn = function(first, last) {\n  console.log(this.name + first + last)\n}\n\nfn.myapply(obj, ['first', 'last'])\t\t// choufirstlast\n```\n\n\n\n\n\n## 总结\n\n\n\n相同点\n\n* 都是改变函数`this`指向\n* 都是立即执行函数\n\n\n\n不同点\n\n* call 传入参数是通过参数列表方式传入 (`fn.call(this,a1,a2,a3)`) ， apply传入参数是通过数组方式传入 (`fn.apply(this,[a1,a2,a3])`)","source":"_posts/js   Call、Apply的使用和剖析.md","raw":"---\ntitle: JS   call、apply的使用和剖析\ndate: 2020-11-04 23:35:23\ncategories:\n - javascript\ntags:\n - javascript\n---\n\n# JS   call、apply的使用和剖析\n\n\n\n\n\n## call\n\n\n\n### 用法\n\n```javascript\nlet obj = {name: 'chou'}\n\nlet fn = function(first, last) {\n  console.log(this.name + first + last)\n}\n\nfn.call(obj, 'first', 'last')\t\t// choufirstlast\n\n```\n\n\n\n通过调用call方法，将函数`fn`的this指向传给call的第一个参数`obj`，同时将`call`方法的第二、第三……个参数作为`fn`函数的参数进行传递。 `fn`函数的this会指向obj，这样`this.name`就是obj中的name属性，`fn`的参数也就是call传入的参数。\n\n> 需要注意⚠️：1. 调用call方法后，fn函数会立即执行。\n>\n> ​\t\t\t\t\t\t 2. call方法传入函数参数的方式是通过参数列表传入，与后面apply通过数组方式这点不同。\n\n\n\n### 用途\n\n1. 最常见的用途就是改变调用函数`this`的指向\n2. 立即调用函数 (什么参数都不传)\n3. 借用别的对象的属性或方法\n\n\n\n### 实现\n\n\n\n思路： \n\ncall的原理是改变函数`this`指向，并传入参数，然后立即执行这个函数，我们可以顺着这个思路将要改变`this`指向的函数挂载到要指向的对象上，然后传入参数并执行(因为调用call后会立即执行)。\n\n\n\n```javascript\nFunction.prototype.mycall = function(context) {\n  if (typeof this !== 'function') {\n    throw new TypeError('not funciton')\n  }\n  context = context || window\n  context.fn = this // 要执行的函数 eg: fn.call(this)\n  let arg = [...arguments].slice(1) // call传入的参数 [this,1,2,3,4] ===> [1,2,3,4]\n  let result = context.fn(...arg) // 传入参数给fn，执行函数\n  delete context.fn\n  return result\n}\n\nlet obj = {name: 'chou'}\n\nlet fn = function(first, last) {\n  console.log(this.name + first + last)\n}\n\nfn.mycall(obj, 'first', 'last')\t\t// choufirstlast\n```\n\n\n\n\n\n## apply\n\n\n\n### 用法\n\n*apply的用法和call几乎一摸一样，只是传入参数的方式不一样*\n\n\n\n```javascript\nlet obj = {name: 'chou'}\n\nlet fn = function(first, last) {\n  console.log(this.name + first + last)\n}\n\nfn.apply(obj, ['first', 'last'])\t\t// choufirstlast\n```\n\n\n\n> apply传给函数`fn`参数是通过传入一个数组的方式，其他方面和call一摸一样。  具体解释参考call\n\n\n\n### 用途\n\n1. 最常见的用途就是改变调用函数`this`的指向\n2. 立即调用函数 (什么参数都不传)\n3. 借用别的对象的属性或方法\n\n\n\n### 实现\n\n思路： \n\napply的实现和call处理几乎一样，唯一需要注意的就是参数的处理方式不同，我们只需要针对apply(this, params) 着重`params`的处理就行了。\n\n\n\n```javascript\nFunction.prototype.myapply = function(context) {\n  if (typeof this !== 'function') {\n    throw new TypeError('not funciton')\n  }\n  context = context || window\n  context.fn = this // 要执行的函数 eg: fn.call(this)\n  let arg = [...arguments][1] // call传入的参数 [this, [1,2,3,4]] =====> [1,2,3,4]\n  let result = context.fn(...arg) // 传入参数给fn，执行函数\n  delete context.fn\n  return result\n}\n\nlet obj = {name: 'chou'}\n\nlet fn = function(first, last) {\n  console.log(this.name + first + last)\n}\n\nfn.myapply(obj, ['first', 'last'])\t\t// choufirstlast\n```\n\n\n\n\n\n## 总结\n\n\n\n相同点\n\n* 都是改变函数`this`指向\n* 都是立即执行函数\n\n\n\n不同点\n\n* call 传入参数是通过参数列表方式传入 (`fn.call(this,a1,a2,a3)`) ， apply传入参数是通过数组方式传入 (`fn.apply(this,[a1,a2,a3])`)","slug":"js   Call、Apply的使用和剖析","published":1,"updated":"2020-11-04T15:29:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqexq6bo000qqn7v99e08ety","content":"<h1 id=\"JS-call、apply的使用和剖析\"><a href=\"#JS-call、apply的使用和剖析\" class=\"headerlink\" title=\"JS   call、apply的使用和剖析\"></a>JS   call、apply的使用和剖析</h1><h2 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call\"></a>call</h2><h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;chou&#x27;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"keyword\">function</span>(<span class=\"params\">first, last</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> + first + last)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn.<span class=\"title function_\">call</span>(obj, <span class=\"string\">&#x27;first&#x27;</span>, <span class=\"string\">&#x27;last&#x27;</span>)\t\t<span class=\"comment\">// choufirstlast</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>通过调用call方法，将函数<code>fn</code>的this指向传给call的第一个参数<code>obj</code>，同时将<code>call</code>方法的第二、第三……个参数作为<code>fn</code>函数的参数进行传递。 <code>fn</code>函数的this会指向obj，这样<code>this.name</code>就是obj中的name属性，<code>fn</code>的参数也就是call传入的参数。</p>\n<blockquote>\n<p>需要注意⚠️：1. 调用call方法后，fn函数会立即执行。</p>\n<p>​\t\t\t\t\t\t 2. call方法传入函数参数的方式是通过参数列表传入，与后面apply通过数组方式这点不同。</p>\n</blockquote>\n<h3 id=\"用途\"><a href=\"#用途\" class=\"headerlink\" title=\"用途\"></a>用途</h3><ol>\n<li>最常见的用途就是改变调用函数<code>this</code>的指向</li>\n<li>立即调用函数 (什么参数都不传)</li>\n<li>借用别的对象的属性或方法</li>\n</ol>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>思路： </p>\n<p>call的原理是改变函数<code>this</code>指向，并传入参数，然后立即执行这个函数，我们可以顺着这个思路将要改变<code>this</code>指向的函数挂载到要指向的对象上，然后传入参数并执行(因为调用call后会立即执行)。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">mycall</span> = <span class=\"keyword\">function</span>(<span class=\"params\">context</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"variable language_\">this</span> !== <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">&#x27;not funciton&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  context = context || <span class=\"variable language_\">window</span></span><br><span class=\"line\">  context.<span class=\"property\">fn</span> = <span class=\"variable language_\">this</span> <span class=\"comment\">// 要执行的函数 eg: fn.call(this)</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> arg = [...<span class=\"variable language_\">arguments</span>].<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>) <span class=\"comment\">// call传入的参数 [this,1,2,3,4] ===&gt; [1,2,3,4]</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = context.<span class=\"title function_\">fn</span>(...arg) <span class=\"comment\">// 传入参数给fn，执行函数</span></span><br><span class=\"line\">  <span class=\"keyword\">delete</span> context.<span class=\"property\">fn</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;chou&#x27;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"keyword\">function</span>(<span class=\"params\">first, last</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> + first + last)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn.<span class=\"title function_\">mycall</span>(obj, <span class=\"string\">&#x27;first&#x27;</span>, <span class=\"string\">&#x27;last&#x27;</span>)\t\t<span class=\"comment\">// choufirstlast</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply\"></a>apply</h2><h3 id=\"用法-1\"><a href=\"#用法-1\" class=\"headerlink\" title=\"用法\"></a>用法</h3><p><em>apply的用法和call几乎一摸一样，只是传入参数的方式不一样</em></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;chou&#x27;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"keyword\">function</span>(<span class=\"params\">first, last</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> + first + last)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn.<span class=\"title function_\">apply</span>(obj, [<span class=\"string\">&#x27;first&#x27;</span>, <span class=\"string\">&#x27;last&#x27;</span>])\t\t<span class=\"comment\">// choufirstlast</span></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>apply传给函数<code>fn</code>参数是通过传入一个数组的方式，其他方面和call一摸一样。  具体解释参考call</p>\n</blockquote>\n<h3 id=\"用途-1\"><a href=\"#用途-1\" class=\"headerlink\" title=\"用途\"></a>用途</h3><ol>\n<li>最常见的用途就是改变调用函数<code>this</code>的指向</li>\n<li>立即调用函数 (什么参数都不传)</li>\n<li>借用别的对象的属性或方法</li>\n</ol>\n<h3 id=\"实现-1\"><a href=\"#实现-1\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>思路： </p>\n<p>apply的实现和call处理几乎一样，唯一需要注意的就是参数的处理方式不同，我们只需要针对apply(this, params) 着重<code>params</code>的处理就行了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">myapply</span> = <span class=\"keyword\">function</span>(<span class=\"params\">context</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"variable language_\">this</span> !== <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">&#x27;not funciton&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  context = context || <span class=\"variable language_\">window</span></span><br><span class=\"line\">  context.<span class=\"property\">fn</span> = <span class=\"variable language_\">this</span> <span class=\"comment\">// 要执行的函数 eg: fn.call(this)</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> arg = [...<span class=\"variable language_\">arguments</span>][<span class=\"number\">1</span>] <span class=\"comment\">// call传入的参数 [this, [1,2,3,4]] =====&gt; [1,2,3,4]</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = context.<span class=\"title function_\">fn</span>(...arg) <span class=\"comment\">// 传入参数给fn，执行函数</span></span><br><span class=\"line\">  <span class=\"keyword\">delete</span> context.<span class=\"property\">fn</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;chou&#x27;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"keyword\">function</span>(<span class=\"params\">first, last</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> + first + last)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn.<span class=\"title function_\">myapply</span>(obj, [<span class=\"string\">&#x27;first&#x27;</span>, <span class=\"string\">&#x27;last&#x27;</span>])\t\t<span class=\"comment\">// choufirstlast</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>相同点</p>\n<ul>\n<li>都是改变函数<code>this</code>指向</li>\n<li>都是立即执行函数</li>\n</ul>\n<p>不同点</p>\n<ul>\n<li>call 传入参数是通过参数列表方式传入 (<code>fn.call(this,a1,a2,a3)</code>) ， apply传入参数是通过数组方式传入 (<code>fn.apply(this,[a1,a2,a3])</code>)</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JS-call、apply的使用和剖析\"><a href=\"#JS-call、apply的使用和剖析\" class=\"headerlink\" title=\"JS   call、apply的使用和剖析\"></a>JS   call、apply的使用和剖析</h1><h2 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call\"></a>call</h2><h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;chou&#x27;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"keyword\">function</span>(<span class=\"params\">first, last</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> + first + last)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn.<span class=\"title function_\">call</span>(obj, <span class=\"string\">&#x27;first&#x27;</span>, <span class=\"string\">&#x27;last&#x27;</span>)\t\t<span class=\"comment\">// choufirstlast</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>通过调用call方法，将函数<code>fn</code>的this指向传给call的第一个参数<code>obj</code>，同时将<code>call</code>方法的第二、第三……个参数作为<code>fn</code>函数的参数进行传递。 <code>fn</code>函数的this会指向obj，这样<code>this.name</code>就是obj中的name属性，<code>fn</code>的参数也就是call传入的参数。</p>\n<blockquote>\n<p>需要注意⚠️：1. 调用call方法后，fn函数会立即执行。</p>\n<p>​\t\t\t\t\t\t 2. call方法传入函数参数的方式是通过参数列表传入，与后面apply通过数组方式这点不同。</p>\n</blockquote>\n<h3 id=\"用途\"><a href=\"#用途\" class=\"headerlink\" title=\"用途\"></a>用途</h3><ol>\n<li>最常见的用途就是改变调用函数<code>this</code>的指向</li>\n<li>立即调用函数 (什么参数都不传)</li>\n<li>借用别的对象的属性或方法</li>\n</ol>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>思路： </p>\n<p>call的原理是改变函数<code>this</code>指向，并传入参数，然后立即执行这个函数，我们可以顺着这个思路将要改变<code>this</code>指向的函数挂载到要指向的对象上，然后传入参数并执行(因为调用call后会立即执行)。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">mycall</span> = <span class=\"keyword\">function</span>(<span class=\"params\">context</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"variable language_\">this</span> !== <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">&#x27;not funciton&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  context = context || <span class=\"variable language_\">window</span></span><br><span class=\"line\">  context.<span class=\"property\">fn</span> = <span class=\"variable language_\">this</span> <span class=\"comment\">// 要执行的函数 eg: fn.call(this)</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> arg = [...<span class=\"variable language_\">arguments</span>].<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>) <span class=\"comment\">// call传入的参数 [this,1,2,3,4] ===&gt; [1,2,3,4]</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = context.<span class=\"title function_\">fn</span>(...arg) <span class=\"comment\">// 传入参数给fn，执行函数</span></span><br><span class=\"line\">  <span class=\"keyword\">delete</span> context.<span class=\"property\">fn</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;chou&#x27;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"keyword\">function</span>(<span class=\"params\">first, last</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> + first + last)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn.<span class=\"title function_\">mycall</span>(obj, <span class=\"string\">&#x27;first&#x27;</span>, <span class=\"string\">&#x27;last&#x27;</span>)\t\t<span class=\"comment\">// choufirstlast</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply\"></a>apply</h2><h3 id=\"用法-1\"><a href=\"#用法-1\" class=\"headerlink\" title=\"用法\"></a>用法</h3><p><em>apply的用法和call几乎一摸一样，只是传入参数的方式不一样</em></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;chou&#x27;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"keyword\">function</span>(<span class=\"params\">first, last</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> + first + last)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn.<span class=\"title function_\">apply</span>(obj, [<span class=\"string\">&#x27;first&#x27;</span>, <span class=\"string\">&#x27;last&#x27;</span>])\t\t<span class=\"comment\">// choufirstlast</span></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>apply传给函数<code>fn</code>参数是通过传入一个数组的方式，其他方面和call一摸一样。  具体解释参考call</p>\n</blockquote>\n<h3 id=\"用途-1\"><a href=\"#用途-1\" class=\"headerlink\" title=\"用途\"></a>用途</h3><ol>\n<li>最常见的用途就是改变调用函数<code>this</code>的指向</li>\n<li>立即调用函数 (什么参数都不传)</li>\n<li>借用别的对象的属性或方法</li>\n</ol>\n<h3 id=\"实现-1\"><a href=\"#实现-1\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>思路： </p>\n<p>apply的实现和call处理几乎一样，唯一需要注意的就是参数的处理方式不同，我们只需要针对apply(this, params) 着重<code>params</code>的处理就行了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">myapply</span> = <span class=\"keyword\">function</span>(<span class=\"params\">context</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"variable language_\">this</span> !== <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">&#x27;not funciton&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  context = context || <span class=\"variable language_\">window</span></span><br><span class=\"line\">  context.<span class=\"property\">fn</span> = <span class=\"variable language_\">this</span> <span class=\"comment\">// 要执行的函数 eg: fn.call(this)</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> arg = [...<span class=\"variable language_\">arguments</span>][<span class=\"number\">1</span>] <span class=\"comment\">// call传入的参数 [this, [1,2,3,4]] =====&gt; [1,2,3,4]</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = context.<span class=\"title function_\">fn</span>(...arg) <span class=\"comment\">// 传入参数给fn，执行函数</span></span><br><span class=\"line\">  <span class=\"keyword\">delete</span> context.<span class=\"property\">fn</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;chou&#x27;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"keyword\">function</span>(<span class=\"params\">first, last</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> + first + last)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn.<span class=\"title function_\">myapply</span>(obj, [<span class=\"string\">&#x27;first&#x27;</span>, <span class=\"string\">&#x27;last&#x27;</span>])\t\t<span class=\"comment\">// choufirstlast</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>相同点</p>\n<ul>\n<li>都是改变函数<code>this</code>指向</li>\n<li>都是立即执行函数</li>\n</ul>\n<p>不同点</p>\n<ul>\n<li>call 传入参数是通过参数列表方式传入 (<code>fn.call(this,a1,a2,a3)</code>) ， apply传入参数是通过数组方式传入 (<code>fn.apply(this,[a1,a2,a3])</code>)</li>\n</ul>\n"},{"title":"vue-router配置踩坑","date":"2021-03-30T09:04:08.000Z","_content":"\n\n\n# Vue-Router 配置踩坑、探究\n\n\n\n先来看一段 Vue-Router 官方的介绍\n\n![image-20210430153555730](https://tva1.sinaimg.cn/large/008i3skNly1gq1v8sdpisj30m70b9dgt.jpg)\n\n<!-- more -->\n\n![image-20210430153605660](https://tva1.sinaimg.cn/large/008i3skNly1gq1t65okoqj30lb04674g.jpg)\n\n\n\n可以得出以下几个结论：\n\n1. 路由是按照从上到下定义的顺序来进行匹配的，也就是说，当前路由当匹配到路由配置中靠前的路由后就会停止后续路由的匹配，即使后面有相同的路由。\n2.  `path: *`  默认会匹配所有路径，那按照第一点来说，该路由配置只能放在最后，否则会影响路由正常跳转。\n\n\n\n但是！！\n\n在一个项目中，我看到了如下配置\n\n![image-20210430154731056](https://tva1.sinaimg.cn/large/008i3skNly1gq1ti14xcsj31120ootaj.jpg)\n\n？？？ 按照上面分析这样不是会导致所有路由都定位到 404 吗\n\n但是实际我们启动了项目后，路由却能正常跳转，这不是跟上述的规则对不上吗？\n\n\n\n本着探究到底的精神，经过多方询问和查阅，我们在源码中发现了这段代码\n\n![image-20210430164730265](https://tva1.sinaimg.cn/large/008i3skNly1gq1v8odst6j31j60q4gqu.jpg)\n\n\n\n原来源码里面已经帮我们进行了处理，不管如何配置 `path: *` 都会移到最后。\n\n","source":"_posts/vue-router配置踩坑.md","raw":"---\ntitle: vue-router配置踩坑\ndate: 2021-03-30 17:04:08\ntags:\n - Vue\n - Vue-Router\ncategories:\n - javascript\n\n---\n\n\n\n# Vue-Router 配置踩坑、探究\n\n\n\n先来看一段 Vue-Router 官方的介绍\n\n![image-20210430153555730](https://tva1.sinaimg.cn/large/008i3skNly1gq1v8sdpisj30m70b9dgt.jpg)\n\n<!-- more -->\n\n![image-20210430153605660](https://tva1.sinaimg.cn/large/008i3skNly1gq1t65okoqj30lb04674g.jpg)\n\n\n\n可以得出以下几个结论：\n\n1. 路由是按照从上到下定义的顺序来进行匹配的，也就是说，当前路由当匹配到路由配置中靠前的路由后就会停止后续路由的匹配，即使后面有相同的路由。\n2.  `path: *`  默认会匹配所有路径，那按照第一点来说，该路由配置只能放在最后，否则会影响路由正常跳转。\n\n\n\n但是！！\n\n在一个项目中，我看到了如下配置\n\n![image-20210430154731056](https://tva1.sinaimg.cn/large/008i3skNly1gq1ti14xcsj31120ootaj.jpg)\n\n？？？ 按照上面分析这样不是会导致所有路由都定位到 404 吗\n\n但是实际我们启动了项目后，路由却能正常跳转，这不是跟上述的规则对不上吗？\n\n\n\n本着探究到底的精神，经过多方询问和查阅，我们在源码中发现了这段代码\n\n![image-20210430164730265](https://tva1.sinaimg.cn/large/008i3skNly1gq1v8odst6j31j60q4gqu.jpg)\n\n\n\n原来源码里面已经帮我们进行了处理，不管如何配置 `path: *` 都会移到最后。\n\n","slug":"vue-router配置踩坑","published":1,"updated":"2021-04-30T09:08:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqexq6bo000tqn7v3fa51kvw","content":"<h1 id=\"Vue-Router-配置踩坑、探究\"><a href=\"#Vue-Router-配置踩坑、探究\" class=\"headerlink\" title=\"Vue-Router 配置踩坑、探究\"></a>Vue-Router 配置踩坑、探究</h1><p>先来看一段 Vue-Router 官方的介绍</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gq1v8sdpisj30m70b9dgt.jpg\" alt=\"image-20210430153555730\"></p>\n<span id=\"more\"></span>\n\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gq1t65okoqj30lb04674g.jpg\" alt=\"image-20210430153605660\"></p>\n<p>可以得出以下几个结论：</p>\n<ol>\n<li>路由是按照从上到下定义的顺序来进行匹配的，也就是说，当前路由当匹配到路由配置中靠前的路由后就会停止后续路由的匹配，即使后面有相同的路由。</li>\n<li><code>path: *</code>  默认会匹配所有路径，那按照第一点来说，该路由配置只能放在最后，否则会影响路由正常跳转。</li>\n</ol>\n<p>但是！！</p>\n<p>在一个项目中，我看到了如下配置</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gq1ti14xcsj31120ootaj.jpg\" alt=\"image-20210430154731056\"></p>\n<p>？？？ 按照上面分析这样不是会导致所有路由都定位到 404 吗</p>\n<p>但是实际我们启动了项目后，路由却能正常跳转，这不是跟上述的规则对不上吗？</p>\n<p>本着探究到底的精神，经过多方询问和查阅，我们在源码中发现了这段代码</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gq1v8odst6j31j60q4gqu.jpg\" alt=\"image-20210430164730265\"></p>\n<p>原来源码里面已经帮我们进行了处理，不管如何配置 <code>path: *</code> 都会移到最后。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Vue-Router-配置踩坑、探究\"><a href=\"#Vue-Router-配置踩坑、探究\" class=\"headerlink\" title=\"Vue-Router 配置踩坑、探究\"></a>Vue-Router 配置踩坑、探究</h1><p>先来看一段 Vue-Router 官方的介绍</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gq1v8sdpisj30m70b9dgt.jpg\" alt=\"image-20210430153555730\"></p>","more":"<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gq1t65okoqj30lb04674g.jpg\" alt=\"image-20210430153605660\"></p>\n<p>可以得出以下几个结论：</p>\n<ol>\n<li>路由是按照从上到下定义的顺序来进行匹配的，也就是说，当前路由当匹配到路由配置中靠前的路由后就会停止后续路由的匹配，即使后面有相同的路由。</li>\n<li><code>path: *</code>  默认会匹配所有路径，那按照第一点来说，该路由配置只能放在最后，否则会影响路由正常跳转。</li>\n</ol>\n<p>但是！！</p>\n<p>在一个项目中，我看到了如下配置</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gq1ti14xcsj31120ootaj.jpg\" alt=\"image-20210430154731056\"></p>\n<p>？？？ 按照上面分析这样不是会导致所有路由都定位到 404 吗</p>\n<p>但是实际我们启动了项目后，路由却能正常跳转，这不是跟上述的规则对不上吗？</p>\n<p>本着探究到底的精神，经过多方询问和查阅，我们在源码中发现了这段代码</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gq1v8odst6j31j60q4gqu.jpg\" alt=\"image-20210430164730265\"></p>\n<p>原来源码里面已经帮我们进行了处理，不管如何配置 <code>path: *</code> 都会移到最后。</p>"},{"title":"不使用 + 、-求两个数的和 （含符号）","date":"2020-06-18T16:11:23.000Z","_content":"\n\n\n#  不使用 + 、-求两个数的和 （含符号）\n\n\n\n**首先想到用位运算符来处理**\n\n\n\n* ^ 异或   可以理解为不进位的加法  如:  0010 ^ 0101 = 0111   0 + 0 = 0  | 1+1 = 0 | 1 + 0 = 1\n* & 按位与   \n* << 按位左移 \n\n\n\n### 分析： \n\n1. 既然 ^ 异或可以得到不进位得值，那么再通过 & 按位与取得需要进位的位， 再 << 按位左移进位就可以取得进位的值\n2. 将 **没进位的和** ^  **进位**  \n3. 接着再进行以上的操作，**没进位的和** & **进位**     直到 & 的值为0时就代表没有进位了， 就返回 **没进位的和** ^  **进位**  的值\n\n\n\n### eg:   \n\n1. 9 + 7 = 1001 +  0111\n2. s1 = 1001 ^ 0111 = 1110   |  1001 & 0111 = 0001    |  j1 =  0001 << 1 = 0010\n3. j2 = s1 & j1 = 1110 & 0010 = 0010  <<  1 = 0100 (还有进位，继续执行上述步骤)  s2 =  s1 ^ j1 = 1110 ^ 0010 = 1100\n4. J3 = j2 & s2 = 0100 & 1100 = 0100 << 1 = 1000      s3 = j2 ^ s2 = 0100 ^ 1100 = 1000\n5. J4 = j3 & s3 = 1000 & 1000 = 1000 << 1 = 10000    s4 = j3 ^ s3 = 1000 ^ 1000 = 0000\n6. j5 = j4 & s4 = 1 000 & 0000 = 0 0000   s5 = j4 ^ s4 = 1 0000 ^ 0 0000 = 1 0000 = 16\n\n\n\n### j s 实现\n\n\n\n```javascript\nlet add = function(a,b) {\n    let sum = a ^ b;\n    let carry = (a&b) << 1;\n    if(a&b) {\n        return add(sum, carry);\n    } else {\n        return sum;\n    }\n}\n\nadd(10, 6)  // 16\nadd(-2, 8)  // 6\n```\n\n\n\n\n\n### python 实现\n\n\n\n```python\n#!/usr/bin/python3\n\ndef add(a, b):\n\tif(b == 0):\n\t\treturn a\n\tsum = a ^ b\n\tcarry = (a & b) << 1\n\treturn add(sum, carry)\n\t\n\t\nnums = add(2,99) // 101\n```\n\n","source":"_posts/不使用 + 、-求两个数的和 （含符号）.md","raw":"---\ntitle: 不使用 + 、-求两个数的和 （含符号）\ndate: 2020-06-19 00:11:23\ncategories:\n - javascript\ntags:\n - algorithm\n---\n\n\n\n#  不使用 + 、-求两个数的和 （含符号）\n\n\n\n**首先想到用位运算符来处理**\n\n\n\n* ^ 异或   可以理解为不进位的加法  如:  0010 ^ 0101 = 0111   0 + 0 = 0  | 1+1 = 0 | 1 + 0 = 1\n* & 按位与   \n* << 按位左移 \n\n\n\n### 分析： \n\n1. 既然 ^ 异或可以得到不进位得值，那么再通过 & 按位与取得需要进位的位， 再 << 按位左移进位就可以取得进位的值\n2. 将 **没进位的和** ^  **进位**  \n3. 接着再进行以上的操作，**没进位的和** & **进位**     直到 & 的值为0时就代表没有进位了， 就返回 **没进位的和** ^  **进位**  的值\n\n\n\n### eg:   \n\n1. 9 + 7 = 1001 +  0111\n2. s1 = 1001 ^ 0111 = 1110   |  1001 & 0111 = 0001    |  j1 =  0001 << 1 = 0010\n3. j2 = s1 & j1 = 1110 & 0010 = 0010  <<  1 = 0100 (还有进位，继续执行上述步骤)  s2 =  s1 ^ j1 = 1110 ^ 0010 = 1100\n4. J3 = j2 & s2 = 0100 & 1100 = 0100 << 1 = 1000      s3 = j2 ^ s2 = 0100 ^ 1100 = 1000\n5. J4 = j3 & s3 = 1000 & 1000 = 1000 << 1 = 10000    s4 = j3 ^ s3 = 1000 ^ 1000 = 0000\n6. j5 = j4 & s4 = 1 000 & 0000 = 0 0000   s5 = j4 ^ s4 = 1 0000 ^ 0 0000 = 1 0000 = 16\n\n\n\n### j s 实现\n\n\n\n```javascript\nlet add = function(a,b) {\n    let sum = a ^ b;\n    let carry = (a&b) << 1;\n    if(a&b) {\n        return add(sum, carry);\n    } else {\n        return sum;\n    }\n}\n\nadd(10, 6)  // 16\nadd(-2, 8)  // 6\n```\n\n\n\n\n\n### python 实现\n\n\n\n```python\n#!/usr/bin/python3\n\ndef add(a, b):\n\tif(b == 0):\n\t\treturn a\n\tsum = a ^ b\n\tcarry = (a & b) << 1\n\treturn add(sum, carry)\n\t\n\t\nnums = add(2,99) // 101\n```\n\n","slug":"不使用 + 、-求两个数的和 （含符号）","published":1,"updated":"2020-06-18T16:12:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqexq6bp000yqn7vczvzggzj","content":"<h1 id=\"不使用-、-求两个数的和-（含符号）\"><a href=\"#不使用-、-求两个数的和-（含符号）\" class=\"headerlink\" title=\"不使用 + 、-求两个数的和 （含符号）\"></a>不使用 + 、-求两个数的和 （含符号）</h1><p><strong>首先想到用位运算符来处理</strong></p>\n<ul>\n<li>^ 异或   可以理解为不进位的加法  如:  0010 ^ 0101 &#x3D; 0111   0 + 0 &#x3D; 0  | 1+1 &#x3D; 0 | 1 + 0 &#x3D; 1</li>\n<li>&amp; 按位与   </li>\n<li>&lt;&lt; 按位左移</li>\n</ul>\n<h3 id=\"分析：\"><a href=\"#分析：\" class=\"headerlink\" title=\"分析：\"></a>分析：</h3><ol>\n<li>既然 ^ 异或可以得到不进位得值，那么再通过 &amp; 按位与取得需要进位的位， 再 &lt;&lt; 按位左移进位就可以取得进位的值</li>\n<li>将 <strong>没进位的和</strong> ^  <strong>进位</strong>  </li>\n<li>接着再进行以上的操作，<strong>没进位的和</strong> &amp; <strong>进位</strong>     直到 &amp; 的值为0时就代表没有进位了， 就返回 <strong>没进位的和</strong> ^  <strong>进位</strong>  的值</li>\n</ol>\n<h3 id=\"eg\"><a href=\"#eg\" class=\"headerlink\" title=\"eg:\"></a>eg:</h3><ol>\n<li>9 + 7 &#x3D; 1001 +  0111</li>\n<li>s1 &#x3D; 1001 ^ 0111 &#x3D; 1110   |  1001 &amp; 0111 &#x3D; 0001    |  j1 &#x3D;  0001 &lt;&lt; 1 &#x3D; 0010</li>\n<li>j2 &#x3D; s1 &amp; j1 &#x3D; 1110 &amp; 0010 &#x3D; 0010  &lt;&lt;  1 &#x3D; 0100 (还有进位，继续执行上述步骤)  s2 &#x3D;  s1 ^ j1 &#x3D; 1110 ^ 0010 &#x3D; 1100</li>\n<li>J3 &#x3D; j2 &amp; s2 &#x3D; 0100 &amp; 1100 &#x3D; 0100 &lt;&lt; 1 &#x3D; 1000      s3 &#x3D; j2 ^ s2 &#x3D; 0100 ^ 1100 &#x3D; 1000</li>\n<li>J4 &#x3D; j3 &amp; s3 &#x3D; 1000 &amp; 1000 &#x3D; 1000 &lt;&lt; 1 &#x3D; 10000    s4 &#x3D; j3 ^ s3 &#x3D; 1000 ^ 1000 &#x3D; 0000</li>\n<li>j5 &#x3D; j4 &amp; s4 &#x3D; 1 000 &amp; 0000 &#x3D; 0 0000   s5 &#x3D; j4 ^ s4 &#x3D; 1 0000 ^ 0 0000 &#x3D; 1 0000 &#x3D; 16</li>\n</ol>\n<h3 id=\"j-s-实现\"><a href=\"#j-s-实现\" class=\"headerlink\" title=\"j s 实现\"></a>j s 实现</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> add = <span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum = a ^ b;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> carry = (a&amp;b) &lt;&lt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a&amp;b) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">add</span>(sum, carry);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">add</span>(<span class=\"number\">10</span>, <span class=\"number\">6</span>)  <span class=\"comment\">// 16</span></span><br><span class=\"line\"><span class=\"title function_\">add</span>(-<span class=\"number\">2</span>, <span class=\"number\">8</span>)  <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"python-实现\"><a href=\"#python-实现\" class=\"headerlink\" title=\"python 实现\"></a>python 实现</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">a, b</span>):</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(b == <span class=\"number\">0</span>):</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a</span><br><span class=\"line\">\t<span class=\"built_in\">sum</span> = a ^ b</span><br><span class=\"line\">\tcarry = (a &amp; b) &lt;&lt; <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> add(<span class=\"built_in\">sum</span>, carry)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">nums = add(<span class=\"number\">2</span>,<span class=\"number\">99</span>) // <span class=\"number\">101</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"不使用-、-求两个数的和-（含符号）\"><a href=\"#不使用-、-求两个数的和-（含符号）\" class=\"headerlink\" title=\"不使用 + 、-求两个数的和 （含符号）\"></a>不使用 + 、-求两个数的和 （含符号）</h1><p><strong>首先想到用位运算符来处理</strong></p>\n<ul>\n<li>^ 异或   可以理解为不进位的加法  如:  0010 ^ 0101 &#x3D; 0111   0 + 0 &#x3D; 0  | 1+1 &#x3D; 0 | 1 + 0 &#x3D; 1</li>\n<li>&amp; 按位与   </li>\n<li>&lt;&lt; 按位左移</li>\n</ul>\n<h3 id=\"分析：\"><a href=\"#分析：\" class=\"headerlink\" title=\"分析：\"></a>分析：</h3><ol>\n<li>既然 ^ 异或可以得到不进位得值，那么再通过 &amp; 按位与取得需要进位的位， 再 &lt;&lt; 按位左移进位就可以取得进位的值</li>\n<li>将 <strong>没进位的和</strong> ^  <strong>进位</strong>  </li>\n<li>接着再进行以上的操作，<strong>没进位的和</strong> &amp; <strong>进位</strong>     直到 &amp; 的值为0时就代表没有进位了， 就返回 <strong>没进位的和</strong> ^  <strong>进位</strong>  的值</li>\n</ol>\n<h3 id=\"eg\"><a href=\"#eg\" class=\"headerlink\" title=\"eg:\"></a>eg:</h3><ol>\n<li>9 + 7 &#x3D; 1001 +  0111</li>\n<li>s1 &#x3D; 1001 ^ 0111 &#x3D; 1110   |  1001 &amp; 0111 &#x3D; 0001    |  j1 &#x3D;  0001 &lt;&lt; 1 &#x3D; 0010</li>\n<li>j2 &#x3D; s1 &amp; j1 &#x3D; 1110 &amp; 0010 &#x3D; 0010  &lt;&lt;  1 &#x3D; 0100 (还有进位，继续执行上述步骤)  s2 &#x3D;  s1 ^ j1 &#x3D; 1110 ^ 0010 &#x3D; 1100</li>\n<li>J3 &#x3D; j2 &amp; s2 &#x3D; 0100 &amp; 1100 &#x3D; 0100 &lt;&lt; 1 &#x3D; 1000      s3 &#x3D; j2 ^ s2 &#x3D; 0100 ^ 1100 &#x3D; 1000</li>\n<li>J4 &#x3D; j3 &amp; s3 &#x3D; 1000 &amp; 1000 &#x3D; 1000 &lt;&lt; 1 &#x3D; 10000    s4 &#x3D; j3 ^ s3 &#x3D; 1000 ^ 1000 &#x3D; 0000</li>\n<li>j5 &#x3D; j4 &amp; s4 &#x3D; 1 000 &amp; 0000 &#x3D; 0 0000   s5 &#x3D; j4 ^ s4 &#x3D; 1 0000 ^ 0 0000 &#x3D; 1 0000 &#x3D; 16</li>\n</ol>\n<h3 id=\"j-s-实现\"><a href=\"#j-s-实现\" class=\"headerlink\" title=\"j s 实现\"></a>j s 实现</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> add = <span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum = a ^ b;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> carry = (a&amp;b) &lt;&lt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a&amp;b) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">add</span>(sum, carry);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">add</span>(<span class=\"number\">10</span>, <span class=\"number\">6</span>)  <span class=\"comment\">// 16</span></span><br><span class=\"line\"><span class=\"title function_\">add</span>(-<span class=\"number\">2</span>, <span class=\"number\">8</span>)  <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"python-实现\"><a href=\"#python-实现\" class=\"headerlink\" title=\"python 实现\"></a>python 实现</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">a, b</span>):</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(b == <span class=\"number\">0</span>):</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a</span><br><span class=\"line\">\t<span class=\"built_in\">sum</span> = a ^ b</span><br><span class=\"line\">\tcarry = (a &amp; b) &lt;&lt; <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> add(<span class=\"built_in\">sum</span>, carry)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">nums = add(<span class=\"number\">2</span>,<span class=\"number\">99</span>) // <span class=\"number\">101</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"二进制流转图片","date":"2020-04-07T15:36:23.000Z","_content":"\n**二进制流(ArrayBuffer)转为图片**\n\n1. 首先通过ajax或者ws获取到传来的二进制流数据\n\n\n2. responseType 需要设置为arraybuffer。\n\n3. 然后我们拿到所需的二进制数据， 通过console打印发现是一个ArrayBuffer，接着我们对其进行如下处理，转为base64:\n\n   <!-- more -->\n\n```javascript\n  function arrayBufferToBase64(buffer) {\n\n      var binary = '';\n\n      var bytes = new Uint8Array(buffer);\n\n      var len = bytes.byteLength;\n\n      for (var i = 0; i < len; i++) {\n\n          binary += String.fromCharCode(bytes[i]);\n\n      }\n\n      return window.btoa(binary);\n\n  }\n```\n\n\n\n4. 显示图片。   接着我们把收到的二进制数据通过上面的函数转为url:\n\n``` javascript\nlet url= arrayBufferToBase64(response);\n```\n\n​\t\t\t然后将生成的url放到img标签的src属性中：\n\n```html\ndocument.getElementById('img').src='data:image/jpeg;base64,'+url;\n```\n\n​\t\t\t大功告成～","source":"_posts/blob2pic.md","raw":"---\ntitle: 二进制流转图片\ndate: 2020-04-07 23:36:23\ncategories:\n - javascript\ntags:\n - blob\n---\n\n**二进制流(ArrayBuffer)转为图片**\n\n1. 首先通过ajax或者ws获取到传来的二进制流数据\n\n\n2. responseType 需要设置为arraybuffer。\n\n3. 然后我们拿到所需的二进制数据， 通过console打印发现是一个ArrayBuffer，接着我们对其进行如下处理，转为base64:\n\n   <!-- more -->\n\n```javascript\n  function arrayBufferToBase64(buffer) {\n\n      var binary = '';\n\n      var bytes = new Uint8Array(buffer);\n\n      var len = bytes.byteLength;\n\n      for (var i = 0; i < len; i++) {\n\n          binary += String.fromCharCode(bytes[i]);\n\n      }\n\n      return window.btoa(binary);\n\n  }\n```\n\n\n\n4. 显示图片。   接着我们把收到的二进制数据通过上面的函数转为url:\n\n``` javascript\nlet url= arrayBufferToBase64(response);\n```\n\n​\t\t\t然后将生成的url放到img标签的src属性中：\n\n```html\ndocument.getElementById('img').src='data:image/jpeg;base64,'+url;\n```\n\n​\t\t\t大功告成～","slug":"blob2pic","published":1,"updated":"2020-04-07T15:53:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqexq6bp0011qn7vewi568vq","content":"<p><strong>二进制流(ArrayBuffer)转为图片</strong></p>\n<ol>\n<li><p>首先通过ajax或者ws获取到传来的二进制流数据</p>\n</li>\n<li><p>responseType 需要设置为arraybuffer。</p>\n</li>\n<li><p>然后我们拿到所需的二进制数据， 通过console打印发现是一个ArrayBuffer，接着我们对其进行如下处理，转为base64:</p>\n<span id=\"more\"></span></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">arrayBufferToBase64</span>(<span class=\"params\">buffer</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> binary = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> bytes = <span class=\"keyword\">new</span> <span class=\"title class_\">Uint8Array</span>(buffer);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = bytes.<span class=\"property\">byteLength</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        binary += <span class=\"title class_\">String</span>.<span class=\"title function_\">fromCharCode</span>(bytes[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">window</span>.<span class=\"title function_\">btoa</span>(binary);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"4\">\n<li>显示图片。   接着我们把收到的二进制数据通过上面的函数转为url:</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> url= <span class=\"title function_\">arrayBufferToBase64</span>(response);</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t\t然后将生成的url放到img标签的src属性中：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.getElementById(&#x27;img&#x27;).src=&#x27;data:image/jpeg;base64,&#x27;+url;</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t\t大功告成～</p>\n","site":{"data":{}},"excerpt":"<p><strong>二进制流(ArrayBuffer)转为图片</strong></p>\n<ol>\n<li><p>首先通过ajax或者ws获取到传来的二进制流数据</p>\n</li>\n<li><p>responseType 需要设置为arraybuffer。</p>\n</li>\n<li><p>然后我们拿到所需的二进制数据， 通过console打印发现是一个ArrayBuffer，接着我们对其进行如下处理，转为base64:</p>","more":"</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">arrayBufferToBase64</span>(<span class=\"params\">buffer</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> binary = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> bytes = <span class=\"keyword\">new</span> <span class=\"title class_\">Uint8Array</span>(buffer);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = bytes.<span class=\"property\">byteLength</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        binary += <span class=\"title class_\">String</span>.<span class=\"title function_\">fromCharCode</span>(bytes[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">window</span>.<span class=\"title function_\">btoa</span>(binary);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"4\">\n<li>显示图片。   接着我们把收到的二进制数据通过上面的函数转为url:</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> url= <span class=\"title function_\">arrayBufferToBase64</span>(response);</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t\t然后将生成的url放到img标签的src属性中：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.getElementById(&#x27;img&#x27;).src=&#x27;data:image/jpeg;base64,&#x27;+url;</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t\t大功告成～</p>"},{"title":"从零开始学习Vue源码 ——响应式基本原理","date":"2020-07-01T15:55:23.000Z","_content":"\n# 从零开始学习Vue源码 ——响应式基本原理\n\n\n\n\n\n#### 这里实现一个简易版本的响应式系统来形象的理解数据是如何在初始化的时候被劫持，以及如何在修改时更新视图的。\n\n\n\n### 首先看下Vue2.x实现响应式系统最重要的方法\n\n\n\n``Object.defineProperty``, Vue2.x就是基于它实现的响应式\n\n```javascript\n/*\n    obj: 目标对象\n    prop: 需要操作的目标对象的属性名\n    descriptor: 描述符\n    \n    return value 传入对象\n*/\nObject.defineProperty(obj, prop, descriptor)\n```\n\n\n\n具体的属性以及使用方法可以参考[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty)\n\n\n\n<!-- more -->\n\n#### 下面贴一个简易版响应式的代码实现\n\n\n\n```javascript\n// 更新视图时调用\nfunction cb (val) {\n    /* 渲染视图 */\n    console.log(\"视图更新啦～\");\n}\n\n// 对对象中某个属性进行数据劫持\nfunction defineReactive (obj, key, val) {\n    Object.defineProperty(obj, key, {\n        enumerable: true,       /* 属性可枚举 */\n        configurable: true,     /* 属性可被修改或删除 */\n        get: function reactiveGetter () {\n            return val;         /* 实际上会依赖收集 */\n        },\n        set: function reactiveSetter (newVal) {\n            if (newVal === val) return;\n            cb(newVal);\n        }\n    });\n}\n\n// 遍历对象所有属性，进行数据劫持\nfunction observer (value) {\n    if (!value || (typeof value !== 'object')) {\n        return;\n    }\n    \n    Object.keys(value).forEach((key) => {\n        if(typeof value[key] === 'object') {\n            observer(value[key]) // 递归遍历深层次属性\n        }\n        defineReactive(value, key, value[key]);\n    });\n}\n\nclass Vue {\n  constructor(options) {\n    this._data = option.data\n    observer(this._data);\n  }\n}\n\nconst vm = new Vue({\n  data: {\n    name: {firstName: 'z', lastName: 'zz'}\n  }\n})\n\nvm._data.name.firstName = 'cc' // 此时会打印 视图更新啦～\n\n\n```\n\n\n\n##### 下面我们一步步解析以上简易版响应式系统原理\n\n\n\n1. 首先我们要实现一个对对象属性进行数据劫持，跟踪属性更新的函数 `defineReactive`  ， 该函数使用了 `Object.defineProperty` 进行数据劫持, 被设置的属性会在读取时触发 `getter`,  会在设置时触发 `setter`    执行里面更新视图的函数 `cb` 打印出  *视图更新啦～*\n\n\n\n2. 只有一个`defineReactive`还不够， 我们还需要实现一个 `observer`  来对对象所有属性遍历、递归进行绑定, 这样对象上所有属性修改时都会触发getter 、 setter。\n3. 最后我们构建一个Vue 的class类， 在构造函数中初始化data，并进行**[响应式]** 化\n4. 当实例化Vue后，我们修改_data上的值就会触发setter 更新视图\n\n\n\n## 总结\n\n响应式系统最重要的就是数据劫持部分，当然这里只是一个简单的实现，像数组对象等都没处理，不过能通过这个demo了解相应式的基本原理。\n\n","source":"_posts/从零开始学习Vue源码(二) ——响应式基本原理.md","raw":"---\ntitle: 从零开始学习Vue源码 ——响应式基本原理\ndate: 2020-07-01 23:55:23\ncategories:\n - javascript\n - vue\ntags:\n - vue\n---\n\n# 从零开始学习Vue源码 ——响应式基本原理\n\n\n\n\n\n#### 这里实现一个简易版本的响应式系统来形象的理解数据是如何在初始化的时候被劫持，以及如何在修改时更新视图的。\n\n\n\n### 首先看下Vue2.x实现响应式系统最重要的方法\n\n\n\n``Object.defineProperty``, Vue2.x就是基于它实现的响应式\n\n```javascript\n/*\n    obj: 目标对象\n    prop: 需要操作的目标对象的属性名\n    descriptor: 描述符\n    \n    return value 传入对象\n*/\nObject.defineProperty(obj, prop, descriptor)\n```\n\n\n\n具体的属性以及使用方法可以参考[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty)\n\n\n\n<!-- more -->\n\n#### 下面贴一个简易版响应式的代码实现\n\n\n\n```javascript\n// 更新视图时调用\nfunction cb (val) {\n    /* 渲染视图 */\n    console.log(\"视图更新啦～\");\n}\n\n// 对对象中某个属性进行数据劫持\nfunction defineReactive (obj, key, val) {\n    Object.defineProperty(obj, key, {\n        enumerable: true,       /* 属性可枚举 */\n        configurable: true,     /* 属性可被修改或删除 */\n        get: function reactiveGetter () {\n            return val;         /* 实际上会依赖收集 */\n        },\n        set: function reactiveSetter (newVal) {\n            if (newVal === val) return;\n            cb(newVal);\n        }\n    });\n}\n\n// 遍历对象所有属性，进行数据劫持\nfunction observer (value) {\n    if (!value || (typeof value !== 'object')) {\n        return;\n    }\n    \n    Object.keys(value).forEach((key) => {\n        if(typeof value[key] === 'object') {\n            observer(value[key]) // 递归遍历深层次属性\n        }\n        defineReactive(value, key, value[key]);\n    });\n}\n\nclass Vue {\n  constructor(options) {\n    this._data = option.data\n    observer(this._data);\n  }\n}\n\nconst vm = new Vue({\n  data: {\n    name: {firstName: 'z', lastName: 'zz'}\n  }\n})\n\nvm._data.name.firstName = 'cc' // 此时会打印 视图更新啦～\n\n\n```\n\n\n\n##### 下面我们一步步解析以上简易版响应式系统原理\n\n\n\n1. 首先我们要实现一个对对象属性进行数据劫持，跟踪属性更新的函数 `defineReactive`  ， 该函数使用了 `Object.defineProperty` 进行数据劫持, 被设置的属性会在读取时触发 `getter`,  会在设置时触发 `setter`    执行里面更新视图的函数 `cb` 打印出  *视图更新啦～*\n\n\n\n2. 只有一个`defineReactive`还不够， 我们还需要实现一个 `observer`  来对对象所有属性遍历、递归进行绑定, 这样对象上所有属性修改时都会触发getter 、 setter。\n3. 最后我们构建一个Vue 的class类， 在构造函数中初始化data，并进行**[响应式]** 化\n4. 当实例化Vue后，我们修改_data上的值就会触发setter 更新视图\n\n\n\n## 总结\n\n响应式系统最重要的就是数据劫持部分，当然这里只是一个简单的实现，像数组对象等都没处理，不过能通过这个demo了解相应式的基本原理。\n\n","slug":"从零开始学习Vue源码(二) ——响应式基本原理","published":1,"updated":"2020-07-20T14:58:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqexq6bq0013qn7v3bj45dmu","content":"<h1 id=\"从零开始学习Vue源码-——响应式基本原理\"><a href=\"#从零开始学习Vue源码-——响应式基本原理\" class=\"headerlink\" title=\"从零开始学习Vue源码 ——响应式基本原理\"></a>从零开始学习Vue源码 ——响应式基本原理</h1><h4 id=\"这里实现一个简易版本的响应式系统来形象的理解数据是如何在初始化的时候被劫持，以及如何在修改时更新视图的。\"><a href=\"#这里实现一个简易版本的响应式系统来形象的理解数据是如何在初始化的时候被劫持，以及如何在修改时更新视图的。\" class=\"headerlink\" title=\"这里实现一个简易版本的响应式系统来形象的理解数据是如何在初始化的时候被劫持，以及如何在修改时更新视图的。\"></a>这里实现一个简易版本的响应式系统来形象的理解数据是如何在初始化的时候被劫持，以及如何在修改时更新视图的。</h4><h3 id=\"首先看下Vue2-x实现响应式系统最重要的方法\"><a href=\"#首先看下Vue2-x实现响应式系统最重要的方法\" class=\"headerlink\" title=\"首先看下Vue2.x实现响应式系统最重要的方法\"></a>首先看下Vue2.x实现响应式系统最重要的方法</h3><p><code>Object.defineProperty</code>, Vue2.x就是基于它实现的响应式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    obj: 目标对象</span></span><br><span class=\"line\"><span class=\"comment\">    prop: 需要操作的目标对象的属性名</span></span><br><span class=\"line\"><span class=\"comment\">    descriptor: 描述符</span></span><br><span class=\"line\"><span class=\"comment\">    </span></span><br><span class=\"line\"><span class=\"comment\">    return value 传入对象</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(obj, prop, descriptor)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>具体的属性以及使用方法可以参考<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\">MDN</a></p>\n<span id=\"more\"></span>\n\n<h4 id=\"下面贴一个简易版响应式的代码实现\"><a href=\"#下面贴一个简易版响应式的代码实现\" class=\"headerlink\" title=\"下面贴一个简易版响应式的代码实现\"></a>下面贴一个简易版响应式的代码实现</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 更新视图时调用</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">cb</span> (val) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 渲染视图 */</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;视图更新啦～&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对对象中某个属性进行数据劫持</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">defineReactive</span> (obj, key, val) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(obj, key, &#123;</span><br><span class=\"line\">        <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>,       <span class=\"comment\">/* 属性可枚举 */</span></span><br><span class=\"line\">        <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>,     <span class=\"comment\">/* 属性可被修改或删除 */</span></span><br><span class=\"line\">        <span class=\"attr\">get</span>: <span class=\"keyword\">function</span> <span class=\"title function_\">reactiveGetter</span> () &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> val;         <span class=\"comment\">/* 实际上会依赖收集 */</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">set</span>: <span class=\"keyword\">function</span> <span class=\"title function_\">reactiveSetter</span> (newVal) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (newVal === val) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"title function_\">cb</span>(newVal);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 遍历对象所有属性，进行数据劫持</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">observer</span> (value) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!value || (<span class=\"keyword\">typeof</span> value !== <span class=\"string\">&#x27;object&#x27;</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(value).<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> value[key] === <span class=\"string\">&#x27;object&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">observer</span>(value[key]) <span class=\"comment\">// 递归遍历深层次属性</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">defineReactive</span>(value, key, value[key]);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Vue</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">options</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_data</span> = option.<span class=\"property\">data</span></span><br><span class=\"line\">    <span class=\"title function_\">observer</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">_data</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: &#123;<span class=\"attr\">firstName</span>: <span class=\"string\">&#x27;z&#x27;</span>, <span class=\"attr\">lastName</span>: <span class=\"string\">&#x27;zz&#x27;</span>&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">vm.<span class=\"property\">_data</span>.<span class=\"property\">name</span>.<span class=\"property\">firstName</span> = <span class=\"string\">&#x27;cc&#x27;</span> <span class=\"comment\">// 此时会打印 视图更新啦～</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"下面我们一步步解析以上简易版响应式系统原理\"><a href=\"#下面我们一步步解析以上简易版响应式系统原理\" class=\"headerlink\" title=\"下面我们一步步解析以上简易版响应式系统原理\"></a>下面我们一步步解析以上简易版响应式系统原理</h5><ol>\n<li><p>首先我们要实现一个对对象属性进行数据劫持，跟踪属性更新的函数 <code>defineReactive</code>  ， 该函数使用了 <code>Object.defineProperty</code> 进行数据劫持, 被设置的属性会在读取时触发 <code>getter</code>,  会在设置时触发 <code>setter</code>    执行里面更新视图的函数 <code>cb</code> 打印出  <em>视图更新啦～</em></p>\n</li>\n<li><p>只有一个<code>defineReactive</code>还不够， 我们还需要实现一个 <code>observer</code>  来对对象所有属性遍历、递归进行绑定, 这样对象上所有属性修改时都会触发getter 、 setter。</p>\n</li>\n<li><p>最后我们构建一个Vue 的class类， 在构造函数中初始化data，并进行**[响应式]** 化</p>\n</li>\n<li><p>当实例化Vue后，我们修改_data上的值就会触发setter 更新视图</p>\n</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>响应式系统最重要的就是数据劫持部分，当然这里只是一个简单的实现，像数组对象等都没处理，不过能通过这个demo了解相应式的基本原理。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"从零开始学习Vue源码-——响应式基本原理\"><a href=\"#从零开始学习Vue源码-——响应式基本原理\" class=\"headerlink\" title=\"从零开始学习Vue源码 ——响应式基本原理\"></a>从零开始学习Vue源码 ——响应式基本原理</h1><h4 id=\"这里实现一个简易版本的响应式系统来形象的理解数据是如何在初始化的时候被劫持，以及如何在修改时更新视图的。\"><a href=\"#这里实现一个简易版本的响应式系统来形象的理解数据是如何在初始化的时候被劫持，以及如何在修改时更新视图的。\" class=\"headerlink\" title=\"这里实现一个简易版本的响应式系统来形象的理解数据是如何在初始化的时候被劫持，以及如何在修改时更新视图的。\"></a>这里实现一个简易版本的响应式系统来形象的理解数据是如何在初始化的时候被劫持，以及如何在修改时更新视图的。</h4><h3 id=\"首先看下Vue2-x实现响应式系统最重要的方法\"><a href=\"#首先看下Vue2-x实现响应式系统最重要的方法\" class=\"headerlink\" title=\"首先看下Vue2.x实现响应式系统最重要的方法\"></a>首先看下Vue2.x实现响应式系统最重要的方法</h3><p><code>Object.defineProperty</code>, Vue2.x就是基于它实现的响应式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    obj: 目标对象</span></span><br><span class=\"line\"><span class=\"comment\">    prop: 需要操作的目标对象的属性名</span></span><br><span class=\"line\"><span class=\"comment\">    descriptor: 描述符</span></span><br><span class=\"line\"><span class=\"comment\">    </span></span><br><span class=\"line\"><span class=\"comment\">    return value 传入对象</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(obj, prop, descriptor)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>具体的属性以及使用方法可以参考<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\">MDN</a></p>","more":"<h4 id=\"下面贴一个简易版响应式的代码实现\"><a href=\"#下面贴一个简易版响应式的代码实现\" class=\"headerlink\" title=\"下面贴一个简易版响应式的代码实现\"></a>下面贴一个简易版响应式的代码实现</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 更新视图时调用</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">cb</span> (val) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 渲染视图 */</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;视图更新啦～&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对对象中某个属性进行数据劫持</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">defineReactive</span> (obj, key, val) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(obj, key, &#123;</span><br><span class=\"line\">        <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>,       <span class=\"comment\">/* 属性可枚举 */</span></span><br><span class=\"line\">        <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>,     <span class=\"comment\">/* 属性可被修改或删除 */</span></span><br><span class=\"line\">        <span class=\"attr\">get</span>: <span class=\"keyword\">function</span> <span class=\"title function_\">reactiveGetter</span> () &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> val;         <span class=\"comment\">/* 实际上会依赖收集 */</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">set</span>: <span class=\"keyword\">function</span> <span class=\"title function_\">reactiveSetter</span> (newVal) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (newVal === val) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"title function_\">cb</span>(newVal);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 遍历对象所有属性，进行数据劫持</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">observer</span> (value) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!value || (<span class=\"keyword\">typeof</span> value !== <span class=\"string\">&#x27;object&#x27;</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(value).<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> value[key] === <span class=\"string\">&#x27;object&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">observer</span>(value[key]) <span class=\"comment\">// 递归遍历深层次属性</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">defineReactive</span>(value, key, value[key]);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Vue</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">options</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_data</span> = option.<span class=\"property\">data</span></span><br><span class=\"line\">    <span class=\"title function_\">observer</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">_data</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: &#123;<span class=\"attr\">firstName</span>: <span class=\"string\">&#x27;z&#x27;</span>, <span class=\"attr\">lastName</span>: <span class=\"string\">&#x27;zz&#x27;</span>&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">vm.<span class=\"property\">_data</span>.<span class=\"property\">name</span>.<span class=\"property\">firstName</span> = <span class=\"string\">&#x27;cc&#x27;</span> <span class=\"comment\">// 此时会打印 视图更新啦～</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"下面我们一步步解析以上简易版响应式系统原理\"><a href=\"#下面我们一步步解析以上简易版响应式系统原理\" class=\"headerlink\" title=\"下面我们一步步解析以上简易版响应式系统原理\"></a>下面我们一步步解析以上简易版响应式系统原理</h5><ol>\n<li><p>首先我们要实现一个对对象属性进行数据劫持，跟踪属性更新的函数 <code>defineReactive</code>  ， 该函数使用了 <code>Object.defineProperty</code> 进行数据劫持, 被设置的属性会在读取时触发 <code>getter</code>,  会在设置时触发 <code>setter</code>    执行里面更新视图的函数 <code>cb</code> 打印出  <em>视图更新啦～</em></p>\n</li>\n<li><p>只有一个<code>defineReactive</code>还不够， 我们还需要实现一个 <code>observer</code>  来对对象所有属性遍历、递归进行绑定, 这样对象上所有属性修改时都会触发getter 、 setter。</p>\n</li>\n<li><p>最后我们构建一个Vue 的class类， 在构造函数中初始化data，并进行**[响应式]** 化</p>\n</li>\n<li><p>当实例化Vue后，我们修改_data上的值就会触发setter 更新视图</p>\n</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>响应式系统最重要的就是数据劫持部分，当然这里只是一个简单的实现，像数组对象等都没处理，不过能通过这个demo了解相应式的基本原理。</p>"},{"title":"使用rollup打包并发布一个js库","date":"2021-04-30T07:27:41.000Z","_content":"\n\n\n# rollup 打包js库\n\n\n\n> 发布一个js库包含一下几个大致的流程\n>\n> 1. 编写库代码\n> 2. 配置打包\n> 3. 配置 npm 账户和发布配置\n> 4. 配置 travis ci 持续集成环境，相关配置\n> 5. 更新 version，提交tag 出发构建发布流程\n\n\n\n<!-- more -->\n\n## 1. 编写代码库\n\n```javascript\n// src/index.js\n\nclass Dog {\n  constructor(name = 'huahua') {\n    this.name = name\n  }\n  eat() {\n    console.log(this.name + 'eat food!')\n  }\n}\n\nexport default Dog\n```\n\n## 2. 配置打包\n\n打包有几种方式，目前主流是 webpack 和 rollup。 其中webpack适合开发项目打包（代码拆分、静态资源处理），如果是发布类库的话 rollup 更合适。 相关对比可以参考 https://www.jianshu.com/p/19a3d8ef5e6c\n\n### rollup\n\n​\t这里我们开发类库使用的是 rollup 进行打包，详细介绍和使用可以参考： https://www.rollupjs.com/guide/tutorial\n\n默认已经对 rollup 有所了解了，接着我们开始进行打包的配置：\n\n1. 首先我们先在根目录新建 rollup.config.js 文件，并配置如下：\n\n```javascript\nimport pkjson from './package.json';\nimport filesize from 'rollup-plugin-filesize';\nimport { babel } from '@rollup/plugin-babel';\nimport { nodeResolve } from '@rollup/plugin-node-resolve';\nimport commonjs from '@rollup/plugin-commonjs';\nimport { terser } from \"rollup-plugin-terser\";\n\nconst isDev = process.argv.splice(2).indexOf('--pub') < 0;\nconst prjName = pkjson.name\nconst ProjectName = 'ZMark'\n\n\nconst output = isDev ? { file: `build/${prjName}.js` } : { file: `build/${prjName}.js` };\n\nexport default {\n  input: 'src/index.js',\n  output: {\n    ...output,\n    format: 'umd',\n    name: ProjectName,\n    sourcemap: true\n  },\n  plugins: [\n    nodeResolve(),\n    commonjs({\n      sourceMap: false,  // Default: true\n    }),\n    filesize(),\n    babel({\n      exclude: 'node_modules/**', // 只编译我们的源代码\n      babelHelpers: 'runtime',\n    }),\n    terser(),\n  ],\n}\n```\n\n其中主要配置是   `input` , `output` , `plugins`\n\n`input` 就是整个库的入口文件\n\n`output` 就是打包后文件存放的位置，其中比较重要的是 `format` 这个参数，配置打包模块方式，常用的有 `cjs -- commonjs`  `umd -- 通用模块定义规范`  `esm -- es moudle`  ， 详情参考网上关于  **CommonJS、AMD、CMD、UMD和ES Modules的区别**\n\n`plugins` 是打包过程中使用到的插件，rollup 的精髓就是通过各种插件实现想要的效果。\n\n上面配置中用到如下插件：\n\n* nodeResolve    加载node_moudles 三方包\n* commonjs   （rollup 支持es模块规范，需要将commonjs转成 esm）\n* filesize （构建时提示）\n* babel （重要！  将 es2015+ 语法转成es5 支持的语法，相关介绍后期单独开一个文章）\n* terser (打包压缩)\n\n接着我们在 `package.json` 中添加构建脚本 \n\n```json\n\"build\": \"rimraf ./build/ && rollup -c --pub\",\n```\n\n其中 `rimraf` 是安装的插件，实现构建前将 /build 文件夹及其下面所有文件删除的功能，通过以下方式安装:\n\n```sh\nnpm i rimraf -D\n```\n\n执行后就会在根目录 /build 文件下生成打包后的 js 文件\n\n![image-20210430110115587](https://tva1.sinaimg.cn/large/008i3skNly1gq1l85x31jj30gu05omxp.jpg)\n\n\n\n\n\n## 3. npm 发布\n\n经过 编写库代码、rollup 构建打包，接下来就是将打包好的库发布到 npm 仓库上去。\n\n1. 首先需要注册一个 npm 的账户\n2. 完善 `package.json`  下的包信息\n3. 使用 `npm login`  本地登陆账号 （注： 如果更改了 npm 源可以能遇到问题，具体参考网上解答或者换回原本的源）\n4. 接着就可以直接发布了 `npm publish` ，然后在 npm 上就可以看到自己发布的包了。\n\n\n\n## 4. 自动化发布（待续）……\n\n整个打包发库过程还可以更自动化一点，可以通过 travis CI 结合 github来实现 构建发布一条龙服务，具体配置和使用，后面再结合 rollup 打包的 babel 配置一起来说。","source":"_posts/使用rollup打包并发布一个js库.md","raw":"---\ntitle: 使用rollup打包并发布一个js库\ndate: 2021-04-30 15:27:41\ntags:\n - javascript\n - rollup\n - npm\ncategories:\n - javascript\n---\n\n\n\n# rollup 打包js库\n\n\n\n> 发布一个js库包含一下几个大致的流程\n>\n> 1. 编写库代码\n> 2. 配置打包\n> 3. 配置 npm 账户和发布配置\n> 4. 配置 travis ci 持续集成环境，相关配置\n> 5. 更新 version，提交tag 出发构建发布流程\n\n\n\n<!-- more -->\n\n## 1. 编写代码库\n\n```javascript\n// src/index.js\n\nclass Dog {\n  constructor(name = 'huahua') {\n    this.name = name\n  }\n  eat() {\n    console.log(this.name + 'eat food!')\n  }\n}\n\nexport default Dog\n```\n\n## 2. 配置打包\n\n打包有几种方式，目前主流是 webpack 和 rollup。 其中webpack适合开发项目打包（代码拆分、静态资源处理），如果是发布类库的话 rollup 更合适。 相关对比可以参考 https://www.jianshu.com/p/19a3d8ef5e6c\n\n### rollup\n\n​\t这里我们开发类库使用的是 rollup 进行打包，详细介绍和使用可以参考： https://www.rollupjs.com/guide/tutorial\n\n默认已经对 rollup 有所了解了，接着我们开始进行打包的配置：\n\n1. 首先我们先在根目录新建 rollup.config.js 文件，并配置如下：\n\n```javascript\nimport pkjson from './package.json';\nimport filesize from 'rollup-plugin-filesize';\nimport { babel } from '@rollup/plugin-babel';\nimport { nodeResolve } from '@rollup/plugin-node-resolve';\nimport commonjs from '@rollup/plugin-commonjs';\nimport { terser } from \"rollup-plugin-terser\";\n\nconst isDev = process.argv.splice(2).indexOf('--pub') < 0;\nconst prjName = pkjson.name\nconst ProjectName = 'ZMark'\n\n\nconst output = isDev ? { file: `build/${prjName}.js` } : { file: `build/${prjName}.js` };\n\nexport default {\n  input: 'src/index.js',\n  output: {\n    ...output,\n    format: 'umd',\n    name: ProjectName,\n    sourcemap: true\n  },\n  plugins: [\n    nodeResolve(),\n    commonjs({\n      sourceMap: false,  // Default: true\n    }),\n    filesize(),\n    babel({\n      exclude: 'node_modules/**', // 只编译我们的源代码\n      babelHelpers: 'runtime',\n    }),\n    terser(),\n  ],\n}\n```\n\n其中主要配置是   `input` , `output` , `plugins`\n\n`input` 就是整个库的入口文件\n\n`output` 就是打包后文件存放的位置，其中比较重要的是 `format` 这个参数，配置打包模块方式，常用的有 `cjs -- commonjs`  `umd -- 通用模块定义规范`  `esm -- es moudle`  ， 详情参考网上关于  **CommonJS、AMD、CMD、UMD和ES Modules的区别**\n\n`plugins` 是打包过程中使用到的插件，rollup 的精髓就是通过各种插件实现想要的效果。\n\n上面配置中用到如下插件：\n\n* nodeResolve    加载node_moudles 三方包\n* commonjs   （rollup 支持es模块规范，需要将commonjs转成 esm）\n* filesize （构建时提示）\n* babel （重要！  将 es2015+ 语法转成es5 支持的语法，相关介绍后期单独开一个文章）\n* terser (打包压缩)\n\n接着我们在 `package.json` 中添加构建脚本 \n\n```json\n\"build\": \"rimraf ./build/ && rollup -c --pub\",\n```\n\n其中 `rimraf` 是安装的插件，实现构建前将 /build 文件夹及其下面所有文件删除的功能，通过以下方式安装:\n\n```sh\nnpm i rimraf -D\n```\n\n执行后就会在根目录 /build 文件下生成打包后的 js 文件\n\n![image-20210430110115587](https://tva1.sinaimg.cn/large/008i3skNly1gq1l85x31jj30gu05omxp.jpg)\n\n\n\n\n\n## 3. npm 发布\n\n经过 编写库代码、rollup 构建打包，接下来就是将打包好的库发布到 npm 仓库上去。\n\n1. 首先需要注册一个 npm 的账户\n2. 完善 `package.json`  下的包信息\n3. 使用 `npm login`  本地登陆账号 （注： 如果更改了 npm 源可以能遇到问题，具体参考网上解答或者换回原本的源）\n4. 接着就可以直接发布了 `npm publish` ，然后在 npm 上就可以看到自己发布的包了。\n\n\n\n## 4. 自动化发布（待续）……\n\n整个打包发库过程还可以更自动化一点，可以通过 travis CI 结合 github来实现 构建发布一条龙服务，具体配置和使用，后面再结合 rollup 打包的 babel 配置一起来说。","slug":"使用rollup打包并发布一个js库","published":1,"updated":"2021-04-30T09:07:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqexq6bq0017qn7v9xsu8nii","content":"<h1 id=\"rollup-打包js库\"><a href=\"#rollup-打包js库\" class=\"headerlink\" title=\"rollup 打包js库\"></a>rollup 打包js库</h1><blockquote>\n<p>发布一个js库包含一下几个大致的流程</p>\n<ol>\n<li>编写库代码</li>\n<li>配置打包</li>\n<li>配置 npm 账户和发布配置</li>\n<li>配置 travis ci 持续集成环境，相关配置</li>\n<li>更新 version，提交tag 出发构建发布流程</li>\n</ol>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"1-编写代码库\"><a href=\"#1-编写代码库\" class=\"headerlink\" title=\"1. 编写代码库\"></a>1. 编写代码库</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/index.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name = <span class=\"string\">&#x27;huahua&#x27;</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">eat</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> + <span class=\"string\">&#x27;eat food!&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Dog</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-配置打包\"><a href=\"#2-配置打包\" class=\"headerlink\" title=\"2. 配置打包\"></a>2. 配置打包</h2><p>打包有几种方式，目前主流是 webpack 和 rollup。 其中webpack适合开发项目打包（代码拆分、静态资源处理），如果是发布类库的话 rollup 更合适。 相关对比可以参考 <a href=\"https://www.jianshu.com/p/19a3d8ef5e6c\">https://www.jianshu.com/p/19a3d8ef5e6c</a></p>\n<h3 id=\"rollup\"><a href=\"#rollup\" class=\"headerlink\" title=\"rollup\"></a>rollup</h3><p>​\t这里我们开发类库使用的是 rollup 进行打包，详细介绍和使用可以参考： <a href=\"https://www.rollupjs.com/guide/tutorial\">https://www.rollupjs.com/guide/tutorial</a></p>\n<p>默认已经对 rollup 有所了解了，接着我们开始进行打包的配置：</p>\n<ol>\n<li>首先我们先在根目录新建 rollup.config.js 文件，并配置如下：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pkjson <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./package.json&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> filesize <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rollup-plugin-filesize&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; babel &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@rollup/plugin-babel&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; nodeResolve &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@rollup/plugin-node-resolve&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> commonjs <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@rollup/plugin-commonjs&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; terser &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;rollup-plugin-terser&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> isDev = process.<span class=\"property\">argv</span>.<span class=\"title function_\">splice</span>(<span class=\"number\">2</span>).<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;--pub&#x27;</span>) &lt; <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> prjName = pkjson.<span class=\"property\">name</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">ProjectName</span> = <span class=\"string\">&#x27;ZMark&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> output = isDev ? &#123; <span class=\"attr\">file</span>: <span class=\"string\">`build/<span class=\"subst\">$&#123;prjName&#125;</span>.js`</span> &#125; : &#123; <span class=\"attr\">file</span>: <span class=\"string\">`build/<span class=\"subst\">$&#123;prjName&#125;</span>.js`</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">input</span>: <span class=\"string\">&#x27;src/index.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    ...output,</span><br><span class=\"line\">    <span class=\"attr\">format</span>: <span class=\"string\">&#x27;umd&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"title class_\">ProjectName</span>,</span><br><span class=\"line\">    <span class=\"attr\">sourcemap</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"title function_\">nodeResolve</span>(),</span><br><span class=\"line\">    <span class=\"title function_\">commonjs</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">sourceMap</span>: <span class=\"literal\">false</span>,  <span class=\"comment\">// Default: true</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"title function_\">filesize</span>(),</span><br><span class=\"line\">    <span class=\"title function_\">babel</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">exclude</span>: <span class=\"string\">&#x27;node_modules/**&#x27;</span>, <span class=\"comment\">// 只编译我们的源代码</span></span><br><span class=\"line\">      <span class=\"attr\">babelHelpers</span>: <span class=\"string\">&#x27;runtime&#x27;</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"title function_\">terser</span>(),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中主要配置是   <code>input</code> , <code>output</code> , <code>plugins</code></p>\n<p><code>input</code> 就是整个库的入口文件</p>\n<p><code>output</code> 就是打包后文件存放的位置，其中比较重要的是 <code>format</code> 这个参数，配置打包模块方式，常用的有 <code>cjs -- commonjs</code>  <code>umd -- 通用模块定义规范</code>  <code>esm -- es moudle</code>  ， 详情参考网上关于  <strong>CommonJS、AMD、CMD、UMD和ES Modules的区别</strong></p>\n<p><code>plugins</code> 是打包过程中使用到的插件，rollup 的精髓就是通过各种插件实现想要的效果。</p>\n<p>上面配置中用到如下插件：</p>\n<ul>\n<li>nodeResolve    加载node_moudles 三方包</li>\n<li>commonjs   （rollup 支持es模块规范，需要将commonjs转成 esm）</li>\n<li>filesize （构建时提示）</li>\n<li>babel （重要！  将 es2015+ 语法转成es5 支持的语法，相关介绍后期单独开一个文章）</li>\n<li>terser (打包压缩)</li>\n</ul>\n<p>接着我们在 <code>package.json</code> 中添加构建脚本 </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;build&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;rimraf ./build/ &amp;&amp; rollup -c --pub&quot;</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n\n<p>其中 <code>rimraf</code> 是安装的插件，实现构建前将 &#x2F;build 文件夹及其下面所有文件删除的功能，通过以下方式安装:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i rimraf -D</span><br></pre></td></tr></table></figure>\n\n<p>执行后就会在根目录 &#x2F;build 文件下生成打包后的 js 文件</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gq1l85x31jj30gu05omxp.jpg\" alt=\"image-20210430110115587\"></p>\n<h2 id=\"3-npm-发布\"><a href=\"#3-npm-发布\" class=\"headerlink\" title=\"3. npm 发布\"></a>3. npm 发布</h2><p>经过 编写库代码、rollup 构建打包，接下来就是将打包好的库发布到 npm 仓库上去。</p>\n<ol>\n<li>首先需要注册一个 npm 的账户</li>\n<li>完善 <code>package.json</code>  下的包信息</li>\n<li>使用 <code>npm login</code>  本地登陆账号 （注： 如果更改了 npm 源可以能遇到问题，具体参考网上解答或者换回原本的源）</li>\n<li>接着就可以直接发布了 <code>npm publish</code> ，然后在 npm 上就可以看到自己发布的包了。</li>\n</ol>\n<h2 id=\"4-自动化发布（待续）……\"><a href=\"#4-自动化发布（待续）……\" class=\"headerlink\" title=\"4. 自动化发布（待续）……\"></a>4. 自动化发布（待续）……</h2><p>整个打包发库过程还可以更自动化一点，可以通过 travis CI 结合 github来实现 构建发布一条龙服务，具体配置和使用，后面再结合 rollup 打包的 babel 配置一起来说。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"rollup-打包js库\"><a href=\"#rollup-打包js库\" class=\"headerlink\" title=\"rollup 打包js库\"></a>rollup 打包js库</h1><blockquote>\n<p>发布一个js库包含一下几个大致的流程</p>\n<ol>\n<li>编写库代码</li>\n<li>配置打包</li>\n<li>配置 npm 账户和发布配置</li>\n<li>配置 travis ci 持续集成环境，相关配置</li>\n<li>更新 version，提交tag 出发构建发布流程</li>\n</ol>\n</blockquote>","more":"<h2 id=\"1-编写代码库\"><a href=\"#1-编写代码库\" class=\"headerlink\" title=\"1. 编写代码库\"></a>1. 编写代码库</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/index.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name = <span class=\"string\">&#x27;huahua&#x27;</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">eat</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> + <span class=\"string\">&#x27;eat food!&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Dog</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-配置打包\"><a href=\"#2-配置打包\" class=\"headerlink\" title=\"2. 配置打包\"></a>2. 配置打包</h2><p>打包有几种方式，目前主流是 webpack 和 rollup。 其中webpack适合开发项目打包（代码拆分、静态资源处理），如果是发布类库的话 rollup 更合适。 相关对比可以参考 <a href=\"https://www.jianshu.com/p/19a3d8ef5e6c\">https://www.jianshu.com/p/19a3d8ef5e6c</a></p>\n<h3 id=\"rollup\"><a href=\"#rollup\" class=\"headerlink\" title=\"rollup\"></a>rollup</h3><p>​\t这里我们开发类库使用的是 rollup 进行打包，详细介绍和使用可以参考： <a href=\"https://www.rollupjs.com/guide/tutorial\">https://www.rollupjs.com/guide/tutorial</a></p>\n<p>默认已经对 rollup 有所了解了，接着我们开始进行打包的配置：</p>\n<ol>\n<li>首先我们先在根目录新建 rollup.config.js 文件，并配置如下：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pkjson <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./package.json&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> filesize <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rollup-plugin-filesize&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; babel &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@rollup/plugin-babel&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; nodeResolve &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@rollup/plugin-node-resolve&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> commonjs <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@rollup/plugin-commonjs&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; terser &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;rollup-plugin-terser&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> isDev = process.<span class=\"property\">argv</span>.<span class=\"title function_\">splice</span>(<span class=\"number\">2</span>).<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;--pub&#x27;</span>) &lt; <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> prjName = pkjson.<span class=\"property\">name</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">ProjectName</span> = <span class=\"string\">&#x27;ZMark&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> output = isDev ? &#123; <span class=\"attr\">file</span>: <span class=\"string\">`build/<span class=\"subst\">$&#123;prjName&#125;</span>.js`</span> &#125; : &#123; <span class=\"attr\">file</span>: <span class=\"string\">`build/<span class=\"subst\">$&#123;prjName&#125;</span>.js`</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">input</span>: <span class=\"string\">&#x27;src/index.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    ...output,</span><br><span class=\"line\">    <span class=\"attr\">format</span>: <span class=\"string\">&#x27;umd&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"title class_\">ProjectName</span>,</span><br><span class=\"line\">    <span class=\"attr\">sourcemap</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"title function_\">nodeResolve</span>(),</span><br><span class=\"line\">    <span class=\"title function_\">commonjs</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">sourceMap</span>: <span class=\"literal\">false</span>,  <span class=\"comment\">// Default: true</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"title function_\">filesize</span>(),</span><br><span class=\"line\">    <span class=\"title function_\">babel</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">exclude</span>: <span class=\"string\">&#x27;node_modules/**&#x27;</span>, <span class=\"comment\">// 只编译我们的源代码</span></span><br><span class=\"line\">      <span class=\"attr\">babelHelpers</span>: <span class=\"string\">&#x27;runtime&#x27;</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"title function_\">terser</span>(),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中主要配置是   <code>input</code> , <code>output</code> , <code>plugins</code></p>\n<p><code>input</code> 就是整个库的入口文件</p>\n<p><code>output</code> 就是打包后文件存放的位置，其中比较重要的是 <code>format</code> 这个参数，配置打包模块方式，常用的有 <code>cjs -- commonjs</code>  <code>umd -- 通用模块定义规范</code>  <code>esm -- es moudle</code>  ， 详情参考网上关于  <strong>CommonJS、AMD、CMD、UMD和ES Modules的区别</strong></p>\n<p><code>plugins</code> 是打包过程中使用到的插件，rollup 的精髓就是通过各种插件实现想要的效果。</p>\n<p>上面配置中用到如下插件：</p>\n<ul>\n<li>nodeResolve    加载node_moudles 三方包</li>\n<li>commonjs   （rollup 支持es模块规范，需要将commonjs转成 esm）</li>\n<li>filesize （构建时提示）</li>\n<li>babel （重要！  将 es2015+ 语法转成es5 支持的语法，相关介绍后期单独开一个文章）</li>\n<li>terser (打包压缩)</li>\n</ul>\n<p>接着我们在 <code>package.json</code> 中添加构建脚本 </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;build&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;rimraf ./build/ &amp;&amp; rollup -c --pub&quot;</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n\n<p>其中 <code>rimraf</code> 是安装的插件，实现构建前将 &#x2F;build 文件夹及其下面所有文件删除的功能，通过以下方式安装:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i rimraf -D</span><br></pre></td></tr></table></figure>\n\n<p>执行后就会在根目录 &#x2F;build 文件下生成打包后的 js 文件</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gq1l85x31jj30gu05omxp.jpg\" alt=\"image-20210430110115587\"></p>\n<h2 id=\"3-npm-发布\"><a href=\"#3-npm-发布\" class=\"headerlink\" title=\"3. npm 发布\"></a>3. npm 发布</h2><p>经过 编写库代码、rollup 构建打包，接下来就是将打包好的库发布到 npm 仓库上去。</p>\n<ol>\n<li>首先需要注册一个 npm 的账户</li>\n<li>完善 <code>package.json</code>  下的包信息</li>\n<li>使用 <code>npm login</code>  本地登陆账号 （注： 如果更改了 npm 源可以能遇到问题，具体参考网上解答或者换回原本的源）</li>\n<li>接着就可以直接发布了 <code>npm publish</code> ，然后在 npm 上就可以看到自己发布的包了。</li>\n</ol>\n<h2 id=\"4-自动化发布（待续）……\"><a href=\"#4-自动化发布（待续）……\" class=\"headerlink\" title=\"4. 自动化发布（待续）……\"></a>4. 自动化发布（待续）……</h2><p>整个打包发库过程还可以更自动化一点，可以通过 travis CI 结合 github来实现 构建发布一条龙服务，具体配置和使用，后面再结合 rollup 打包的 babel 配置一起来说。</p>"},{"title":"前端知识点梳理 --part one","date":"2020-06-10T15:36:23.000Z","_content":"\n# 前端知识点梳理   --part one\n\n\n\n## 基础部分\n\n### 1.  Html 语义化的好处 ?\n\n* 使html的结构更清晰，更直观，更易于seo\n\n\n\n\n\n###  2. 清除浮动的方法有哪些 ？\n\n* 定义一个空标签再浮动元素之后。 然后给其 <code>clear: both</code> \n* 定义伪元素来清除浮动\n\n> 使用overflow:auto（空标签元素清除浮动而不得不增加无意代码的弊端,,使用zoom:1用于兼容IE）。\n\n\n\n<!-- more -->\n\n### 3. img标签 alt 和 title的异同\n\n*  alt 是当图片显示不出来时显示的文字。\n* title 是hover时显示的提示文字。 (描述性文字， 一直都有)\n\n* 总结： alt是当正常图片显示不出来时的替代内容。title是一直存在的描述性内容。\n\n\n\n### 4. 行内元素有哪些？块级元素有哪些？ 空(void)元素有那些?\n\n*  行内元素: i、strong、b、bm、a、span、input、select、img\n* 块级元素: div、h(x)、p、ul、ol、li\n* 空元素 br\n\n\n\n### 5. html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？\n\n1. 新增的元素\n\n* 语义化元素: article、section、header、nav、footer\n* 音视频元素：video、audio\n* 画布元素： canvas\n* 表单控件： time、email、date、calendar……\n* 缓存 local storage、session storage\n* 新技术： webworker(为 JavaScript 创造多线程环境)、geolacation、websocket\n\n2. 移除的元素\n\n* frame、frameset，noframes\n* 纯表现的元素： basefont，**big**，center，font, s，strike，tt，u\n\n3. 如何支持新的标签\n\n* 直接使用成熟的框架、使用最多的是html5shim框架\n\n4. 如何区分是html5\n\n* docType/新增的元素\n\n\n\n### 6. 介绍一下CSS的盒子模型？\n\n* IE盒模型 ｜ 标准盒模型\n* IE盒模型的计算方式是 border + padding + content  = 宽 ｜ 高\n* 标准盒模型计算方式是 content = 宽 ｜ 高\n\n\n\n### 7. css3新增属性?\n\n* Border- 边框(shadow、img、radius)\n* Background-背景 (image、size、origin(相对不同盒模型)、clip(相对不同盒模型裁剪)) --- (border-box、content-box、padding-box)\n* gradients 渐变。   线性渐变 -- **Linear Gradients**  。  径向渐变 -- **Radial Gradients**\n* 文字效果  (text-shadow: 文字阴影、box-shadow: 盒子阴影 、text-overflow:  文字溢出处理、 word-wrap:  文字换行、 word-break： 拆分换行,非中日韩文本)  字体: @font-face\n* 2D、3D转换  .   2D : translate(移动)、 rotate(旋转)、 scale(缩放)、 matrix(包含旋转，缩放，移动（平移）和倾斜功能。 3D: 2D属性的3D体现\n* 过渡: transition\n* 动画  @keyframes 规则 。 animation ： 使创建的规则生效\n* 多列布局  column-xxx\n* 弹性布局 flex\n* 媒体查询 @media xxx and (max-with: xxxpx) {}\n\n","source":"_posts/前端知识点梳理   --part one.md","raw":"---\ntitle: 前端知识点梳理 --part one\ndate: 2020-06-10 23:36:23\ncategories:\n - javascript\ntags:\n - summary\n---\n\n# 前端知识点梳理   --part one\n\n\n\n## 基础部分\n\n### 1.  Html 语义化的好处 ?\n\n* 使html的结构更清晰，更直观，更易于seo\n\n\n\n\n\n###  2. 清除浮动的方法有哪些 ？\n\n* 定义一个空标签再浮动元素之后。 然后给其 <code>clear: both</code> \n* 定义伪元素来清除浮动\n\n> 使用overflow:auto（空标签元素清除浮动而不得不增加无意代码的弊端,,使用zoom:1用于兼容IE）。\n\n\n\n<!-- more -->\n\n### 3. img标签 alt 和 title的异同\n\n*  alt 是当图片显示不出来时显示的文字。\n* title 是hover时显示的提示文字。 (描述性文字， 一直都有)\n\n* 总结： alt是当正常图片显示不出来时的替代内容。title是一直存在的描述性内容。\n\n\n\n### 4. 行内元素有哪些？块级元素有哪些？ 空(void)元素有那些?\n\n*  行内元素: i、strong、b、bm、a、span、input、select、img\n* 块级元素: div、h(x)、p、ul、ol、li\n* 空元素 br\n\n\n\n### 5. html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？\n\n1. 新增的元素\n\n* 语义化元素: article、section、header、nav、footer\n* 音视频元素：video、audio\n* 画布元素： canvas\n* 表单控件： time、email、date、calendar……\n* 缓存 local storage、session storage\n* 新技术： webworker(为 JavaScript 创造多线程环境)、geolacation、websocket\n\n2. 移除的元素\n\n* frame、frameset，noframes\n* 纯表现的元素： basefont，**big**，center，font, s，strike，tt，u\n\n3. 如何支持新的标签\n\n* 直接使用成熟的框架、使用最多的是html5shim框架\n\n4. 如何区分是html5\n\n* docType/新增的元素\n\n\n\n### 6. 介绍一下CSS的盒子模型？\n\n* IE盒模型 ｜ 标准盒模型\n* IE盒模型的计算方式是 border + padding + content  = 宽 ｜ 高\n* 标准盒模型计算方式是 content = 宽 ｜ 高\n\n\n\n### 7. css3新增属性?\n\n* Border- 边框(shadow、img、radius)\n* Background-背景 (image、size、origin(相对不同盒模型)、clip(相对不同盒模型裁剪)) --- (border-box、content-box、padding-box)\n* gradients 渐变。   线性渐变 -- **Linear Gradients**  。  径向渐变 -- **Radial Gradients**\n* 文字效果  (text-shadow: 文字阴影、box-shadow: 盒子阴影 、text-overflow:  文字溢出处理、 word-wrap:  文字换行、 word-break： 拆分换行,非中日韩文本)  字体: @font-face\n* 2D、3D转换  .   2D : translate(移动)、 rotate(旋转)、 scale(缩放)、 matrix(包含旋转，缩放，移动（平移）和倾斜功能。 3D: 2D属性的3D体现\n* 过渡: transition\n* 动画  @keyframes 规则 。 animation ： 使创建的规则生效\n* 多列布局  column-xxx\n* 弹性布局 flex\n* 媒体查询 @media xxx and (max-with: xxxpx) {}\n\n","slug":"前端知识点梳理   --part one","published":1,"updated":"2020-07-20T15:14:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqexq6bq001aqn7v77lte5xt","content":"<h1 id=\"前端知识点梳理-–part-one\"><a href=\"#前端知识点梳理-–part-one\" class=\"headerlink\" title=\"前端知识点梳理   –part one\"></a>前端知识点梳理   –part one</h1><h2 id=\"基础部分\"><a href=\"#基础部分\" class=\"headerlink\" title=\"基础部分\"></a>基础部分</h2><h3 id=\"1-Html-语义化的好处\"><a href=\"#1-Html-语义化的好处\" class=\"headerlink\" title=\"1.  Html 语义化的好处 ?\"></a>1.  Html 语义化的好处 ?</h3><ul>\n<li>使html的结构更清晰，更直观，更易于seo</li>\n</ul>\n<h3 id=\"2-清除浮动的方法有哪些-？\"><a href=\"#2-清除浮动的方法有哪些-？\" class=\"headerlink\" title=\"2. 清除浮动的方法有哪些 ？\"></a>2. 清除浮动的方法有哪些 ？</h3><ul>\n<li>定义一个空标签再浮动元素之后。 然后给其 <code>clear: both</code> </li>\n<li>定义伪元素来清除浮动</li>\n</ul>\n<blockquote>\n<p>使用overflow:auto（空标签元素清除浮动而不得不增加无意代码的弊端,,使用zoom:1用于兼容IE）。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h3 id=\"3-img标签-alt-和-title的异同\"><a href=\"#3-img标签-alt-和-title的异同\" class=\"headerlink\" title=\"3. img标签 alt 和 title的异同\"></a>3. img标签 alt 和 title的异同</h3><ul>\n<li><p>alt 是当图片显示不出来时显示的文字。</p>\n</li>\n<li><p>title 是hover时显示的提示文字。 (描述性文字， 一直都有)</p>\n</li>\n<li><p>总结： alt是当正常图片显示不出来时的替代内容。title是一直存在的描述性内容。</p>\n</li>\n</ul>\n<h3 id=\"4-行内元素有哪些？块级元素有哪些？-空-void-元素有那些\"><a href=\"#4-行内元素有哪些？块级元素有哪些？-空-void-元素有那些\" class=\"headerlink\" title=\"4. 行内元素有哪些？块级元素有哪些？ 空(void)元素有那些?\"></a>4. 行内元素有哪些？块级元素有哪些？ 空(void)元素有那些?</h3><ul>\n<li>行内元素: i、strong、b、bm、a、span、input、select、img</li>\n<li>块级元素: div、h(x)、p、ul、ol、li</li>\n<li>空元素 br</li>\n</ul>\n<h3 id=\"5-html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分-HTML-和-HTML5？\"><a href=\"#5-html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分-HTML-和-HTML5？\" class=\"headerlink\" title=\"5. html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？\"></a>5. html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？</h3><ol>\n<li>新增的元素</li>\n</ol>\n<ul>\n<li>语义化元素: article、section、header、nav、footer</li>\n<li>音视频元素：video、audio</li>\n<li>画布元素： canvas</li>\n<li>表单控件： time、email、date、calendar……</li>\n<li>缓存 local storage、session storage</li>\n<li>新技术： webworker(为 JavaScript 创造多线程环境)、geolacation、websocket</li>\n</ul>\n<ol start=\"2\">\n<li>移除的元素</li>\n</ol>\n<ul>\n<li>frame、frameset，noframes</li>\n<li>纯表现的元素： basefont，<strong>big</strong>，center，font, s，strike，tt，u</li>\n</ul>\n<ol start=\"3\">\n<li>如何支持新的标签</li>\n</ol>\n<ul>\n<li>直接使用成熟的框架、使用最多的是html5shim框架</li>\n</ul>\n<ol start=\"4\">\n<li>如何区分是html5</li>\n</ol>\n<ul>\n<li>docType&#x2F;新增的元素</li>\n</ul>\n<h3 id=\"6-介绍一下CSS的盒子模型？\"><a href=\"#6-介绍一下CSS的盒子模型？\" class=\"headerlink\" title=\"6. 介绍一下CSS的盒子模型？\"></a>6. 介绍一下CSS的盒子模型？</h3><ul>\n<li>IE盒模型 ｜ 标准盒模型</li>\n<li>IE盒模型的计算方式是 border + padding + content  &#x3D; 宽 ｜ 高</li>\n<li>标准盒模型计算方式是 content &#x3D; 宽 ｜ 高</li>\n</ul>\n<h3 id=\"7-css3新增属性\"><a href=\"#7-css3新增属性\" class=\"headerlink\" title=\"7. css3新增属性?\"></a>7. css3新增属性?</h3><ul>\n<li>Border- 边框(shadow、img、radius)</li>\n<li>Background-背景 (image、size、origin(相对不同盒模型)、clip(相对不同盒模型裁剪)) — (border-box、content-box、padding-box)</li>\n<li>gradients 渐变。   线性渐变 – <strong>Linear Gradients</strong>  。  径向渐变 – <strong>Radial Gradients</strong></li>\n<li>文字效果  (text-shadow: 文字阴影、box-shadow: 盒子阴影 、text-overflow:  文字溢出处理、 word-wrap:  文字换行、 word-break： 拆分换行,非中日韩文本)  字体: @font-face</li>\n<li>2D、3D转换  .   2D : translate(移动)、 rotate(旋转)、 scale(缩放)、 matrix(包含旋转，缩放，移动（平移）和倾斜功能。 3D: 2D属性的3D体现</li>\n<li>过渡: transition</li>\n<li>动画  @keyframes 规则 。 animation ： 使创建的规则生效</li>\n<li>多列布局  column-xxx</li>\n<li>弹性布局 flex</li>\n<li>媒体查询 @media xxx and (max-with: xxxpx) {}</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"前端知识点梳理-–part-one\"><a href=\"#前端知识点梳理-–part-one\" class=\"headerlink\" title=\"前端知识点梳理   –part one\"></a>前端知识点梳理   –part one</h1><h2 id=\"基础部分\"><a href=\"#基础部分\" class=\"headerlink\" title=\"基础部分\"></a>基础部分</h2><h3 id=\"1-Html-语义化的好处\"><a href=\"#1-Html-语义化的好处\" class=\"headerlink\" title=\"1.  Html 语义化的好处 ?\"></a>1.  Html 语义化的好处 ?</h3><ul>\n<li>使html的结构更清晰，更直观，更易于seo</li>\n</ul>\n<h3 id=\"2-清除浮动的方法有哪些-？\"><a href=\"#2-清除浮动的方法有哪些-？\" class=\"headerlink\" title=\"2. 清除浮动的方法有哪些 ？\"></a>2. 清除浮动的方法有哪些 ？</h3><ul>\n<li>定义一个空标签再浮动元素之后。 然后给其 <code>clear: both</code> </li>\n<li>定义伪元素来清除浮动</li>\n</ul>\n<blockquote>\n<p>使用overflow:auto（空标签元素清除浮动而不得不增加无意代码的弊端,,使用zoom:1用于兼容IE）。</p>\n</blockquote>","more":"<h3 id=\"3-img标签-alt-和-title的异同\"><a href=\"#3-img标签-alt-和-title的异同\" class=\"headerlink\" title=\"3. img标签 alt 和 title的异同\"></a>3. img标签 alt 和 title的异同</h3><ul>\n<li><p>alt 是当图片显示不出来时显示的文字。</p>\n</li>\n<li><p>title 是hover时显示的提示文字。 (描述性文字， 一直都有)</p>\n</li>\n<li><p>总结： alt是当正常图片显示不出来时的替代内容。title是一直存在的描述性内容。</p>\n</li>\n</ul>\n<h3 id=\"4-行内元素有哪些？块级元素有哪些？-空-void-元素有那些\"><a href=\"#4-行内元素有哪些？块级元素有哪些？-空-void-元素有那些\" class=\"headerlink\" title=\"4. 行内元素有哪些？块级元素有哪些？ 空(void)元素有那些?\"></a>4. 行内元素有哪些？块级元素有哪些？ 空(void)元素有那些?</h3><ul>\n<li>行内元素: i、strong、b、bm、a、span、input、select、img</li>\n<li>块级元素: div、h(x)、p、ul、ol、li</li>\n<li>空元素 br</li>\n</ul>\n<h3 id=\"5-html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分-HTML-和-HTML5？\"><a href=\"#5-html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分-HTML-和-HTML5？\" class=\"headerlink\" title=\"5. html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？\"></a>5. html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？</h3><ol>\n<li>新增的元素</li>\n</ol>\n<ul>\n<li>语义化元素: article、section、header、nav、footer</li>\n<li>音视频元素：video、audio</li>\n<li>画布元素： canvas</li>\n<li>表单控件： time、email、date、calendar……</li>\n<li>缓存 local storage、session storage</li>\n<li>新技术： webworker(为 JavaScript 创造多线程环境)、geolacation、websocket</li>\n</ul>\n<ol start=\"2\">\n<li>移除的元素</li>\n</ol>\n<ul>\n<li>frame、frameset，noframes</li>\n<li>纯表现的元素： basefont，<strong>big</strong>，center，font, s，strike，tt，u</li>\n</ul>\n<ol start=\"3\">\n<li>如何支持新的标签</li>\n</ol>\n<ul>\n<li>直接使用成熟的框架、使用最多的是html5shim框架</li>\n</ul>\n<ol start=\"4\">\n<li>如何区分是html5</li>\n</ol>\n<ul>\n<li>docType&#x2F;新增的元素</li>\n</ul>\n<h3 id=\"6-介绍一下CSS的盒子模型？\"><a href=\"#6-介绍一下CSS的盒子模型？\" class=\"headerlink\" title=\"6. 介绍一下CSS的盒子模型？\"></a>6. 介绍一下CSS的盒子模型？</h3><ul>\n<li>IE盒模型 ｜ 标准盒模型</li>\n<li>IE盒模型的计算方式是 border + padding + content  &#x3D; 宽 ｜ 高</li>\n<li>标准盒模型计算方式是 content &#x3D; 宽 ｜ 高</li>\n</ul>\n<h3 id=\"7-css3新增属性\"><a href=\"#7-css3新增属性\" class=\"headerlink\" title=\"7. css3新增属性?\"></a>7. css3新增属性?</h3><ul>\n<li>Border- 边框(shadow、img、radius)</li>\n<li>Background-背景 (image、size、origin(相对不同盒模型)、clip(相对不同盒模型裁剪)) — (border-box、content-box、padding-box)</li>\n<li>gradients 渐变。   线性渐变 – <strong>Linear Gradients</strong>  。  径向渐变 – <strong>Radial Gradients</strong></li>\n<li>文字效果  (text-shadow: 文字阴影、box-shadow: 盒子阴影 、text-overflow:  文字溢出处理、 word-wrap:  文字换行、 word-break： 拆分换行,非中日韩文本)  字体: @font-face</li>\n<li>2D、3D转换  .   2D : translate(移动)、 rotate(旋转)、 scale(缩放)、 matrix(包含旋转，缩放，移动（平移）和倾斜功能。 3D: 2D属性的3D体现</li>\n<li>过渡: transition</li>\n<li>动画  @keyframes 规则 。 animation ： 使创建的规则生效</li>\n<li>多列布局  column-xxx</li>\n<li>弹性布局 flex</li>\n<li>媒体查询 @media xxx and (max-with: xxxpx) {}</li>\n</ul>"},{"title":"从零开始学习Vue源码 —— 概览","date":"2020-07-01T15:50:23.000Z","_content":"\n# 从零开始学习Vue源码 —— 概览\n\n\n\n\n\n先上一张图\n\n\n\n![](https://user-gold-cdn.xitu.io/2017/12/19/1606e7eaa2a664e8?imageslim)\n\n\n\n以上流程包括了从：\n\n> 初始化 —— 挂载 —— 解析模版 —— 生成渲染函数 ——   render function转换为VNode节点最终形成Virtual Dom Tree ——  virtual dom tree转化为真实Dom节点从而渲染视图\n\n\n\n响应式更新包括了:\n\n> 在init时进行了`Object.defineProperty` 的绑定 —— render function渲染读取值，触发getter函数 —— 进行依赖收集 —— 修改对象值触发setter函数 —— 通知**[依赖收集]**中Dep的每个 watcher 值变化了，需要更新视图 —— watcher调用 `update`来更新视图 ——  将新、旧VNode传入patch进行diff比较，只修改比较得出的差异的部分Dom\n\n\n\n<!-- more -->\n\n## init\n\n在 `new Vue()`  之后， 会进行一系列的初始化操作，包括初始化 **生命周期** 、 **事件**、**props** 、 **methods** 、 **data** 、 **computed** 、 **watch** 等。 最重要的是进行 `Object.defineProperty` 的绑定，用于实现 **[响应式]** 和 **[依赖收集]** \n\n\n\n## $mount\n\n\n\n在初始化之后就会进行组件的挂载\n\n\n\n## compile\n\n如果是运行时会进行`template`模版的编译， 包括 ：\n\n* **parse** ——  使用正则解析模版中的指令、class、style等 ， 形成AST (抽象语法树)\n* **optimize** —— 标记 static 静态节点，用于后面`update` 时 `patch` 执行diff算法对静态节点跳过，从而优化性能\n* **generate** —— 将AST转换为 render function， 包括 render字符串 和 staticRenderFns字符串\n\n\n\n经过以上步骤之后，就会生产用于渲染VNode的 render function\n\n\n\n\n\n## Virtual DOM\n\nRender function 转换为Vnode节点，最终形成 virtual Dom Tree ，最后虚拟Dom渲染得到真实Dom\n\n\n\n\n\n## 响应式\n\n\n\nrender function被渲染时会读取 **Init**时绑定的值，就会触发 getter函数进行 **[依赖收集]** \n\n![](https://user-gold-cdn.xitu.io/2017/12/21/160770b2a77e084e?imageView2)\n\n **[依赖收集]** 是为了将观察者watcher对象存放到订阅者Dep的subs中\n\n\n\n在修改对象值时会触发setter函数，通知之前依赖收集dep中的每个watcher值发生改变了，紧接着，watcher就会调用 `update`来更新视图\n\n\n\n*关于setter为什么要通知dep中的每个watch，这里引用一段网友的解释:*\n\n> 通知所有的watcher是指对应的dep保存的所有watcher。进行数据劫持的时候，循环遍历data中所有的属性，一个属性就会创建一个唯一的dep,当初始化解析编译界面的时候，一个指令/表达式就是一个watcher,那么解析指令/表达式的值的时候就去读data中的属性，触发getter，再触发添加dep添加订阅（将watcher添加到dep.subs中），当修改对应的属性的时候，触发setter，那么就再去触发这个dep保存的所有watcher\n\n\n\n\n\n## 总结\n\n\n\n以上大概梳理呢Vue整个运行机制，后续会针对每个大板块，小功能进行更细致化的分析。\n\n","source":"_posts/从零开始学习Vue源码(一) —— 概览.md","raw":"---\ntitle: 从零开始学习Vue源码 —— 概览\ndate: 2020-07-01 23:50:23\ncategories:\n - javascript\n - vue\ntags:\n - vue\n---\n\n# 从零开始学习Vue源码 —— 概览\n\n\n\n\n\n先上一张图\n\n\n\n![](https://user-gold-cdn.xitu.io/2017/12/19/1606e7eaa2a664e8?imageslim)\n\n\n\n以上流程包括了从：\n\n> 初始化 —— 挂载 —— 解析模版 —— 生成渲染函数 ——   render function转换为VNode节点最终形成Virtual Dom Tree ——  virtual dom tree转化为真实Dom节点从而渲染视图\n\n\n\n响应式更新包括了:\n\n> 在init时进行了`Object.defineProperty` 的绑定 —— render function渲染读取值，触发getter函数 —— 进行依赖收集 —— 修改对象值触发setter函数 —— 通知**[依赖收集]**中Dep的每个 watcher 值变化了，需要更新视图 —— watcher调用 `update`来更新视图 ——  将新、旧VNode传入patch进行diff比较，只修改比较得出的差异的部分Dom\n\n\n\n<!-- more -->\n\n## init\n\n在 `new Vue()`  之后， 会进行一系列的初始化操作，包括初始化 **生命周期** 、 **事件**、**props** 、 **methods** 、 **data** 、 **computed** 、 **watch** 等。 最重要的是进行 `Object.defineProperty` 的绑定，用于实现 **[响应式]** 和 **[依赖收集]** \n\n\n\n## $mount\n\n\n\n在初始化之后就会进行组件的挂载\n\n\n\n## compile\n\n如果是运行时会进行`template`模版的编译， 包括 ：\n\n* **parse** ——  使用正则解析模版中的指令、class、style等 ， 形成AST (抽象语法树)\n* **optimize** —— 标记 static 静态节点，用于后面`update` 时 `patch` 执行diff算法对静态节点跳过，从而优化性能\n* **generate** —— 将AST转换为 render function， 包括 render字符串 和 staticRenderFns字符串\n\n\n\n经过以上步骤之后，就会生产用于渲染VNode的 render function\n\n\n\n\n\n## Virtual DOM\n\nRender function 转换为Vnode节点，最终形成 virtual Dom Tree ，最后虚拟Dom渲染得到真实Dom\n\n\n\n\n\n## 响应式\n\n\n\nrender function被渲染时会读取 **Init**时绑定的值，就会触发 getter函数进行 **[依赖收集]** \n\n![](https://user-gold-cdn.xitu.io/2017/12/21/160770b2a77e084e?imageView2)\n\n **[依赖收集]** 是为了将观察者watcher对象存放到订阅者Dep的subs中\n\n\n\n在修改对象值时会触发setter函数，通知之前依赖收集dep中的每个watcher值发生改变了，紧接着，watcher就会调用 `update`来更新视图\n\n\n\n*关于setter为什么要通知dep中的每个watch，这里引用一段网友的解释:*\n\n> 通知所有的watcher是指对应的dep保存的所有watcher。进行数据劫持的时候，循环遍历data中所有的属性，一个属性就会创建一个唯一的dep,当初始化解析编译界面的时候，一个指令/表达式就是一个watcher,那么解析指令/表达式的值的时候就去读data中的属性，触发getter，再触发添加dep添加订阅（将watcher添加到dep.subs中），当修改对应的属性的时候，触发setter，那么就再去触发这个dep保存的所有watcher\n\n\n\n\n\n## 总结\n\n\n\n以上大概梳理呢Vue整个运行机制，后续会针对每个大板块，小功能进行更细致化的分析。\n\n","slug":"从零开始学习Vue源码(一) —— 概览","published":1,"updated":"2020-07-20T14:58:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqexq6br001eqn7vbbtn6r29","content":"<h1 id=\"从零开始学习Vue源码-——-概览\"><a href=\"#从零开始学习Vue源码-——-概览\" class=\"headerlink\" title=\"从零开始学习Vue源码 —— 概览\"></a>从零开始学习Vue源码 —— 概览</h1><p>先上一张图</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2017/12/19/1606e7eaa2a664e8?imageslim\"></p>\n<p>以上流程包括了从：</p>\n<blockquote>\n<p>初始化 —— 挂载 —— 解析模版 —— 生成渲染函数 ——   render function转换为VNode节点最终形成Virtual Dom Tree ——  virtual dom tree转化为真实Dom节点从而渲染视图</p>\n</blockquote>\n<p>响应式更新包括了:</p>\n<blockquote>\n<p>在init时进行了<code>Object.defineProperty</code> 的绑定 —— render function渲染读取值，触发getter函数 —— 进行依赖收集 —— 修改对象值触发setter函数 —— 通知**[依赖收集]**中Dep的每个 watcher 值变化了，需要更新视图 —— watcher调用 <code>update</code>来更新视图 ——  将新、旧VNode传入patch进行diff比较，只修改比较得出的差异的部分Dom</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\"init\"></a>init</h2><p>在 <code>new Vue()</code>  之后， 会进行一系列的初始化操作，包括初始化 <strong>生命周期</strong> 、 <strong>事件</strong>、<strong>props</strong> 、 <strong>methods</strong> 、 <strong>data</strong> 、 <strong>computed</strong> 、 <strong>watch</strong> 等。 最重要的是进行 <code>Object.defineProperty</code> 的绑定，用于实现 <strong>[响应式]</strong> 和 <strong>[依赖收集]</strong> </p>\n<h2 id=\"mount\"><a href=\"#mount\" class=\"headerlink\" title=\"$mount\"></a>$mount</h2><p>在初始化之后就会进行组件的挂载</p>\n<h2 id=\"compile\"><a href=\"#compile\" class=\"headerlink\" title=\"compile\"></a>compile</h2><p>如果是运行时会进行<code>template</code>模版的编译， 包括 ：</p>\n<ul>\n<li><strong>parse</strong> ——  使用正则解析模版中的指令、class、style等 ， 形成AST (抽象语法树)</li>\n<li><strong>optimize</strong> —— 标记 static 静态节点，用于后面<code>update</code> 时 <code>patch</code> 执行diff算法对静态节点跳过，从而优化性能</li>\n<li><strong>generate</strong> —— 将AST转换为 render function， 包括 render字符串 和 staticRenderFns字符串</li>\n</ul>\n<p>经过以上步骤之后，就会生产用于渲染VNode的 render function</p>\n<h2 id=\"Virtual-DOM\"><a href=\"#Virtual-DOM\" class=\"headerlink\" title=\"Virtual DOM\"></a>Virtual DOM</h2><p>Render function 转换为Vnode节点，最终形成 virtual Dom Tree ，最后虚拟Dom渲染得到真实Dom</p>\n<h2 id=\"响应式\"><a href=\"#响应式\" class=\"headerlink\" title=\"响应式\"></a>响应式</h2><p>render function被渲染时会读取 <strong>Init</strong>时绑定的值，就会触发 getter函数进行 <strong>[依赖收集]</strong> </p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2017/12/21/160770b2a77e084e?imageView2\"></p>\n<p> <strong>[依赖收集]</strong> 是为了将观察者watcher对象存放到订阅者Dep的subs中</p>\n<p>在修改对象值时会触发setter函数，通知之前依赖收集dep中的每个watcher值发生改变了，紧接着，watcher就会调用 <code>update</code>来更新视图</p>\n<p><em>关于setter为什么要通知dep中的每个watch，这里引用一段网友的解释:</em></p>\n<blockquote>\n<p>通知所有的watcher是指对应的dep保存的所有watcher。进行数据劫持的时候，循环遍历data中所有的属性，一个属性就会创建一个唯一的dep,当初始化解析编译界面的时候，一个指令&#x2F;表达式就是一个watcher,那么解析指令&#x2F;表达式的值的时候就去读data中的属性，触发getter，再触发添加dep添加订阅（将watcher添加到dep.subs中），当修改对应的属性的时候，触发setter，那么就再去触发这个dep保存的所有watcher</p>\n</blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>以上大概梳理呢Vue整个运行机制，后续会针对每个大板块，小功能进行更细致化的分析。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"从零开始学习Vue源码-——-概览\"><a href=\"#从零开始学习Vue源码-——-概览\" class=\"headerlink\" title=\"从零开始学习Vue源码 —— 概览\"></a>从零开始学习Vue源码 —— 概览</h1><p>先上一张图</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2017/12/19/1606e7eaa2a664e8?imageslim\"></p>\n<p>以上流程包括了从：</p>\n<blockquote>\n<p>初始化 —— 挂载 —— 解析模版 —— 生成渲染函数 ——   render function转换为VNode节点最终形成Virtual Dom Tree ——  virtual dom tree转化为真实Dom节点从而渲染视图</p>\n</blockquote>\n<p>响应式更新包括了:</p>\n<blockquote>\n<p>在init时进行了<code>Object.defineProperty</code> 的绑定 —— render function渲染读取值，触发getter函数 —— 进行依赖收集 —— 修改对象值触发setter函数 —— 通知**[依赖收集]**中Dep的每个 watcher 值变化了，需要更新视图 —— watcher调用 <code>update</code>来更新视图 ——  将新、旧VNode传入patch进行diff比较，只修改比较得出的差异的部分Dom</p>\n</blockquote>","more":"<h2 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\"init\"></a>init</h2><p>在 <code>new Vue()</code>  之后， 会进行一系列的初始化操作，包括初始化 <strong>生命周期</strong> 、 <strong>事件</strong>、<strong>props</strong> 、 <strong>methods</strong> 、 <strong>data</strong> 、 <strong>computed</strong> 、 <strong>watch</strong> 等。 最重要的是进行 <code>Object.defineProperty</code> 的绑定，用于实现 <strong>[响应式]</strong> 和 <strong>[依赖收集]</strong> </p>\n<h2 id=\"mount\"><a href=\"#mount\" class=\"headerlink\" title=\"$mount\"></a>$mount</h2><p>在初始化之后就会进行组件的挂载</p>\n<h2 id=\"compile\"><a href=\"#compile\" class=\"headerlink\" title=\"compile\"></a>compile</h2><p>如果是运行时会进行<code>template</code>模版的编译， 包括 ：</p>\n<ul>\n<li><strong>parse</strong> ——  使用正则解析模版中的指令、class、style等 ， 形成AST (抽象语法树)</li>\n<li><strong>optimize</strong> —— 标记 static 静态节点，用于后面<code>update</code> 时 <code>patch</code> 执行diff算法对静态节点跳过，从而优化性能</li>\n<li><strong>generate</strong> —— 将AST转换为 render function， 包括 render字符串 和 staticRenderFns字符串</li>\n</ul>\n<p>经过以上步骤之后，就会生产用于渲染VNode的 render function</p>\n<h2 id=\"Virtual-DOM\"><a href=\"#Virtual-DOM\" class=\"headerlink\" title=\"Virtual DOM\"></a>Virtual DOM</h2><p>Render function 转换为Vnode节点，最终形成 virtual Dom Tree ，最后虚拟Dom渲染得到真实Dom</p>\n<h2 id=\"响应式\"><a href=\"#响应式\" class=\"headerlink\" title=\"响应式\"></a>响应式</h2><p>render function被渲染时会读取 <strong>Init</strong>时绑定的值，就会触发 getter函数进行 <strong>[依赖收集]</strong> </p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2017/12/21/160770b2a77e084e?imageView2\"></p>\n<p> <strong>[依赖收集]</strong> 是为了将观察者watcher对象存放到订阅者Dep的subs中</p>\n<p>在修改对象值时会触发setter函数，通知之前依赖收集dep中的每个watcher值发生改变了，紧接着，watcher就会调用 <code>update</code>来更新视图</p>\n<p><em>关于setter为什么要通知dep中的每个watch，这里引用一段网友的解释:</em></p>\n<blockquote>\n<p>通知所有的watcher是指对应的dep保存的所有watcher。进行数据劫持的时候，循环遍历data中所有的属性，一个属性就会创建一个唯一的dep,当初始化解析编译界面的时候，一个指令&#x2F;表达式就是一个watcher,那么解析指令&#x2F;表达式的值的时候就去读data中的属性，触发getter，再触发添加dep添加订阅（将watcher添加到dep.subs中），当修改对应的属性的时候，触发setter，那么就再去触发这个dep保存的所有watcher</p>\n</blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>以上大概梳理呢Vue整个运行机制，后续会针对每个大板块，小功能进行更细致化的分析。</p>"},{"layout":"js","title":"同步、异步、任务队列","date":"2021-03-30T03:50:46.000Z","_content":"\n#   JS 同步、异步、任务队列\n\n\n\n> 浏览器是多线程，但 js 是单线程执行的。 其他的诸如事件、网络、定时器都有对应的线程。 当  js 代码同步执行时， 遇到非常耗时的操作可能就会阻塞，体现在页面上就是卡顿以及不能交互等。 为此 js 引入了异步的概念。\n\n\n\n<!-- more -->\n\n### 异步\n\n\n\n当执行 js 过程中遇到比较耗时的操作时， js 会采用异步的方式， 比如网络请求，定时器等。当发出请求或者调用定时器后，不会阻塞当前代码执行，而是会往后继续执行， 最终当网络请求数据回来后，或者定时器计时完毕后，会调用事先传入的回调函数。\n\n\n\n举个例子: \n\n```javascript\nfunction a() {\n  console.log('1')\n  setTimeout(() => {\n    console.log('2')\n  }, 1000)\n  console.log('3')\n}\n\na(); // 依次打印 1 - 3 - 2\n```\n\n可以看到， 打印并不是依次按照代码的顺序打印的， 而且定时器也并没有阻塞后面的打印，而是在打印了 `3` 之后， 一秒计时到了再打印的 `2`\n\n\n\n但是 js 是单线程的， 又是怎么实现的异步呢？\n\n\n\n因为 js 会维护一个任务队列 （task queue）。 异步任务有了结果后会依次存入任务队列中，**当主线程执行完代码处于空闲状态时**，就会从任务队列中取出事件，执行对应的回调函数。主线程为空时会重复的检查任务队列是否有任务，如果有会取出在主线程中执行，这个重复执行的过程就叫做 **事件循环**. \n\n\n\n![](http://www.ruanyifeng.com/blogimg/asset/2014/bg2014100802.png)\n\n\n\n> ps:  如任务队列中有定时任务时， 会等到定时时间到后才会取出在主线程中执行。\n\n\n\n### 任务队列\n\n> 任务队列分为 **宏任务队列**(macro task)  和 **微任务队列**（micro task）, 在一次事件循环中，优先执行完所有微任务队列， 接着才执行宏任务队列\n\n\n\n一次事件循环会执行一次从宏任务队列中取出的事件以及微任务队列中所有的微任务\n\n\n\n* 宏任务 （外部队列）\n  * 定时器\n  * 事件绑定\n  * ajax\n  * Node中fs可以进行异步的I/O操作\n  * ……\n* 微任务 （js 内部队列）\n  * Promise(async/await)\n  * process.nextTick （node中实现的api，把当前任务放到主栈最后执行，当主栈执行完，先执行nextTick，再到等待队列中找）\n  * ……\n\n\n\n### Node.js 中的任务队列\n\n\n\n> Node.js  中的事件循环、任务队列和浏览器环境中有些不一样。浏览器中一次事件循环会执行一次宏任务，并将微任务队列清空再执行页面渲染。Node.js 中则是一次事件循环会先将宏任务（文件、IO）全部执行完，再清空微任务队列。 **（11版本之前）** V11.x 版本之后进行了修复。\n\n","source":"_posts/同步、异步、任务队列.md","raw":"---\nlayout: js\ntitle: 同步、异步、任务队列\ndate: 2021-03-30 11:50:46\ncategories:\n - javascript\ntags:\n - javascript\n\n\n---\n\n#   JS 同步、异步、任务队列\n\n\n\n> 浏览器是多线程，但 js 是单线程执行的。 其他的诸如事件、网络、定时器都有对应的线程。 当  js 代码同步执行时， 遇到非常耗时的操作可能就会阻塞，体现在页面上就是卡顿以及不能交互等。 为此 js 引入了异步的概念。\n\n\n\n<!-- more -->\n\n### 异步\n\n\n\n当执行 js 过程中遇到比较耗时的操作时， js 会采用异步的方式， 比如网络请求，定时器等。当发出请求或者调用定时器后，不会阻塞当前代码执行，而是会往后继续执行， 最终当网络请求数据回来后，或者定时器计时完毕后，会调用事先传入的回调函数。\n\n\n\n举个例子: \n\n```javascript\nfunction a() {\n  console.log('1')\n  setTimeout(() => {\n    console.log('2')\n  }, 1000)\n  console.log('3')\n}\n\na(); // 依次打印 1 - 3 - 2\n```\n\n可以看到， 打印并不是依次按照代码的顺序打印的， 而且定时器也并没有阻塞后面的打印，而是在打印了 `3` 之后， 一秒计时到了再打印的 `2`\n\n\n\n但是 js 是单线程的， 又是怎么实现的异步呢？\n\n\n\n因为 js 会维护一个任务队列 （task queue）。 异步任务有了结果后会依次存入任务队列中，**当主线程执行完代码处于空闲状态时**，就会从任务队列中取出事件，执行对应的回调函数。主线程为空时会重复的检查任务队列是否有任务，如果有会取出在主线程中执行，这个重复执行的过程就叫做 **事件循环**. \n\n\n\n![](http://www.ruanyifeng.com/blogimg/asset/2014/bg2014100802.png)\n\n\n\n> ps:  如任务队列中有定时任务时， 会等到定时时间到后才会取出在主线程中执行。\n\n\n\n### 任务队列\n\n> 任务队列分为 **宏任务队列**(macro task)  和 **微任务队列**（micro task）, 在一次事件循环中，优先执行完所有微任务队列， 接着才执行宏任务队列\n\n\n\n一次事件循环会执行一次从宏任务队列中取出的事件以及微任务队列中所有的微任务\n\n\n\n* 宏任务 （外部队列）\n  * 定时器\n  * 事件绑定\n  * ajax\n  * Node中fs可以进行异步的I/O操作\n  * ……\n* 微任务 （js 内部队列）\n  * Promise(async/await)\n  * process.nextTick （node中实现的api，把当前任务放到主栈最后执行，当主栈执行完，先执行nextTick，再到等待队列中找）\n  * ……\n\n\n\n### Node.js 中的任务队列\n\n\n\n> Node.js  中的事件循环、任务队列和浏览器环境中有些不一样。浏览器中一次事件循环会执行一次宏任务，并将微任务队列清空再执行页面渲染。Node.js 中则是一次事件循环会先将宏任务（文件、IO）全部执行完，再清空微任务队列。 **（11版本之前）** V11.x 版本之后进行了修复。\n\n","slug":"同步、异步、任务队列","published":1,"updated":"2021-03-30T06:57:19.000Z","comments":1,"photos":[],"link":"","_id":"clqexq6br001gqn7vhjpeh2cn","content":"<h1 id=\"JS-同步、异步、任务队列\"><a href=\"#JS-同步、异步、任务队列\" class=\"headerlink\" title=\"JS 同步、异步、任务队列\"></a>JS 同步、异步、任务队列</h1><blockquote>\n<p>浏览器是多线程，但 js 是单线程执行的。 其他的诸如事件、网络、定时器都有对应的线程。 当  js 代码同步执行时， 遇到非常耗时的操作可能就会阻塞，体现在页面上就是卡顿以及不能交互等。 为此 js 引入了异步的概念。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h3 id=\"异步\"><a href=\"#异步\" class=\"headerlink\" title=\"异步\"></a>异步</h3><p>当执行 js 过程中遇到比较耗时的操作时， js 会采用异步的方式， 比如网络请求，定时器等。当发出请求或者调用定时器后，不会阻塞当前代码执行，而是会往后继续执行， 最终当网络请求数据回来后，或者定时器计时完毕后，会调用事先传入的回调函数。</p>\n<p>举个例子: </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">a</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;2&#x27;</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;3&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">a</span>(); <span class=\"comment\">// 依次打印 1 - 3 - 2</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到， 打印并不是依次按照代码的顺序打印的， 而且定时器也并没有阻塞后面的打印，而是在打印了 <code>3</code> 之后， 一秒计时到了再打印的 <code>2</code></p>\n<p>但是 js 是单线程的， 又是怎么实现的异步呢？</p>\n<p>因为 js 会维护一个任务队列 （task queue）。 异步任务有了结果后会依次存入任务队列中，<strong>当主线程执行完代码处于空闲状态时</strong>，就会从任务队列中取出事件，执行对应的回调函数。主线程为空时会重复的检查任务队列是否有任务，如果有会取出在主线程中执行，这个重复执行的过程就叫做 <strong>事件循环</strong>. </p>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2014/bg2014100802.png\"></p>\n<blockquote>\n<p>ps:  如任务队列中有定时任务时， 会等到定时时间到后才会取出在主线程中执行。</p>\n</blockquote>\n<h3 id=\"任务队列\"><a href=\"#任务队列\" class=\"headerlink\" title=\"任务队列\"></a>任务队列</h3><blockquote>\n<p>任务队列分为 <strong>宏任务队列</strong>(macro task)  和 <strong>微任务队列</strong>（micro task）, 在一次事件循环中，优先执行完所有微任务队列， 接着才执行宏任务队列</p>\n</blockquote>\n<p>一次事件循环会执行一次从宏任务队列中取出的事件以及微任务队列中所有的微任务</p>\n<ul>\n<li>宏任务 （外部队列）<ul>\n<li>定时器</li>\n<li>事件绑定</li>\n<li>ajax</li>\n<li>Node中fs可以进行异步的I&#x2F;O操作</li>\n<li>……</li>\n</ul>\n</li>\n<li>微任务 （js 内部队列）<ul>\n<li>Promise(async&#x2F;await)</li>\n<li>process.nextTick （node中实现的api，把当前任务放到主栈最后执行，当主栈执行完，先执行nextTick，再到等待队列中找）</li>\n<li>……</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Node-js-中的任务队列\"><a href=\"#Node-js-中的任务队列\" class=\"headerlink\" title=\"Node.js 中的任务队列\"></a>Node.js 中的任务队列</h3><blockquote>\n<p>Node.js  中的事件循环、任务队列和浏览器环境中有些不一样。浏览器中一次事件循环会执行一次宏任务，并将微任务队列清空再执行页面渲染。Node.js 中则是一次事件循环会先将宏任务（文件、IO）全部执行完，再清空微任务队列。 <strong>（11版本之前）</strong> V11.x 版本之后进行了修复。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h1 id=\"JS-同步、异步、任务队列\"><a href=\"#JS-同步、异步、任务队列\" class=\"headerlink\" title=\"JS 同步、异步、任务队列\"></a>JS 同步、异步、任务队列</h1><blockquote>\n<p>浏览器是多线程，但 js 是单线程执行的。 其他的诸如事件、网络、定时器都有对应的线程。 当  js 代码同步执行时， 遇到非常耗时的操作可能就会阻塞，体现在页面上就是卡顿以及不能交互等。 为此 js 引入了异步的概念。</p>\n</blockquote>","more":"<h3 id=\"异步\"><a href=\"#异步\" class=\"headerlink\" title=\"异步\"></a>异步</h3><p>当执行 js 过程中遇到比较耗时的操作时， js 会采用异步的方式， 比如网络请求，定时器等。当发出请求或者调用定时器后，不会阻塞当前代码执行，而是会往后继续执行， 最终当网络请求数据回来后，或者定时器计时完毕后，会调用事先传入的回调函数。</p>\n<p>举个例子: </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">a</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;2&#x27;</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;3&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">a</span>(); <span class=\"comment\">// 依次打印 1 - 3 - 2</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到， 打印并不是依次按照代码的顺序打印的， 而且定时器也并没有阻塞后面的打印，而是在打印了 <code>3</code> 之后， 一秒计时到了再打印的 <code>2</code></p>\n<p>但是 js 是单线程的， 又是怎么实现的异步呢？</p>\n<p>因为 js 会维护一个任务队列 （task queue）。 异步任务有了结果后会依次存入任务队列中，<strong>当主线程执行完代码处于空闲状态时</strong>，就会从任务队列中取出事件，执行对应的回调函数。主线程为空时会重复的检查任务队列是否有任务，如果有会取出在主线程中执行，这个重复执行的过程就叫做 <strong>事件循环</strong>. </p>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2014/bg2014100802.png\"></p>\n<blockquote>\n<p>ps:  如任务队列中有定时任务时， 会等到定时时间到后才会取出在主线程中执行。</p>\n</blockquote>\n<h3 id=\"任务队列\"><a href=\"#任务队列\" class=\"headerlink\" title=\"任务队列\"></a>任务队列</h3><blockquote>\n<p>任务队列分为 <strong>宏任务队列</strong>(macro task)  和 <strong>微任务队列</strong>（micro task）, 在一次事件循环中，优先执行完所有微任务队列， 接着才执行宏任务队列</p>\n</blockquote>\n<p>一次事件循环会执行一次从宏任务队列中取出的事件以及微任务队列中所有的微任务</p>\n<ul>\n<li>宏任务 （外部队列）<ul>\n<li>定时器</li>\n<li>事件绑定</li>\n<li>ajax</li>\n<li>Node中fs可以进行异步的I&#x2F;O操作</li>\n<li>……</li>\n</ul>\n</li>\n<li>微任务 （js 内部队列）<ul>\n<li>Promise(async&#x2F;await)</li>\n<li>process.nextTick （node中实现的api，把当前任务放到主栈最后执行，当主栈执行完，先执行nextTick，再到等待队列中找）</li>\n<li>……</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Node-js-中的任务队列\"><a href=\"#Node-js-中的任务队列\" class=\"headerlink\" title=\"Node.js 中的任务队列\"></a>Node.js 中的任务队列</h3><blockquote>\n<p>Node.js  中的事件循环、任务队列和浏览器环境中有些不一样。浏览器中一次事件循环会执行一次宏任务，并将微任务队列清空再执行页面渲染。Node.js 中则是一次事件循环会先将宏任务（文件、IO）全部执行完，再清空微任务队列。 <strong>（11版本之前）</strong> V11.x 版本之后进行了修复。</p>\n</blockquote>"},{"title":"css3 水位图波纹动效","date":"2020-07-20T14:57:23.000Z","_content":"\n\n\n# 水波纹动效\n\n\n\n直接上代码\n\n\n\n通过遮罩和动画实现水位图波纹特效\n\n\n\n可以通过输入0-100的数字或者 拖动滑动条调节水位的高低 (通过修改wave-mask的top)\n\n<!-- more -->\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Document</title>\n    <style>\n      * {\n        box-sizing: border-box;\n        padding: 0;\n        margin: 0;\n      }\n      .container {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        border-radius: 50%;\n        border: 3px solid #67c23a;\n        background: #ffffff;\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        padding: 7px 7px;\n        overflow: hidden;\n      }\n      .wave {\n        position: relative;\n        width: 100px;\n        height: 100px;\n        background-image: linear-gradient(-180deg, #aaff80 13%, #67c23a 91%);\n        border-radius: 50%;\n        box-shadow: 1px 3px 3px 0 rgba(139, 139, 139, 0.822);\n      }\n      .wave-mask {\n        position: absolute;\n        width: 200px;\n        height: 200px;\n        top: 100%;\n        left: 50%;\n        border-radius: 39%;\n        background-color: white;\n        transform: translate(-50%, -100%) rotate(0);\n        animation: toRotate 10s linear infinite;\n        z-index: 20;\n      }\n\n      @keyframes toRotate {\n        50% {\n          transform: translate(-50%, -100%) rotate(180deg);\n        }\n        100% {\n          transform: translate(-50%, -100%) rotate(360deg);\n        }\n      }\n      .tips {\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        width: 50px;\n        height: 50px;\n        transform: translate(-25px, -25px);\n        text-align: center;\n        line-height: 50px;\n        z-index: 30;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"container\">\n      <div class=\"wave\"></div>\n      <div class=\"wave-mask\"></div>\n      <div class=\"tips\">0%</div>\n    </div>\n\n    <div style=\"display: flex; justify-content: center; align-items: center; margin-top: 200px;\">\n      <input type=\"number\" step=\"5\">\n      <button style=\"margin-left: 20px;\" id=\"btn\">按钮</button>\n      <input style=\"margin-left: 40px;\" id=\"range\" type=\"range\" min=\"0\" max=\"100\" step=\"5\" value=\"0\" />\n    </div>\n    <script>\n      let btn = document.getElementById('btn')\n      let mask = document.getElementsByClassName('wave-mask')[0]\n      let ipt = document.getElementsByTagName('input')[0]\n      let tips = document.getElementsByClassName('tips')[0]\n      let range = document.getElementById('range')\n\n      btn.onclick = function(e) {\n        let value = (100 - +ipt.value)\n        mask.style.top = value + '%'\n        tips.innerHTML = ipt.value + '%'\n      }\n\n      range.onchange = function(e) {\n        let value = (100 - +e.target.value)\n        mask.style.top = value + '%'\n        tips.innerHTML = e.target.value + '%'\n      }\n    </script>\n  </body>\n</html>\n\n```\n\n","source":"_posts/水波纹动效.md","raw":"---\ntitle: css3 水位图波纹动效\ndate: 2020-07-20 22:57:23\ncategories:\n - css\ntags:\n - css\n---\n\n\n\n# 水波纹动效\n\n\n\n直接上代码\n\n\n\n通过遮罩和动画实现水位图波纹特效\n\n\n\n可以通过输入0-100的数字或者 拖动滑动条调节水位的高低 (通过修改wave-mask的top)\n\n<!-- more -->\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Document</title>\n    <style>\n      * {\n        box-sizing: border-box;\n        padding: 0;\n        margin: 0;\n      }\n      .container {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        border-radius: 50%;\n        border: 3px solid #67c23a;\n        background: #ffffff;\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        padding: 7px 7px;\n        overflow: hidden;\n      }\n      .wave {\n        position: relative;\n        width: 100px;\n        height: 100px;\n        background-image: linear-gradient(-180deg, #aaff80 13%, #67c23a 91%);\n        border-radius: 50%;\n        box-shadow: 1px 3px 3px 0 rgba(139, 139, 139, 0.822);\n      }\n      .wave-mask {\n        position: absolute;\n        width: 200px;\n        height: 200px;\n        top: 100%;\n        left: 50%;\n        border-radius: 39%;\n        background-color: white;\n        transform: translate(-50%, -100%) rotate(0);\n        animation: toRotate 10s linear infinite;\n        z-index: 20;\n      }\n\n      @keyframes toRotate {\n        50% {\n          transform: translate(-50%, -100%) rotate(180deg);\n        }\n        100% {\n          transform: translate(-50%, -100%) rotate(360deg);\n        }\n      }\n      .tips {\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        width: 50px;\n        height: 50px;\n        transform: translate(-25px, -25px);\n        text-align: center;\n        line-height: 50px;\n        z-index: 30;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"container\">\n      <div class=\"wave\"></div>\n      <div class=\"wave-mask\"></div>\n      <div class=\"tips\">0%</div>\n    </div>\n\n    <div style=\"display: flex; justify-content: center; align-items: center; margin-top: 200px;\">\n      <input type=\"number\" step=\"5\">\n      <button style=\"margin-left: 20px;\" id=\"btn\">按钮</button>\n      <input style=\"margin-left: 40px;\" id=\"range\" type=\"range\" min=\"0\" max=\"100\" step=\"5\" value=\"0\" />\n    </div>\n    <script>\n      let btn = document.getElementById('btn')\n      let mask = document.getElementsByClassName('wave-mask')[0]\n      let ipt = document.getElementsByTagName('input')[0]\n      let tips = document.getElementsByClassName('tips')[0]\n      let range = document.getElementById('range')\n\n      btn.onclick = function(e) {\n        let value = (100 - +ipt.value)\n        mask.style.top = value + '%'\n        tips.innerHTML = ipt.value + '%'\n      }\n\n      range.onchange = function(e) {\n        let value = (100 - +e.target.value)\n        mask.style.top = value + '%'\n        tips.innerHTML = e.target.value + '%'\n      }\n    </script>\n  </body>\n</html>\n\n```\n\n","slug":"水波纹动效","published":1,"updated":"2020-07-20T14:58:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqexq6br001jqn7v1jvtbnwh","content":"<h1 id=\"水波纹动效\"><a href=\"#水波纹动效\" class=\"headerlink\" title=\"水波纹动效\"></a>水波纹动效</h1><p>直接上代码</p>\n<p>通过遮罩和动画实现水位图波纹特效</p>\n<p>可以通过输入0-100的数字或者 拖动滑动条调节水位的高低 (通过修改wave-mask的top)</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">      * &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">box-sizing</span>: border-box;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">display</span>: flex;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">justify-content</span>: center;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">align-items</span>: center;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">border</span>: <span class=\"number\">3px</span> solid <span class=\"number\">#67c23a</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">background</span>: <span class=\"number\">#ffffff</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">position</span>: absolute;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-<span class=\"number\">50%</span>, -<span class=\"number\">50%</span>);</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">padding</span>: <span class=\"number\">7px</span> <span class=\"number\">7px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">overflow</span>: hidden;</span></span><br><span class=\"line\"><span class=\"language-css\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"selector-class\">.wave</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">position</span>: relative;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">background-image</span>: <span class=\"built_in\">linear-gradient</span>(-<span class=\"number\">180deg</span>, <span class=\"number\">#aaff80</span> <span class=\"number\">13%</span>, <span class=\"number\">#67c23a</span> <span class=\"number\">91%</span>);</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">box-shadow</span>: <span class=\"number\">1px</span> <span class=\"number\">3px</span> <span class=\"number\">3px</span> <span class=\"number\">0</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">139</span>, <span class=\"number\">139</span>, <span class=\"number\">139</span>, <span class=\"number\">0.822</span>);</span></span><br><span class=\"line\"><span class=\"language-css\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"selector-class\">.wave-mask</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">position</span>: absolute;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">top</span>: <span class=\"number\">100%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">border-radius</span>: <span class=\"number\">39%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">background-color</span>: white;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-<span class=\"number\">50%</span>, -<span class=\"number\">100%</span>) <span class=\"built_in\">rotate</span>(<span class=\"number\">0</span>);</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">animation</span>: toRotate <span class=\"number\">10s</span> linear infinite;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">z-index</span>: <span class=\"number\">20</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"keyword\">@keyframes</span> toRotate &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"number\">50%</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">          <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-<span class=\"number\">50%</span>, -<span class=\"number\">100%</span>) <span class=\"built_in\">rotate</span>(<span class=\"number\">180deg</span>);</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"number\">100%</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">          <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-<span class=\"number\">50%</span>, -<span class=\"number\">100%</span>) <span class=\"built_in\">rotate</span>(<span class=\"number\">360deg</span>);</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"selector-class\">.tips</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">position</span>: absolute;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-<span class=\"number\">25px</span>, -<span class=\"number\">25px</span>);</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">text-align</span>: center;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">line-height</span>: <span class=\"number\">50px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">z-index</span>: <span class=\"number\">30</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;wave&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;wave-mask&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;tips&quot;</span>&gt;</span>0%<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;display: flex; justify-content: center; align-items: center; margin-top: 200px;&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;number&quot;</span> <span class=\"attr\">step</span>=<span class=\"string\">&quot;5&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;margin-left: 20px;&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;btn&quot;</span>&gt;</span>按钮<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;margin-left: 40px;&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;range&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;range&quot;</span> <span class=\"attr\">min</span>=<span class=\"string\">&quot;0&quot;</span> <span class=\"attr\">max</span>=<span class=\"string\">&quot;100&quot;</span> <span class=\"attr\">step</span>=<span class=\"string\">&quot;5&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;0&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> btn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;btn&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> mask = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByClassName</span>(<span class=\"string\">&#x27;wave-mask&#x27;</span>)[<span class=\"number\">0</span>]</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> ipt = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&#x27;input&#x27;</span>)[<span class=\"number\">0</span>]</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> tips = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByClassName</span>(<span class=\"string\">&#x27;tips&#x27;</span>)[<span class=\"number\">0</span>]</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> range = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;range&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      btn.<span class=\"property\">onclick</span> = <span class=\"keyword\">function</span>(<span class=\"params\">e</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> value = (<span class=\"number\">100</span> - +ipt.<span class=\"property\">value</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        mask.<span class=\"property\">style</span>.<span class=\"property\">top</span> = value + <span class=\"string\">&#x27;%&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        tips.<span class=\"property\">innerHTML</span> = ipt.<span class=\"property\">value</span> + <span class=\"string\">&#x27;%&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      range.<span class=\"property\">onchange</span> = <span class=\"keyword\">function</span>(<span class=\"params\">e</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> value = (<span class=\"number\">100</span> - +e.<span class=\"property\">target</span>.<span class=\"property\">value</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        mask.<span class=\"property\">style</span>.<span class=\"property\">top</span> = value + <span class=\"string\">&#x27;%&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        tips.<span class=\"property\">innerHTML</span> = e.<span class=\"property\">target</span>.<span class=\"property\">value</span> + <span class=\"string\">&#x27;%&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h1 id=\"水波纹动效\"><a href=\"#水波纹动效\" class=\"headerlink\" title=\"水波纹动效\"></a>水波纹动效</h1><p>直接上代码</p>\n<p>通过遮罩和动画实现水位图波纹特效</p>\n<p>可以通过输入0-100的数字或者 拖动滑动条调节水位的高低 (通过修改wave-mask的top)</p>","more":"<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">      * &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">box-sizing</span>: border-box;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">display</span>: flex;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">justify-content</span>: center;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">align-items</span>: center;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">border</span>: <span class=\"number\">3px</span> solid <span class=\"number\">#67c23a</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">background</span>: <span class=\"number\">#ffffff</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">position</span>: absolute;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-<span class=\"number\">50%</span>, -<span class=\"number\">50%</span>);</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">padding</span>: <span class=\"number\">7px</span> <span class=\"number\">7px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">overflow</span>: hidden;</span></span><br><span class=\"line\"><span class=\"language-css\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"selector-class\">.wave</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">position</span>: relative;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">background-image</span>: <span class=\"built_in\">linear-gradient</span>(-<span class=\"number\">180deg</span>, <span class=\"number\">#aaff80</span> <span class=\"number\">13%</span>, <span class=\"number\">#67c23a</span> <span class=\"number\">91%</span>);</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">box-shadow</span>: <span class=\"number\">1px</span> <span class=\"number\">3px</span> <span class=\"number\">3px</span> <span class=\"number\">0</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">139</span>, <span class=\"number\">139</span>, <span class=\"number\">139</span>, <span class=\"number\">0.822</span>);</span></span><br><span class=\"line\"><span class=\"language-css\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"selector-class\">.wave-mask</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">position</span>: absolute;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">top</span>: <span class=\"number\">100%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">border-radius</span>: <span class=\"number\">39%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">background-color</span>: white;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-<span class=\"number\">50%</span>, -<span class=\"number\">100%</span>) <span class=\"built_in\">rotate</span>(<span class=\"number\">0</span>);</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">animation</span>: toRotate <span class=\"number\">10s</span> linear infinite;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">z-index</span>: <span class=\"number\">20</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"keyword\">@keyframes</span> toRotate &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"number\">50%</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">          <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-<span class=\"number\">50%</span>, -<span class=\"number\">100%</span>) <span class=\"built_in\">rotate</span>(<span class=\"number\">180deg</span>);</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"number\">100%</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">          <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-<span class=\"number\">50%</span>, -<span class=\"number\">100%</span>) <span class=\"built_in\">rotate</span>(<span class=\"number\">360deg</span>);</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"selector-class\">.tips</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">position</span>: absolute;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-<span class=\"number\">25px</span>, -<span class=\"number\">25px</span>);</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">text-align</span>: center;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">line-height</span>: <span class=\"number\">50px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">z-index</span>: <span class=\"number\">30</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;wave&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;wave-mask&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;tips&quot;</span>&gt;</span>0%<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;display: flex; justify-content: center; align-items: center; margin-top: 200px;&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;number&quot;</span> <span class=\"attr\">step</span>=<span class=\"string\">&quot;5&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;margin-left: 20px;&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;btn&quot;</span>&gt;</span>按钮<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;margin-left: 40px;&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;range&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;range&quot;</span> <span class=\"attr\">min</span>=<span class=\"string\">&quot;0&quot;</span> <span class=\"attr\">max</span>=<span class=\"string\">&quot;100&quot;</span> <span class=\"attr\">step</span>=<span class=\"string\">&quot;5&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;0&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> btn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;btn&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> mask = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByClassName</span>(<span class=\"string\">&#x27;wave-mask&#x27;</span>)[<span class=\"number\">0</span>]</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> ipt = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&#x27;input&#x27;</span>)[<span class=\"number\">0</span>]</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> tips = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByClassName</span>(<span class=\"string\">&#x27;tips&#x27;</span>)[<span class=\"number\">0</span>]</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> range = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;range&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      btn.<span class=\"property\">onclick</span> = <span class=\"keyword\">function</span>(<span class=\"params\">e</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> value = (<span class=\"number\">100</span> - +ipt.<span class=\"property\">value</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        mask.<span class=\"property\">style</span>.<span class=\"property\">top</span> = value + <span class=\"string\">&#x27;%&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        tips.<span class=\"property\">innerHTML</span> = ipt.<span class=\"property\">value</span> + <span class=\"string\">&#x27;%&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      range.<span class=\"property\">onchange</span> = <span class=\"keyword\">function</span>(<span class=\"params\">e</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> value = (<span class=\"number\">100</span> - +e.<span class=\"property\">target</span>.<span class=\"property\">value</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        mask.<span class=\"property\">style</span>.<span class=\"property\">top</span> = value + <span class=\"string\">&#x27;%&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        tips.<span class=\"property\">innerHTML</span> = e.<span class=\"property\">target</span>.<span class=\"property\">value</span> + <span class=\"string\">&#x27;%&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"less 使用总结","date":"2020-11-04T14:59:29.000Z","_content":"\n# less  笔记📒\n\n\n\n\n\n## 变量\n\n\n\n```less\n@color: red;\n.a {\n  color: @color;\n}\n```\n\n\n\n<!-- more -->\n\n## 变量选择器\n\n```less\n@my-selector: swipper;\n\n.@{my-selector}-list {\n  color: red;\n}\n\n\n// 转换成\n.swipper-list {\n  color: red;\n}\n```\n\n\n\n\n\n## Properties\n\n```less\n@my-propertity: width;\n\n.block {\n  @{my-propertity}: 10px;\n}\n\n// 转换成\n.block {\n  width: 10px;\n}\n```\n\n用变量代替或**拼接**样式属性名\n\n\n\n## 用变量定义变量名\n\n\n\n```less\n@danger: red;\n\n.font {\n  @color: @danger;\n  color: @@color;\n}\n```\n\n\n\n## Properties as Variables\n\n```less\n@color: red;\n.bg {\n  color: @color;\t// red\n  background-color: $color;\t// red\n}\n```\n\n利用属性名做为变量将属性值传递过去\n\n\n\n## 逻辑函数\n\n```less\n.main {\n  color: if(boolean(true) , red, yellow)\n}\n\n// 转换成\n.main {\n  color: red;\n}\n```\n\n\n\n## list functions 列表函数\n\n```less\n// length (返回列表长度)\n@my-list: nav, bar;\n@len: length(@my-list);\n.w {\n  width: e(\"@{len}px\");\t// e函数作用是去掉引号\n}\n// ==> 转换成\n.w {\n  width: 2px;\n}\n\n\n// extract (返回列表中指定位置元素)\n@list-idx: 10px, 20px, 30px, 40px;\n.l {\n  width: extract(@list-idx, 2);\n  \n}\n// ====> 转换成\n.l {\n  width: 20px;\n}\n\n// range(创建一个范围的列表)\n@values: range(0, 100px, 20px);\n.w {\n  border: @values;\n}\n// =====> 转换成后\n.w {\n  border: 0px 20px 40px 60px 80px 100px;\n}\n\n// each(遍历列表，生成绑定的每个样式类)\n@myList: left, top, right, bottom;\neach(@myList, {\n  .my-p {\n   position: absolute;\n   @{value}: 0;\n  }\n})\n// =====> 转换成\n.my-p {\n  position: absolute;\n  left: 0;\n}\n.my-p {\n  position: absolute;\n  top: 0;\n}\n.my-p {\n  position: absolute;\n  right: 0;\n}\n.my-p {\n  position: absolute;\n  bottom: 0;\n}\n\n```\n\n\n\n## 循环输出\n\n\n\n````less\n// eg: 想输出如下的样式\n.block-a {\n  color: a;\n}\n.block-b {\n  color: b;\n}\n\n// 实现\n@colors: a,b,c,d;\n// 定义函数\n.blockCreater(@name, @color) {\n  .block-@{name} {\n    color:  @color;\n  }\n}\n// 循环生成\n.loop(@i) when (@i < length(@colors)+1){\n    .blockCreater(extract(@colors, @i),extract(@colors, @i));\n    .loop(@i+1);\n}\n.loop(1);\n// ====> 转换成\n.block-a {\n  color: a;\n}\n.block-b {\n  color: b;\n}\n.block-c {\n  color: c;\n}\n.block-d {\n  color: d;\n}\n\n````\n\n","source":"_posts/less笔记.md","raw":"---\ntitle: less 使用总结\ndate: 2020-11-04 22:59:29\ntags: \n - css\ncategories: \n - less\n---\n\n# less  笔记📒\n\n\n\n\n\n## 变量\n\n\n\n```less\n@color: red;\n.a {\n  color: @color;\n}\n```\n\n\n\n<!-- more -->\n\n## 变量选择器\n\n```less\n@my-selector: swipper;\n\n.@{my-selector}-list {\n  color: red;\n}\n\n\n// 转换成\n.swipper-list {\n  color: red;\n}\n```\n\n\n\n\n\n## Properties\n\n```less\n@my-propertity: width;\n\n.block {\n  @{my-propertity}: 10px;\n}\n\n// 转换成\n.block {\n  width: 10px;\n}\n```\n\n用变量代替或**拼接**样式属性名\n\n\n\n## 用变量定义变量名\n\n\n\n```less\n@danger: red;\n\n.font {\n  @color: @danger;\n  color: @@color;\n}\n```\n\n\n\n## Properties as Variables\n\n```less\n@color: red;\n.bg {\n  color: @color;\t// red\n  background-color: $color;\t// red\n}\n```\n\n利用属性名做为变量将属性值传递过去\n\n\n\n## 逻辑函数\n\n```less\n.main {\n  color: if(boolean(true) , red, yellow)\n}\n\n// 转换成\n.main {\n  color: red;\n}\n```\n\n\n\n## list functions 列表函数\n\n```less\n// length (返回列表长度)\n@my-list: nav, bar;\n@len: length(@my-list);\n.w {\n  width: e(\"@{len}px\");\t// e函数作用是去掉引号\n}\n// ==> 转换成\n.w {\n  width: 2px;\n}\n\n\n// extract (返回列表中指定位置元素)\n@list-idx: 10px, 20px, 30px, 40px;\n.l {\n  width: extract(@list-idx, 2);\n  \n}\n// ====> 转换成\n.l {\n  width: 20px;\n}\n\n// range(创建一个范围的列表)\n@values: range(0, 100px, 20px);\n.w {\n  border: @values;\n}\n// =====> 转换成后\n.w {\n  border: 0px 20px 40px 60px 80px 100px;\n}\n\n// each(遍历列表，生成绑定的每个样式类)\n@myList: left, top, right, bottom;\neach(@myList, {\n  .my-p {\n   position: absolute;\n   @{value}: 0;\n  }\n})\n// =====> 转换成\n.my-p {\n  position: absolute;\n  left: 0;\n}\n.my-p {\n  position: absolute;\n  top: 0;\n}\n.my-p {\n  position: absolute;\n  right: 0;\n}\n.my-p {\n  position: absolute;\n  bottom: 0;\n}\n\n```\n\n\n\n## 循环输出\n\n\n\n````less\n// eg: 想输出如下的样式\n.block-a {\n  color: a;\n}\n.block-b {\n  color: b;\n}\n\n// 实现\n@colors: a,b,c,d;\n// 定义函数\n.blockCreater(@name, @color) {\n  .block-@{name} {\n    color:  @color;\n  }\n}\n// 循环生成\n.loop(@i) when (@i < length(@colors)+1){\n    .blockCreater(extract(@colors, @i),extract(@colors, @i));\n    .loop(@i+1);\n}\n.loop(1);\n// ====> 转换成\n.block-a {\n  color: a;\n}\n.block-b {\n  color: b;\n}\n.block-c {\n  color: c;\n}\n.block-d {\n  color: d;\n}\n\n````\n\n","slug":"less笔记","published":1,"updated":"2021-03-30T06:57:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqexq6bs001mqn7v609uhmb4","content":"<h1 id=\"less-笔记📒\"><a href=\"#less-笔记📒\" class=\"headerlink\" title=\"less  笔记📒\"></a>less  笔记📒</h1><h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@color:</span> red;</span><br><span class=\"line\"><span class=\"selector-class\">.a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"variable\">@color</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<span id=\"more\"></span>\n\n<h2 id=\"变量选择器\"><a href=\"#变量选择器\" class=\"headerlink\" title=\"变量选择器\"></a>变量选择器</h2><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@my-selector:</span> swipper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.@&#123;my-selector&#125;</span><span class=\"selector-tag\">-list</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 转换成</span></span><br><span class=\"line\"><span class=\"selector-class\">.swipper-list</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"Properties\"><a href=\"#Properties\" class=\"headerlink\" title=\"Properties\"></a>Properties</h2><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@my-propertity:</span> width;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.block</span> &#123;</span><br><span class=\"line\">  @&#123;my-propertity&#125;: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 转换成</span></span><br><span class=\"line\"><span class=\"selector-class\">.block</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>用变量代替或<strong>拼接</strong>样式属性名</p>\n<h2 id=\"用变量定义变量名\"><a href=\"#用变量定义变量名\" class=\"headerlink\" title=\"用变量定义变量名\"></a>用变量定义变量名</h2><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@danger:</span> red;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.font</span> &#123;</span><br><span class=\"line\">  <span class=\"variable\">@color:</span> <span class=\"variable\">@danger</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"variable\">@@color</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Properties-as-Variables\"><a href=\"#Properties-as-Variables\" class=\"headerlink\" title=\"Properties as Variables\"></a>Properties as Variables</h2><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@color:</span> red;</span><br><span class=\"line\"><span class=\"selector-class\">.bg</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"variable\">@color</span>;\t<span class=\"comment\">// red</span></span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: $color;\t<span class=\"comment\">// red</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>利用属性名做为变量将属性值传递过去</p>\n<h2 id=\"逻辑函数\"><a href=\"#逻辑函数\" class=\"headerlink\" title=\"逻辑函数\"></a>逻辑函数</h2><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.main</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">if</span>(<span class=\"built_in\">boolean</span>(true) , red, yellow)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 转换成</span></span><br><span class=\"line\"><span class=\"selector-class\">.main</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"list-functions-列表函数\"><a href=\"#list-functions-列表函数\" class=\"headerlink\" title=\"list functions 列表函数\"></a>list functions 列表函数</h2><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// length (返回列表长度)</span></span><br><span class=\"line\"><span class=\"variable\">@my-list:</span> nav, bar;</span><br><span class=\"line\"><span class=\"variable\">@len:</span> <span class=\"built_in\">length</span>(<span class=\"variable\">@my-list</span>);</span><br><span class=\"line\"><span class=\"selector-class\">.w</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"built_in\">e</span>(<span class=\"string\">&quot;@&#123;len&#125;px&quot;</span>);\t<span class=\"comment\">// e函数作用是去掉引号</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ==&gt; 转换成</span></span><br><span class=\"line\"><span class=\"selector-class\">.w</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">2px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// extract (返回列表中指定位置元素)</span></span><br><span class=\"line\"><span class=\"variable\">@list-idx:</span> <span class=\"number\">10px</span>, <span class=\"number\">20px</span>, <span class=\"number\">30px</span>, <span class=\"number\">40px</span>;</span><br><span class=\"line\"><span class=\"selector-class\">.l</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"built_in\">extract</span>(<span class=\"variable\">@list-idx</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ====&gt; 转换成</span></span><br><span class=\"line\"><span class=\"selector-class\">.l</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// range(创建一个范围的列表)</span></span><br><span class=\"line\"><span class=\"variable\">@values:</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"number\">100px</span>, <span class=\"number\">20px</span>);</span><br><span class=\"line\"><span class=\"selector-class\">.w</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"variable\">@values</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// =====&gt; 转换成后</span></span><br><span class=\"line\"><span class=\"selector-class\">.w</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">0px</span> <span class=\"number\">20px</span> <span class=\"number\">40px</span> <span class=\"number\">60px</span> <span class=\"number\">80px</span> <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// each(遍历列表，生成绑定的每个样式类)</span></span><br><span class=\"line\"><span class=\"variable\">@myList:</span> left, top, right, bottom;</span><br><span class=\"line\"><span class=\"selector-tag\">each</span>(<span class=\"variable\">@myList</span>, &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.my-p</span> &#123;</span><br><span class=\"line\">   <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">   @&#123;value&#125;: <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// =====&gt; 转换成</span></span><br><span class=\"line\"><span class=\"selector-class\">.my-p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.my-p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.my-p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.my-p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"循环输出\"><a href=\"#循环输出\" class=\"headerlink\" title=\"循环输出\"></a>循环输出</h2><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// eg: 想输出如下的样式</span></span><br><span class=\"line\"><span class=\"selector-class\">.block-a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.block-b</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实现</span></span><br><span class=\"line\"><span class=\"variable\">@colors:</span> a,b,c,d;</span><br><span class=\"line\"><span class=\"comment\">// 定义函数</span></span><br><span class=\"line\"><span class=\"selector-class\">.blockCreater</span>(<span class=\"variable\">@name</span>, <span class=\"variable\">@color</span>) &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.block-</span><span class=\"variable\">@&#123;name&#125;</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>:  <span class=\"variable\">@color</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 循环生成</span></span><br><span class=\"line\"><span class=\"selector-class\">.loop</span>(<span class=\"variable\">@i</span>) <span class=\"keyword\">when</span> (<span class=\"variable\">@i</span> &lt; <span class=\"built_in\">length</span>(<span class=\"variable\">@colors</span>)+<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    <span class=\"selector-class\">.blockCreater</span>(<span class=\"built_in\">extract</span>(<span class=\"variable\">@colors</span>, <span class=\"variable\">@i</span>),<span class=\"built_in\">extract</span>(<span class=\"variable\">@colors</span>, <span class=\"variable\">@i</span>));</span><br><span class=\"line\">    <span class=\"selector-class\">.loop</span>(<span class=\"variable\">@i</span>+<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.loop</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"comment\">// ====&gt; 转换成</span></span><br><span class=\"line\"><span class=\"selector-class\">.block-a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.block-b</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.block-c</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.block-d</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: d;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h1 id=\"less-笔记📒\"><a href=\"#less-笔记📒\" class=\"headerlink\" title=\"less  笔记📒\"></a>less  笔记📒</h1><h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@color:</span> red;</span><br><span class=\"line\"><span class=\"selector-class\">.a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"variable\">@color</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"变量选择器\"><a href=\"#变量选择器\" class=\"headerlink\" title=\"变量选择器\"></a>变量选择器</h2><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@my-selector:</span> swipper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.@&#123;my-selector&#125;</span><span class=\"selector-tag\">-list</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 转换成</span></span><br><span class=\"line\"><span class=\"selector-class\">.swipper-list</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"Properties\"><a href=\"#Properties\" class=\"headerlink\" title=\"Properties\"></a>Properties</h2><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@my-propertity:</span> width;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.block</span> &#123;</span><br><span class=\"line\">  @&#123;my-propertity&#125;: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 转换成</span></span><br><span class=\"line\"><span class=\"selector-class\">.block</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>用变量代替或<strong>拼接</strong>样式属性名</p>\n<h2 id=\"用变量定义变量名\"><a href=\"#用变量定义变量名\" class=\"headerlink\" title=\"用变量定义变量名\"></a>用变量定义变量名</h2><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@danger:</span> red;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.font</span> &#123;</span><br><span class=\"line\">  <span class=\"variable\">@color:</span> <span class=\"variable\">@danger</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"variable\">@@color</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Properties-as-Variables\"><a href=\"#Properties-as-Variables\" class=\"headerlink\" title=\"Properties as Variables\"></a>Properties as Variables</h2><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@color:</span> red;</span><br><span class=\"line\"><span class=\"selector-class\">.bg</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"variable\">@color</span>;\t<span class=\"comment\">// red</span></span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: $color;\t<span class=\"comment\">// red</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>利用属性名做为变量将属性值传递过去</p>\n<h2 id=\"逻辑函数\"><a href=\"#逻辑函数\" class=\"headerlink\" title=\"逻辑函数\"></a>逻辑函数</h2><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.main</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">if</span>(<span class=\"built_in\">boolean</span>(true) , red, yellow)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 转换成</span></span><br><span class=\"line\"><span class=\"selector-class\">.main</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"list-functions-列表函数\"><a href=\"#list-functions-列表函数\" class=\"headerlink\" title=\"list functions 列表函数\"></a>list functions 列表函数</h2><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// length (返回列表长度)</span></span><br><span class=\"line\"><span class=\"variable\">@my-list:</span> nav, bar;</span><br><span class=\"line\"><span class=\"variable\">@len:</span> <span class=\"built_in\">length</span>(<span class=\"variable\">@my-list</span>);</span><br><span class=\"line\"><span class=\"selector-class\">.w</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"built_in\">e</span>(<span class=\"string\">&quot;@&#123;len&#125;px&quot;</span>);\t<span class=\"comment\">// e函数作用是去掉引号</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ==&gt; 转换成</span></span><br><span class=\"line\"><span class=\"selector-class\">.w</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">2px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// extract (返回列表中指定位置元素)</span></span><br><span class=\"line\"><span class=\"variable\">@list-idx:</span> <span class=\"number\">10px</span>, <span class=\"number\">20px</span>, <span class=\"number\">30px</span>, <span class=\"number\">40px</span>;</span><br><span class=\"line\"><span class=\"selector-class\">.l</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"built_in\">extract</span>(<span class=\"variable\">@list-idx</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ====&gt; 转换成</span></span><br><span class=\"line\"><span class=\"selector-class\">.l</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// range(创建一个范围的列表)</span></span><br><span class=\"line\"><span class=\"variable\">@values:</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"number\">100px</span>, <span class=\"number\">20px</span>);</span><br><span class=\"line\"><span class=\"selector-class\">.w</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"variable\">@values</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// =====&gt; 转换成后</span></span><br><span class=\"line\"><span class=\"selector-class\">.w</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">0px</span> <span class=\"number\">20px</span> <span class=\"number\">40px</span> <span class=\"number\">60px</span> <span class=\"number\">80px</span> <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// each(遍历列表，生成绑定的每个样式类)</span></span><br><span class=\"line\"><span class=\"variable\">@myList:</span> left, top, right, bottom;</span><br><span class=\"line\"><span class=\"selector-tag\">each</span>(<span class=\"variable\">@myList</span>, &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.my-p</span> &#123;</span><br><span class=\"line\">   <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">   @&#123;value&#125;: <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// =====&gt; 转换成</span></span><br><span class=\"line\"><span class=\"selector-class\">.my-p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.my-p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.my-p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.my-p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"循环输出\"><a href=\"#循环输出\" class=\"headerlink\" title=\"循环输出\"></a>循环输出</h2><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// eg: 想输出如下的样式</span></span><br><span class=\"line\"><span class=\"selector-class\">.block-a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.block-b</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实现</span></span><br><span class=\"line\"><span class=\"variable\">@colors:</span> a,b,c,d;</span><br><span class=\"line\"><span class=\"comment\">// 定义函数</span></span><br><span class=\"line\"><span class=\"selector-class\">.blockCreater</span>(<span class=\"variable\">@name</span>, <span class=\"variable\">@color</span>) &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.block-</span><span class=\"variable\">@&#123;name&#125;</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>:  <span class=\"variable\">@color</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 循环生成</span></span><br><span class=\"line\"><span class=\"selector-class\">.loop</span>(<span class=\"variable\">@i</span>) <span class=\"keyword\">when</span> (<span class=\"variable\">@i</span> &lt; <span class=\"built_in\">length</span>(<span class=\"variable\">@colors</span>)+<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    <span class=\"selector-class\">.blockCreater</span>(<span class=\"built_in\">extract</span>(<span class=\"variable\">@colors</span>, <span class=\"variable\">@i</span>),<span class=\"built_in\">extract</span>(<span class=\"variable\">@colors</span>, <span class=\"variable\">@i</span>));</span><br><span class=\"line\">    <span class=\"selector-class\">.loop</span>(<span class=\"variable\">@i</span>+<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.loop</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"comment\">// ====&gt; 转换成</span></span><br><span class=\"line\"><span class=\"selector-class\">.block-a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.block-b</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.block-c</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.block-d</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: d;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"clqexq6bl0007qn7vgu13h3y1","category_id":"clqexq6bj0004qn7v0fevhyad","_id":"clqexq6bn000fqn7varlw9aw3"},{"post_id":"clqexq6bh0001qn7vd3ih052x","category_id":"clqexq6bj0004qn7v0fevhyad","_id":"clqexq6bn000kqn7vb5c6etxs"},{"post_id":"clqexq6bm000cqn7vcn6zbh6c","category_id":"clqexq6bj0004qn7v0fevhyad","_id":"clqexq6bn000nqn7vbvhf50f0"},{"post_id":"clqexq6bi0003qn7vdacr2eb0","category_id":"clqexq6bj0004qn7v0fevhyad","_id":"clqexq6bo000rqn7v60gz66wh"},{"post_id":"clqexq6bm000eqn7va4x1fjcu","category_id":"clqexq6bj0004qn7v0fevhyad","_id":"clqexq6bp000uqn7vhoqu2c8u"},{"post_id":"clqexq6bk0006qn7vapix1s4p","category_id":"clqexq6bn000gqn7vccjuat95","_id":"clqexq6bp000zqn7v1mz201h9"},{"post_id":"clqexq6bo000qqn7v99e08ety","category_id":"clqexq6bj0004qn7v0fevhyad","_id":"clqexq6bq0012qn7v7hmy6d4v"},{"post_id":"clqexq6bl0008qn7veqyf99zy","category_id":"clqexq6bo000oqn7v9u36e5mx","_id":"clqexq6bq0014qn7vgg3gfieb"},{"post_id":"clqexq6bo000tqn7v3fa51kvw","category_id":"clqexq6bj0004qn7v0fevhyad","_id":"clqexq6bq0018qn7v7usu2hd1"},{"post_id":"clqexq6bp000yqn7vczvzggzj","category_id":"clqexq6bj0004qn7v0fevhyad","_id":"clqexq6br001cqn7v2ro83etx"},{"post_id":"clqexq6bn000mqn7v6dmm5dps","category_id":"clqexq6bj0004qn7v0fevhyad","_id":"clqexq6br001fqn7vb6z24oow"},{"post_id":"clqexq6bn000mqn7v6dmm5dps","category_id":"clqexq6bp000wqn7v15h0ewp3","_id":"clqexq6br001hqn7v6cf28soq"},{"post_id":"clqexq6bp0011qn7vewi568vq","category_id":"clqexq6bj0004qn7v0fevhyad","_id":"clqexq6bs001kqn7v5e5v0hzp"},{"post_id":"clqexq6bq0017qn7v9xsu8nii","category_id":"clqexq6bj0004qn7v0fevhyad","_id":"clqexq6bs001nqn7v0u625ryj"},{"post_id":"clqexq6bq001aqn7v77lte5xt","category_id":"clqexq6bj0004qn7v0fevhyad","_id":"clqexq6bs001qqn7v9p06ainq"},{"post_id":"clqexq6br001eqn7vbbtn6r29","category_id":"clqexq6bj0004qn7v0fevhyad","_id":"clqexq6bt001tqn7v6rr5gogi"},{"post_id":"clqexq6br001eqn7vbbtn6r29","category_id":"clqexq6br001bqn7v1lw5bqhn","_id":"clqexq6bu001vqn7vdqln743m"},{"post_id":"clqexq6bq0013qn7v3bj45dmu","category_id":"clqexq6bj0004qn7v0fevhyad","_id":"clqexq6bu001yqn7vh1nncfkh"},{"post_id":"clqexq6bq0013qn7v3bj45dmu","category_id":"clqexq6br001bqn7v1lw5bqhn","_id":"clqexq6bu001zqn7vdld1h3qe"},{"post_id":"clqexq6br001gqn7vhjpeh2cn","category_id":"clqexq6bj0004qn7v0fevhyad","_id":"clqexq6bu0021qn7v4sm5eneu"},{"post_id":"clqexq6br001jqn7v1jvtbnwh","category_id":"clqexq6bo000oqn7v9u36e5mx","_id":"clqexq6bu0022qn7vbozy9fbb"},{"post_id":"clqexq6bs001mqn7v609uhmb4","category_id":"clqexq6bs001sqn7veolwe94v","_id":"clqexq6bu0024qn7v337x7woa"}],"PostTag":[{"post_id":"clqexq6bl0007qn7vgu13h3y1","tag_id":"clqexq6bk0005qn7v91tzgyy0","_id":"clqexq6bm000bqn7v10dl4gyw"},{"post_id":"clqexq6bh0001qn7vd3ih052x","tag_id":"clqexq6bk0005qn7v91tzgyy0","_id":"clqexq6bm000dqn7v378k1mwc"},{"post_id":"clqexq6bm000cqn7vcn6zbh6c","tag_id":"clqexq6bk0005qn7v91tzgyy0","_id":"clqexq6bn000iqn7v6lijgw1x"},{"post_id":"clqexq6bm000eqn7va4x1fjcu","tag_id":"clqexq6bk0005qn7v91tzgyy0","_id":"clqexq6bn000lqn7v46rmbb1s"},{"post_id":"clqexq6bi0003qn7vdacr2eb0","tag_id":"clqexq6bl000aqn7ve9o580h4","_id":"clqexq6bo000sqn7v31fmauhn"},{"post_id":"clqexq6bi0003qn7vdacr2eb0","tag_id":"clqexq6bn000hqn7v67gs303d","_id":"clqexq6bp000vqn7va2aado9x"},{"post_id":"clqexq6bo000qqn7v99e08ety","tag_id":"clqexq6bk0005qn7v91tzgyy0","_id":"clqexq6bp0010qn7v98pf3x8k"},{"post_id":"clqexq6bk0006qn7vapix1s4p","tag_id":"clqexq6bo000pqn7v5uiw70hh","_id":"clqexq6bq0016qn7v0l1pc0ni"},{"post_id":"clqexq6bk0006qn7vapix1s4p","tag_id":"clqexq6bp000xqn7vfq8z5p4a","_id":"clqexq6bq0019qn7v6lvi5b3i"},{"post_id":"clqexq6bl0008qn7veqyf99zy","tag_id":"clqexq6bq0015qn7vd0my3rjp","_id":"clqexq6bs001lqn7v6c7g2t32"},{"post_id":"clqexq6bl0008qn7veqyf99zy","tag_id":"clqexq6br001dqn7v4g7bgpi4","_id":"clqexq6bs001oqn7v6pg73ost"},{"post_id":"clqexq6br001gqn7vhjpeh2cn","tag_id":"clqexq6bk0005qn7v91tzgyy0","_id":"clqexq6bs001rqn7vce7bg2fc"},{"post_id":"clqexq6bn000jqn7vavgr2q4n","tag_id":"clqexq6br001iqn7v2qaogdpp","_id":"clqexq6bt001uqn7v7ah79bbv"},{"post_id":"clqexq6bn000mqn7v6dmm5dps","tag_id":"clqexq6bs001pqn7v2a8bdmm8","_id":"clqexq6bu001xqn7v5bvl2o0o"},{"post_id":"clqexq6bo000tqn7v3fa51kvw","tag_id":"clqexq6br001iqn7v2qaogdpp","_id":"clqexq6bu0025qn7va3c045qg"},{"post_id":"clqexq6bo000tqn7v3fa51kvw","tag_id":"clqexq6bu0020qn7v2lxm6k93","_id":"clqexq6bu0026qn7vfnvmhfdp"},{"post_id":"clqexq6bp000yqn7vczvzggzj","tag_id":"clqexq6bu0023qn7v31ym3f3d","_id":"clqexq6bu0028qn7v7d7f9m8v"},{"post_id":"clqexq6bp0011qn7vewi568vq","tag_id":"clqexq6bu0027qn7v2z919ueq","_id":"clqexq6bu002aqn7ve5ov28hi"},{"post_id":"clqexq6bq0013qn7v3bj45dmu","tag_id":"clqexq6bu0029qn7vatxq5a2r","_id":"clqexq6bv002cqn7vfkj007c7"},{"post_id":"clqexq6bq0017qn7v9xsu8nii","tag_id":"clqexq6bk0005qn7v91tzgyy0","_id":"clqexq6bv002fqn7vcurt2ccu"},{"post_id":"clqexq6bq0017qn7v9xsu8nii","tag_id":"clqexq6bu002bqn7v2b0j08pj","_id":"clqexq6bv002gqn7v7iyi12xa"},{"post_id":"clqexq6bq0017qn7v9xsu8nii","tag_id":"clqexq6bv002dqn7v4701bmzw","_id":"clqexq6bv002iqn7vdlt9dlod"},{"post_id":"clqexq6bq001aqn7v77lte5xt","tag_id":"clqexq6bv002eqn7v3egig1jl","_id":"clqexq6bv002jqn7v5pbgg9p7"},{"post_id":"clqexq6br001eqn7vbbtn6r29","tag_id":"clqexq6bu0029qn7vatxq5a2r","_id":"clqexq6bv002lqn7v7gxm61he"},{"post_id":"clqexq6br001jqn7v1jvtbnwh","tag_id":"clqexq6bv002kqn7v7en9aqp7","_id":"clqexq6bv002nqn7vac4i2u95"},{"post_id":"clqexq6bs001mqn7v609uhmb4","tag_id":"clqexq6bv002kqn7v7en9aqp7","_id":"clqexq6bv002oqn7v3vuf7r85"}],"Tag":[{"name":"javascript","_id":"clqexq6bk0005qn7v91tzgyy0"},{"name":"i18n","_id":"clqexq6bl000aqn7ve9o580h4"},{"name":"nuxt","_id":"clqexq6bn000hqn7v67gs303d"},{"name":"ThreeJs","_id":"clqexq6bo000pqn7v5uiw70hh"},{"name":"JavaScript","_id":"clqexq6bp000xqn7vfq8z5p4a"},{"name":"前端","_id":"clqexq6bq0015qn7vd0my3rjp"},{"name":"css技巧","_id":"clqexq6br001dqn7v4g7bgpi4"},{"name":"Vue","_id":"clqexq6br001iqn7v2qaogdpp"},{"name":"react","_id":"clqexq6bs001pqn7v2a8bdmm8"},{"name":"Vue-Router","_id":"clqexq6bu0020qn7v2lxm6k93"},{"name":"algorithm","_id":"clqexq6bu0023qn7v31ym3f3d"},{"name":"blob","_id":"clqexq6bu0027qn7v2z919ueq"},{"name":"vue","_id":"clqexq6bu0029qn7vatxq5a2r"},{"name":"rollup","_id":"clqexq6bu002bqn7v2b0j08pj"},{"name":"npm","_id":"clqexq6bv002dqn7v4701bmzw"},{"name":"summary","_id":"clqexq6bv002eqn7v3egig1jl"},{"name":"css","_id":"clqexq6bv002kqn7v7en9aqp7"}]}}